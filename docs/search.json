[
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Content",
    "section": "",
    "text": "Module\nTopics\nCode-a-long\nHomework\nGroup Practice Problems\nImport into posit.cloud project\n(run in terminal)\n\n\n\n\n1.1\nIntro to RStudio / posit.cloud\nblank | key\n\n\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_1.1.zip && unzip module_1.1.zip && rm module_1.1.zip\n\n\n\n1.2\nVariables, functions, loading data\nblank | key\nblank | key\nblank | key\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_1.2.zip && unzip module_1.2.zip && rm module_1.2.zip\n\n\n\n1.3\nAnalyzing class data set\nblank | key\nblank | key\nblank | key\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_1.3.zip && unzip module_1.3.zip && rm module_1.3.zip\n\n\n\n1.4\nAnalyzing external data set\nblank | key\nblank | key\n\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_1.4.zip && unzip module_1.4.zip && rm module_1.4.zip\n\n\n\n2.1\nIntroduction to Data Visualization\nblank | key\nblank | key\nblank | key\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_2.1.zip && unzip module_2.1.zip && rm module_2.1.zip\n\n\n\n2.2\nBoxplots, bar plots, and error bars\nblank | key\n-\n-\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_2.2.zip && unzip module_2.2.zip && rm module_2.2.zip\n\n\n\n2.3\nUnderstanding Sick Fish\n\nUnderstanding Sick Fish - Blank\nTilapia / Ammonia Key\nTilapia / Oxygen Key\nTilapia / Temperature Key\nTrout / Ammonia Key\nTrout / Oxygen Key\nTrout / Temperature Key\n\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_2.2.zip && unzip module_2.2.zip && rm module_2.2.zip\n\n\n\n3.1\nStatistical inference and two sample t-tests\nblank | key\nblank | key\nt-test by hand\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_3.1.zip && unzip module_3.1.zip && rm module_3.1.zip\n\n\n\n3.2\nStatistical inference and ANOVAs\nblank | key\nblank | key\n\n\nwget https://github.com/Lewis-and-Clark-Data-Science/Data-in-the-wild/raw/refs/heads/main/zips/module_3.2.zip && unzip module_3.2.zip && rm module_3.2.zip",
    "crumbs": [
      "Content"
    ]
  },
  {
    "objectID": "using.html",
    "href": "using.html",
    "title": "Using this content",
    "section": "",
    "text": "Import a submodule into a posit.cloud project:\n\nIn a posit.cloud workspace, create a new project:\n\n\n\n\n\n\n\nOn this site, navigate to the content page. For the sub module you want to import, highlight and copy the terminal scripts in the far-right column.\n\n\n\n\n\n\n\nIn the lower-left window if your posit.cloud project, select the Terminal tab, and paste the terminal scripts. Press &lt;return&gt;.\n\n\n\n\n\n\n\nThe sub module files should now appear in your Files tab in the lower-right window.\n\n\n\n\n\n\n\nKeep in mind that these files include answer keys, which you probably won’t want to make available to your students. You may want to download, then delete these files from the project prior to turning the project into an Assignment for your students.",
    "crumbs": [
      "Using this content"
    ]
  },
  {
    "objectID": "modules/module_1/module_1.3/homework-1.3.html",
    "href": "modules/module_1/module_1.3/homework-1.3.html",
    "title": "Homework Module 1.3",
    "section": "",
    "text": "Your Name\n\n\nDate\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\nRun this code chunk first, to make the survey data available as the variable classData:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nclassData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nCreate a subset of classData of students who responded less than 3 on the fishing question, called poorFishing. How many reported less than 3?\n\n\nDescribe logical operators, and how they can be used in the filter function:\n\n\nHow many Lewis & Clark students voted to have the bear as the team flag? Show code below how you would derive your answer:\n\n\nWhat is the “pipe” in R? What is it used for?\n\n\nDetermine the mean and standard deviation of self-reported bedside manner, comparing Lewis & Clark to University of Arizona students:\n\n\nCreate a data set showing the percentage of votes for team flag animal, just for Lewis & Clark students:"
  },
  {
    "objectID": "modules/module_1/module_1.3/code-a-long-1.3.html",
    "href": "modules/module_1/module_1.3/code-a-long-1.3.html",
    "title": "Analyzing class data set",
    "section": "",
    "text": "Learning Objectives\n\nContinue gaining practice loading and using data sets in R\nCreate subsets of data based upon certain conditions (a.k.a. filtering)\nLearn how to generate summary statistics using the group_by/summarize functions\n\n\n\nLoading Data\nLet’s start by reviewing some concepts from the last lesson:\n\n# we need to make the tidyverse available with the library function:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# load the dataset to a variable\nteamAntarcticaData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# view it\nteamAntarcticaData\n\n# A tibble: 75 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 65 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\n\n\nSub-setting Data\nIn the last lesson, we looked at descriptive statistics for columns of data for the entire data set. But what if we were interested in pursuing answers to specific questions. Here’s one:\n\nHow does the cold tolerance differ for students at Lewis & Clark vs students at the University of Arizona?\n\nOne strategy we could take is to find the average cold tolerance responses for the LC students, and compare it to the average of the UA students. So we’ll need to create two subsets of the original data set, using the filter function. The filter function works like this:\nmySubset&lt;-filter(.data=myDataFrame, columnName==\"some value\")\n\n1st argument (.data) - identify the original, unfiltered data set\n2nd argument - include one or more conditions\n\nNow let’s use the filter function to create a subset of data that only includes University of Arizona students:\n\nuaStudents&lt;-filter(.data=teamAntarcticaData, school==\"University of Arizona\")\n\nuaStudents\n\n# A tibble: 28 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 18 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nBelow, create a subset of Lewis & Clark students, assign it to the variable lcStudents, and print it to the screen:\n\n#create lcStudents below\n\nSo now we have two smaller data sets - one with U of A students (uaStudents), and one with LC students (lcStudents). How might we calculate the average cold tolerance of each? Using strategies from last week, try doing so below:\n\n\nRelational operators\nIn the filter example above, we used “==” as part of our condition argument. The double equals is an example of a relational operator - it’s a character (or multiple characters) that represents a logical action or process. Practically speaking, the double equals means “is this field equal to this value?”. If the answer is “TRUE”, then the row is included as part of the filtered data set.\nHere are some other relational operators:\n\n&gt; (greater than)\n&lt; (less than)\n&lt;= (less than or equal to)\n&gt;= (greater than or equal to)\n!= (not equal to)\n\nIn the filter function, relational operators are used to define a condition.\nLet’s say we’re interested in creating a subset of data that includes students with a self-reported aptitude in fishing of 4 or 5 (the students we should recruit to catch our fish). Create a subset of data called goodFishing that contains this list, and print to the screen:\n\n# create goodFishing below\n\nLet’s say we also want to create a subset of data that includes students who are not particularly strong swimmers. Create a subset of data below called nonSwimmers that include students who did not answer “Yes” on the swimming question:\n\n# create nonSwimmers below\n\n\n\nLogical Operators\nThere may be cases in which we want to filter our dataset based on more than one condition. In these cases, we would use logical operators. Maybe we want to find the best University of Arizona chefs, or the students who want blue or orange parkas. Here are the main logical operators:\n\n& (and)\n| (or)\n\nIn the filter function, logical operators are used to join conditions together.\nHere’s an example of how to use a logical operator with the filter function:\n\nuaChefs&lt;-filter(.data=teamAntarcticaData, school==\"University of Arizona\" & cooking&gt;=4)\n\nuaChefs\n\n# A tibble: 16 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 5 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 6 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 7 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n 8 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n 9 8/30/2022 16:1… Unive…       3 Yes       3 Yes          3 Orange     Penguin \n10 8/30/2022 16:1… Unive…       4 Yes       3 Yes          4 Orange     Sea Spi…\n11 8/30/2022 16:1… Unive…       4 Yes       3 Yes          5 Orange     Seal    \n12 8/30/2022 16:1… Unive…       1 Yes       4 Yes          3 Black      Penguin \n13 8/30/2022 16:1… Unive…       3 Yes       5 Yes          5 green      Sea Spi…\n14 8/30/2022 16:1… Unive…       2 Yes       2 Yes          4 Black      Bear    \n15 8/30/2022 16:1… Unive…       1 Yes       3 Yes          3 Black      Penguin \n16 8/30/2022 16:3… Unive…       2 No        1 Yes          4 White      &lt;NA&gt;    \n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nBelow, use the filter function to create a data subset of students who want blue or orange parkas. Assign it to the variable blueOrangeParkas, and print to the screen.\n\n\nThe “Pipe”\nThe Tidyverse introduced a new convention to R called the “pipe”:\n%&gt;%\nThe purpose of the pipe is to string functions and data together. You can think of it as sort of the glue that joins pieces of an assembly line together. Another way to think of it is to read it as “AND THEN”.\nBelow we can rewrite a command using the filter function with the pipe. After the assignment symbol (&lt;-) we start with the data set, followed by the pipe, followed by the filter function. It’s common practice to put the pipe at the end of one command, then indent the command it’s pointing to on the next line. What’s different about the arguments in the filter function in this case?\n\nuaStudents2&lt;-teamAntarcticaData %&gt;% \n  filter(school==\"University of Arizona\")\n\nuaStudents2\n\n# A tibble: 28 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 18 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nTry using the pipe in the code chunk below to create a data subset of students who answered “Maybe” in the animals question (call the variable maybeAnimals). Print it to the screen as well.\n\n# create and print maybeAnimals:\n\n\n\nGenerating summary statistics with group_by / summarize\nOne reason for introducing the %&gt;% now is because of how instrumental it is for chaining together two functions for generating summary statistics by group:\n\ngroup_by: a function that takes a data set and groups it by a variable/column\nsummarize: uses the grouped data set from group_by, and lets you define summary statistics columns for that group\n\nLet’s say we want to calculate the mean and standard deviation of self-reported tolerance for cold, comparing Lewis & Clark to University of Arizona students. We sort of did this earlier, but let’s try it again using group_by / summarize:\n\ncoldSummary&lt;-teamAntarcticaData %&gt;% \n  group_by(school) %&gt;% \n  summarize(avgCold=mean(cold), sdCold=sd(cold))\n\ncoldSummary\n\n# A tibble: 2 × 3\n  school                avgCold sdCold\n  &lt;chr&gt;                   &lt;dbl&gt;  &lt;dbl&gt;\n1 Lewis & Clark College    3.43  0.950\n2 University of Arizona    3.29  1.08 \n\n\nLet’s break down what’s going on here:\n\nFirst declare our variable (coldSummary)\nInitially assign it to the teamAntarcticaData data set\n“Pipe” that data to group_by, where we choose to group the data by the school column\nThen “pipe” that to summarize, where we define two new columns:\n\navgCold, set equal to mean(cold)\nsdCold, set equal to sd(cold)\n\n\nWhen printing out coldSummary, we see it’s a new data set with just summary statistics for cold tolerance, grouped by the school.\nTry using the group_by / summarize technique by finding the mean and standard deviation of self-reported cooking skill, comparing Lewis & Clark to University of Arizona students. Print to the screen.\nWe can also use this technique to calculate percentage. Let’s say we want to know the different percentage of responses to the swimming question. We can calculate this by first defining the total number of rows (using nrow, below), and use it with n() in summarize\n\n# first calculate total rows, to be used as denominator for percentage\ntotalRows&lt;-nrow(teamAntarcticaData)\n\n\n# n() generates the count of responses per/group\nswimmingPercentage&lt;-teamAntarcticaData %&gt;% \n  group_by(swim) %&gt;% \n  summarise(percent=n()/totalRows)\n\nswimmingPercentage\n\n# A tibble: 3 × 2\n  swim             percent\n  &lt;chr&gt;              &lt;dbl&gt;\n1 I can dog paddle  0.08  \n2 No                0.0133\n3 Yes               0.907 \n\n\nBelow, calculate the percentage of responses for each of the different parka colors:"
  },
  {
    "objectID": "modules/module_1/module_1.3/code-a-long-1.3-key.html",
    "href": "modules/module_1/module_1.3/code-a-long-1.3-key.html",
    "title": "Analyzing class data set",
    "section": "",
    "text": "Learning Objectives\n\nContinue gaining practice loading and using data sets in R\nCreate subsets of data based upon certain conditions (a.k.a. filtering)\nLearn how to generate summary statistics using the group_by/summarize functions\n\n\n\nLoading Data\nLet’s start by reviewing some concepts from the last lesson:\n\n# we need to make the tidyverse available with the library function:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# load the dataset to a variable\nteamAntarcticaData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# view it\nteamAntarcticaData\n\n# A tibble: 75 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 65 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\n\n\nSub-setting Data\nIn the last lesson, we looked at descriptive statistics for columns of data for the entire data set. But what if we were interested in pursuing answers to specific questions. Here’s one:\n\nHow does the cold tolerance differ for students at Lewis & Clark vs students at the University of Arizona?\n\nOne strategy we could take is to find the average cold tolerance responses for the LC students, and compare it to the average of the UA students. So we’ll need to create two subsets of the original data set, using the filter function. The filter function works like this:\nmySubset&lt;-filter(.data=myDataFrame, columnName==\"some value\")\n\n1st argument (.data) - identify the original, unfiltered data set\n2nd argument - include one or more conditions\n\nNow let’s use the filter function to create a subset of data that only includes University of Arizona students:\n\nuaStudents&lt;-filter(.data=teamAntarcticaData, school==\"University of Arizona\")\n\nuaStudents\n\n# A tibble: 28 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 18 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nBelow, create a subset of Lewis & Clark students, assign it to the variable lcStudents, and print it to the screen:\n\n#create lcStudents below\n\nlcStudents&lt;-filter(.data=teamAntarcticaData, school==\"Lewis & Clark College\")\n\nlcStudents\n\n# A tibble: 47 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/31/2022 15:2… Lewis…       2 Yes       4 Yes          1 White      Sea Spi…\n 2 8/31/2022 15:3… Lewis…       1 Yes       3 Maybe        4 Blue       Penguin \n 3 8/31/2022 15:4… Lewis…       5 Yes       5 Yes          5 Green      Bear    \n 4 8/31/2022 16:0… Lewis…       2 Yes       4 Yes          4 Blue       Seal    \n 5 8/31/2022 16:3… Lewis…       3 Yes       4 Yes          5 Black      Penguin \n 6 8/31/2022 17:0… Lewis…       1 Yes       3 Yes          2 Blue       Penguin \n 7 8/31/2022 17:0… Lewis…       4 Yes       5 Yes          5 White      Sea Spi…\n 8 8/31/2022 17:0… Lewis…       5 Yes       5 Yes          5 Blue       Bear    \n 9 8/31/2022 17:0… Lewis…       2 Yes       4 Yes          4 Green      Penguin \n10 8/31/2022 17:0… Lewis…       2 Yes       2 Yes          3 Blue       Seal    \n# ℹ 37 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nSo now we have two smaller data sets - one with U of A students (uaStudents), and one with LC students (lcStudents). How might we calculate the average cold tolerance of each? Using strategies from last week, try doing so below:\n\nuaCold&lt;-mean(uaStudents$cold, na.rm=TRUE)\n\nlcCold&lt;-mean(lcStudents$cold, na.rm=TRUE)\n\n\nuaCold\n\n[1] 3.285714\n\nlcCold\n\n[1] 3.425532\n\n\n\n\nRelational operators\nIn the filter example above, we used “==” as part of our condition argument. The double equals is an example of a relational operator - it’s a character (or multiple characters) that represents a logical action or process. Practically speaking, the double equals means “is this field equal to this value?”. If the answer is “TRUE”, then the row is included as part of the filtered data set.\nHere are some other relational operators:\n\n&gt; (greater than)\n&lt; (less than)\n&lt;= (less than or equal to)\n&gt;= (greater than or equal to)\n!= (not equal to)\n\nIn the filter function, relational operators are used to define a condition.\nLet’s say we’re interested in creating a subset of data that includes students with a self-reported aptitude in fishing of 4 or 5 (the students we should recruit to catch our fish). Create a subset of data called goodFishing that contains this list, and print to the screen:\n\n# create goodFishing below\n\ngoodFishing&lt;-filter(.data=teamAntarcticaData, fishing&gt;3) #or fishing &gt;=4\n\ngoodFishing\n\n# A tibble: 11 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n 2 8/30/2022 16:1… Unive…       5 Yes       4 Maybe        3 White      Bear    \n 3 8/30/2022 16:1… Unive…       4 Yes       3 Yes          4 Orange     Sea Spi…\n 4 8/30/2022 16:1… Unive…       4 Yes       3 Yes          5 Orange     Seal    \n 5 8/30/2022 16:1… Unive…       4 Yes       4 Yes          5 White      Penguin \n 6 8/31/2022 15:4… Lewis…       5 Yes       5 Yes          5 Green      Bear    \n 7 8/31/2022 17:0… Lewis…       4 Yes       5 Yes          5 White      Sea Spi…\n 8 8/31/2022 17:0… Lewis…       5 Yes       5 Yes          5 Blue       Bear    \n 9 8/31/2022 20:4… Lewis…       5 Yes       3 Yes          4 Black      Bear    \n10 9/1/2022 13:50… Lewis…       5 Yes       2 Yes          1 Orange     Penguin \n11 9/1/2022 19:41… Lewis…       5 Yes       4 Yes          5 Orange     Sea Spi…\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nLet’s say we also want to create a subset of data that includes students who are not particularly strong swimmers. Create a subset of data below called nonSwimmers that include students who did not answer “Yes” on the swimming question:\n\n# create nonSwimmers below\n\nnonSwimmers&lt;-filter(.data=teamAntarcticaData, swim !=\"Yes\")\n\nnonSwimmers\n\n# A tibble: 7 × 12\n  Timestamp        school fishing swim   cold animals remote parkaColor teamFlag\n  &lt;chr&gt;            &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n1 8/30/2022 16:10… Unive…       1 I ca…     3 Maybe        2 Black      Penguin \n2 8/30/2022 16:10… Unive…       2 I ca…     5 Yes          4 Blue       Penguin \n3 8/30/2022 16:39… Unive…       2 No        1 Yes          4 White      &lt;NA&gt;    \n4 8/31/2022 17:20… Lewis…       1 I ca…     4 Yes          2 Blue       Penguin \n5 8/31/2022 19:23… Lewis…       1 I ca…     4 No           2 Black      Penguin \n6 9/1/2022 12:46:… Lewis…       3 I ca…     3 Yes          3 Orange     Sea Spi…\n7 9/1/2022 14:08:… Lewis…       2 I ca…     2 Yes          4 &lt;NA&gt;       Seal    \n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\n\n\nLogical Operators\nThere may be cases in which we want to filter our dataset based on more than one condition. In these cases, we would use logical operators. Maybe we want to find the best University of Arizona chefs, or the students who want blue or orange parkas. Here are the main logical operators:\n\n& (and)\n| (or)\n\nIn the filter function, logical operators are used to join conditions together.\nHere’s an example of how to use a logical operator with the filter function:\n\nuaChefs&lt;-filter(.data=teamAntarcticaData, school==\"University of Arizona\" & cooking&gt;=4)\n\nuaChefs\n\n# A tibble: 16 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 5 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 6 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 7 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n 8 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n 9 8/30/2022 16:1… Unive…       3 Yes       3 Yes          3 Orange     Penguin \n10 8/30/2022 16:1… Unive…       4 Yes       3 Yes          4 Orange     Sea Spi…\n11 8/30/2022 16:1… Unive…       4 Yes       3 Yes          5 Orange     Seal    \n12 8/30/2022 16:1… Unive…       1 Yes       4 Yes          3 Black      Penguin \n13 8/30/2022 16:1… Unive…       3 Yes       5 Yes          5 green      Sea Spi…\n14 8/30/2022 16:1… Unive…       2 Yes       2 Yes          4 Black      Bear    \n15 8/30/2022 16:1… Unive…       1 Yes       3 Yes          3 Black      Penguin \n16 8/30/2022 16:3… Unive…       2 No        1 Yes          4 White      &lt;NA&gt;    \n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nBelow, use the filter function to create a data subset of students who want blue or orange parkas. Assign it to the variable blueOrangeParkas, and print to the screen.\n\nblueOrangeParkas&lt;-filter(.data=teamAntarcticaData, parkaColor==\"Blue\" | parkaColor==\"Orange\")\n\nblueOrangeParkas\n\n# A tibble: 32 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 2 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 3 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 4 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 5 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n 6 8/30/2022 16:1… Unive…       3 Yes       3 Yes          3 Orange     Penguin \n 7 8/30/2022 16:1… Unive…       4 Yes       3 Yes          4 Orange     Sea Spi…\n 8 8/30/2022 16:1… Unive…       4 Yes       3 Yes          5 Orange     Seal    \n 9 8/30/2022 16:1… Unive…       2 I ca…     5 Yes          4 Blue       Penguin \n10 8/30/2022 16:1… Unive…       2 Yes       3 Yes          3 Blue       Penguin \n# ℹ 22 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\n\n\nThe “Pipe”\nThe Tidyverse introduced a new convention to R called the “pipe”:\n%&gt;%\nThe purpose of the pipe is to string functions and data together. You can think of it as sort of the glue that joins pieces of an assembly line together. Another way to think of it is to read it as “AND THEN”.\nBelow we can rewrite a command using the filter function with the pipe. After the assignment symbol (&lt;-) we start with the data set, followed by the pipe, followed by the filter function. It’s common practice to put the pipe at the end of one command, then indent the command it’s pointing to on the next line. What’s different about the arguments in the filter function in this case?\n\nuaStudents2&lt;-teamAntarcticaData %&gt;% \n  filter(school==\"University of Arizona\")\n\nuaStudents2\n\n# A tibble: 28 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 18 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nTry using the pipe in the code chunk below to create a data subset of students who answered “Maybe” in the animals question (call the variable maybeAnimals). Print it to the screen as well.\n\n# create and print maybeAnimals:\n\nmaybeAnimals &lt;- teamAntarcticaData %&gt;%\n  filter(animals==\"Maybe\")\n\nmaybeAnimals\n\n# A tibble: 8 × 12\n  Timestamp        school fishing swim   cold animals remote parkaColor teamFlag\n  &lt;chr&gt;            &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n1 8/30/2022 16:09… Unive…       1 Yes       4 Maybe        3 purple     Seal    \n2 8/30/2022 16:10… Unive…       1 I ca…     3 Maybe        2 Black      Penguin \n3 8/30/2022 16:10… Unive…       5 Yes       4 Maybe        3 White      Bear    \n4 8/31/2022 13:04… Unive…       2 Yes       4 Maybe        5 Black      Penguin \n5 8/31/2022 15:33… Lewis…       1 Yes       3 Maybe        4 Blue       Penguin \n6 8/31/2022 18:57… Lewis…       1 Yes       3 Maybe        3 Orange     Bear    \n7 8/31/2022 22:17… Lewis…       1 Yes       2 Maybe        4 Blue       Penguin \n8 8/31/2022 22:23… Lewis…       2 Yes       4 Maybe        2 Blue       Sea Spi…\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\n\n\nGenerating summary statistics with group_by / summarize\nOne reason for introducing the %&gt;% now is because of how instrumental it is for chaining together two functions for generating summary statistics by group:\n\ngroup_by: a function that takes a data set and groups it by a variable/column\nsummarize: uses the grouped data set from group_by, and lets you define summary statistics columns for that group\n\nLet’s say we want to calculate the mean and standard deviation of self-reported tolerance for cold, comparing Lewis & Clark to University of Arizona students. We sort of did this earlier, but let’s try it again using group_by / summarize:\n\ncoldSummary&lt;-teamAntarcticaData %&gt;% \n  group_by(school) %&gt;% \n  summarize(avgCold=mean(cold, na.rm=TRUE), sdCold=sd(cold, na.rm=TRUE))\n\ncoldSummary\n\n# A tibble: 2 × 3\n  school                avgCold sdCold\n  &lt;chr&gt;                   &lt;dbl&gt;  &lt;dbl&gt;\n1 Lewis & Clark College    3.43  0.950\n2 University of Arizona    3.29  1.08 \n\n\nLet’s break down what’s going on here:\n\nFirst declare our variable (coldSummary)\nInitially assign it to the teamAntarcticaData data set\n“Pipe” that data to group_by, where we choose to group the data by the school column\nThen “pipe” that to summarize, where we define two new columns:\n\navgCold, set equal to mean(cold)\nsdCold, set equal to sd(cold)\n\n\nWhen printing out coldSummary, we see it’s a new data set with just summary statistics for cold tolerance, grouped by the school.\nTry using the group_by / summarize technique by finding the mean and standard deviation of self-reported cooking skill, comparing Lewis & Clark to University of Arizona students. Print to the screen.\n\ncookingSkill&lt;- teamAntarcticaData %&gt;%\n  group_by(school) %&gt;%\n  summarize(avgCooking=mean(cooking, na.rm=TRUE), sdCooking=sd(cooking, na.rm=TRUE))\n\ncookingSkill\n\n# A tibble: 2 × 3\n  school                avgCooking sdCooking\n  &lt;chr&gt;                      &lt;dbl&gt;     &lt;dbl&gt;\n1 Lewis & Clark College       3.13      1.12\n2 University of Arizona       3.56      1.09\n\n\nWe can also use this technique to calculate percentage. Let’s say we want to know the different percentage of responses to the swimming question. We can calculate this by first defining the total number of rows (using nrow, below), and use it with n() in summarize\n\n# first calculate total rows, to be used as denominator for percentage\ntotalRows&lt;-nrow(teamAntarcticaData)\n\n\n# n() generates the count of responses per/group\nswimmingPercentage&lt;-teamAntarcticaData %&gt;% \n  group_by(swim) %&gt;% \n  summarise(percent=n()/totalRows)\n\nswimmingPercentage\n\n# A tibble: 3 × 2\n  swim             percent\n  &lt;chr&gt;              &lt;dbl&gt;\n1 I can dog paddle  0.08  \n2 No                0.0133\n3 Yes               0.907 \n\n\nBelow, calculate the percentage of responses for each of the different parka colors:\n\nparkaPercentage&lt;-teamAntarcticaData %&gt;%\n  group_by(parkaColor) %&gt;%\n  summarize(precent=n()/nrow(teamAntarcticaData))\n\nparkaPercentage\n\n# A tibble: 15 × 2\n   parkaColor        precent\n   &lt;chr&gt;               &lt;dbl&gt;\n 1 Baby Pink          0.0133\n 2 Black              0.24  \n 3 Blue               0.293 \n 4 Gold               0.0133\n 5 Green              0.0533\n 6 Lavender/purple    0.0133\n 7 Orange             0.133 \n 8 Pink               0.0133\n 9 Pink, if possible  0.0133\n10 Purple             0.0133\n11 White              0.147 \n12 green              0.0133\n13 hot pink           0.0133\n14 purple             0.0133\n15 &lt;NA&gt;               0.0133"
  },
  {
    "objectID": "modules/module_1/module_1.4/homework-1.4-key.html",
    "href": "modules/module_1/module_1.4/homework-1.4-key.html",
    "title": "Homework Module 1.4 Key",
    "section": "",
    "text": "Your Name\n\n\nDate\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\nRun this code chunk first, to load the tidyverse, and make the weather station data available as the variable stationData:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nstationData&lt;-read_csv(\"station-data.csv\")\n\nRows: 139160 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): station_id\ndbl (11): year, day, month, running_day, hour, temp, pressure, wind_speed, w...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWhat is the difference between the data in the day and running_day columns? Illustrate the difference with a function we learned in class. If we’re grouping by month, which would be more useful?\n\n# day refers to day in a year (e.g. 1-365), and running_day is day of the month\n\nunique(stationData$day)\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180\n[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\n[199] 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216\n[217] 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234\n[235] 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252\n[253] 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270\n[271] 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288\n[289] 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306\n[307] 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324\n[325] 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342\n[343] 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360\n[361] 361 362 363 364 365\n\nunique(stationData$running_day)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26 27 28 29 30 31\n\n\nHow is the time of day represented in the data. At what times of the day are measurements taken? Show the code used to arrive at the answer.\n\n# time is represented in military time.\n# measurements are taken every three hours, starting at midnight\n\nunique(stationData$hour)\n\n[1]    0  300  600  900 1200 1500 1800 2100\n\n\nReport the mean and standard deviation of the atmospheric pressure for every hour, of every day, of every month.\n\nstationData %&gt;%\n  group_by(month, running_day, hour) %&gt;%\n  summarize(meanPressure=mean(pressure, na.rm=TRUE), sdPressure=sd(pressure, na.rm=TRUE))\n\n`summarise()` has grouped output by 'month', 'running_day'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 2,920 × 5\n# Groups:   month, running_day [365]\n   month running_day  hour meanPressure sdPressure\n   &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;      &lt;dbl&gt;\n 1     1           1     0         886.       123.\n 2     1           1   300         884.       123.\n 3     1           1   600         886.       123.\n 4     1           1   900         884.       123.\n 5     1           1  1200         884.       123.\n 6     1           1  1500         884.       123.\n 7     1           1  1800         885.       123.\n 8     1           1  2100         888.       123.\n 9     1           2     0         886.       123.\n10     1           2   300         886.       124.\n# ℹ 2,910 more rows\n\n\nReport the mean and standard deviation of the temperature and wind speed at noon of every day of every month.\n\nstationData %&gt;%\n  filter(hour==\"1200\") %&gt;%\n  group_by(month, running_day) %&gt;%\n  summarize(avgTemp=mean(temp, na.rm=TRUE),\n            sdTemp=sd(temp, na.rm=TRUE),\n            avgWindSpeed=mean(wind_speed, na.rm=TRUE),\n            sdWindSpeed=sd(wind_speed, na.rm=TRUE)\n            )\n\n`summarise()` has grouped output by 'month'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 365 × 6\n# Groups:   month [12]\n   month running_day avgTemp sdTemp avgWindSpeed sdWindSpeed\n   &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1     1           1  -10.2    6.90         4.45        3.19\n 2     1           2  -10.3    7.24         4.36        3.10\n 3     1           3  -10.1    7.49         4.9         4.15\n 4     1           4   -9.89   7.07         4.9         3.25\n 5     1           5   -9.73   6.62         4.14        3.02\n 6     1           6   -9.62   6.67         4.83        2.62\n 7     1           7   -9.29   6.39         4.92        3.66\n 8     1           8   -8.27   6.65         4.58        3.57\n 9     1           9   -8.92   6.61         3.90        3.62\n10     1          10  -10.8    6.81         4.08        2.72\n# ℹ 355 more rows\n\n\nFind the coldest and warmest days of the year (in month, day format).\n\n#coldest\nstationData %&gt;%\n  select(month, running_day, temp) %&gt;%\n  arrange(temp) %&gt;%\n  head(1)\n\n# A tibble: 1 × 3\n  month running_day  temp\n  &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1     8          29 -80.2\n\n# August 29th\n\n#warmest\nstationData %&gt;%\n  select(month, running_day, temp) %&gt;%\n  arrange(desc(temp)) %&gt;%\n  head(1)\n\n# A tibble: 1 × 3\n  month running_day  temp\n  &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1    12           9   9.6\n\n# December 9th\n\nAdd a column to the data frame that contains the temperature in Kelvins.\n\n# add 273 to celcius\n\nstationData &lt;- stationData %&gt;%\n  mutate(tempKelvin=temp+273)"
  },
  {
    "objectID": "modules/module_1/module_1.4/homework-1.4.html",
    "href": "modules/module_1/module_1.4/homework-1.4.html",
    "title": "Homework Module 1.4",
    "section": "",
    "text": "Your Name\n\n\nDate\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\nRun this code chunk first, to load the tidyverse, and make the weather station data available as the variable stationData:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nstationData&lt;-read_csv(\"station-data.csv\")\n\nRows: 139160 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): station_id\ndbl (11): year, day, month, running_day, hour, temp, pressure, wind_speed, w...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWhat is the difference between the data in the day and running_day columns? Illustrate the difference with a function we learned in class. If we’re grouping by month, which would be more useful?\nHow is the time of day represented in the data. At what times of the day are measurements taken? Show the code used to arrive at the answer.\nReport the mean and standard deviation of the atmospheric pressure for every hour, of every day, of every month.\nReport the mean and standard deviation of the temperature and wind speed at noon of every day of every month.\nFind the coldest and warmest days of the year (in month, day format).\nAdd a column to the data frame that contains the temperature in Kelvins."
  },
  {
    "objectID": "modules/module_1/module_1.2/practice-problems-1.2-key.html",
    "href": "modules/module_1/module_1.2/practice-problems-1.2-key.html",
    "title": "Practice Problems 1.2 Key",
    "section": "",
    "text": "Here are some practice problems to explore the penguins data set. First we need to load the penguin data set.\n\nlibrary(\"palmerpenguins\")\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nWhat are the mean and standard deviation of bill length of the penguins?\n\n\n# create a variable that contains only the column for bill length\n\nbillLength&lt;-penguins$bill_length_mm\n\n\n# mean \n\nmean(billLength, na.rm=TRUE)\n\n[1] 43.92193\n\n# standard deviation\n\nsd(billLength, na.rm=TRUE)\n\n[1] 5.459584\n\n\n\nWhat are the mean and standard deviation of the body mass of the penguins?\n\n\n# create a variable that contains only the column for body mass\n\nbodyMass&lt;-penguins$body_mass_g\n\n# mean\n\nmean(bodyMass, na.rm=TRUE)\n\n[1] 4201.754\n\n# standard deviation\n\nsd(bodyMass, na.rm = TRUE)\n\n[1] 801.9545\n\n\n\nWhat is the mean and median flipper length of the penguins?\n\n\n# create a variable that contains only the column for flipper length\n\nflipperLength&lt;-penguins$flipper_length_mm\n\n# mean\n\nmean(flipperLength, na.rm=TRUE)\n\n[1] 200.9152\n\n# median\n\nmedian(flipperLength, na.rm=TRUE)\n\n[1] 197\n\n\n\nHow long are the largest flippers in this data set? How long is the shortest? (Hint: google how to find the minimum and maximum values in a vector). You can use the same variable that you created in 3!\n\n\n# longest flipper length\n\nmax(flipperLength, na.rm=TRUE)\n\n[1] 231\n\n# shortest flipper length\n\nmin(flipperLength, na.rm=TRUE)\n\n[1] 172\n\n\n\nWhat is the range of bill depths of penguins? (Range is the maximum value - minimum value)\n\n\nbillDepth&lt;-penguins$bill_depth_mm\n\n# deepest bill depth\n\ndeepest&lt;-max(billDepth, na.rm=TRUE)\n\n\n# shallowest bill depth\n\nshallowest&lt;-min(billDepth, na.rm=TRUE)\n\n# range of bill depth\n\nrange&lt;-deepest - shallowest\n\nrange\n\n[1] 8.4\n\n\n\nHow many species of penguins are in this data set (hint: there is a function to find distinct values in a vector)? List them using comments.\n\n\n# get unique values\nspecies&lt;-unique(penguins$species)\n\n# count them\nlength(species)\n\n[1] 3\n\n\n\nFind the value for the longest bill in the data set. Assign it to the variable longestBill.\n\n\nlongestBill&lt;-max(penguins$bill_length_mm, na.rm=TRUE)\n\nlongestBill\n\n[1] 59.6\n\n\n\nCalculate the variance of body mass. (Hint: google variance in R)\n\n\nvar(penguins$body_mass_g, na.rm=TRUE)\n\n[1] 643131.1\n\n\n\nCalculate the variance of flipper length.\n\n\nvar(penguins$flipper_length_mm, na.rm=TRUE)\n\n[1] 197.7318\n\n\n\nCalculate and compare the standard deviation of bill length and bill depth. Which has a larger standard deviation?\n\n\n# standard deviation of bill length\n\nsd(penguins$bill_length_mm, na.rm=TRUE)\n\n[1] 5.459584\n\n# standard deviation of bill depth\n\nsd(penguins$bill_depth_mm, na.rm=TRUE)\n\n[1] 1.974793\n\n# Which has a larger standard deviation? \n\n#Answer: the standard deviation for bill length is larger.\n\n\nChallenge: calculate the mean and standard deviation of bill length for gentoo penguins\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\ngentoo&lt;-filter(.data=penguins, species==\"Gentoo\")\n\nmean(gentoo$bill_length_mm, na.rm=TRUE)\n\n[1] 47.50488\n\nsd(gentoo$bill_length_mm, na.rm=TRUE)\n\n[1] 3.081857"
  },
  {
    "objectID": "modules/module_1/module_1.2/code-a-long-1.2.html",
    "href": "modules/module_1/module_1.2/code-a-long-1.2.html",
    "title": "Variables, functions, loading data",
    "section": "",
    "text": "Learning Objectives\n\nGain some familiarity and comfort with rstudio\nReview how to assign variables\nLearn about and use functions\nLearn about and use vectors\nWrite code to work with a data set, and calculate some descriptive statistics\n\n\n\nArithmetic\nThe grey rectangle below is a “code chunk”. Everything withing the grey area is interpreted as R code. To run the code, click the green triangle in the upper-right corner.\nIn this example, R can perform basic math:\n\n2+2\n\n[1] 4\n\n\nNow it’s your turn. Enter code below to subtract ten from twenty-two:\n\n\nAssigning Variables\nWe’ll be working a lot with variables throughout this semester. A variable is a name you give to some value. The value could be a single number, a word, a bunch of words, an entire data set, etc.\nMost scripting languages use the “=” sign to assign a value to a variable, but R uses “&lt;-”.\n\n# assigns 10 to x\nx&lt;-10\n\nIt’s important to note that creating a new variable using code above doesn’t give you any output. Often it’s a good idea to print your variable to the screen, just to confirm it worked the way you intended:\n\n# prints x\nx\n\n[1] 10\n\n#Anything preceded by a \"#\" is a \"comment\". It does not get executed as code.\n#Comments can be super helpful to provide info on your code.\n\nNow it’s your turn. Create a variable “y”, set it equal to 7+9, and then print it out:\n\n\nFunctions\nCoding languages, including R, have functions that help you quickly execute common tasks. Functions typically take the form of:\nfunctionName(argument1, argument2, etc….)\nArguments are the inputs you send to a function, so it has all the information it needs to perform its operation.\nFor example, the function sqrt(number) takes the square root of a number. This lets us quickly compute the answer, rather than having to write the formula for a square root.\n\nsqrt(9)\n\n[1] 3\n\n\nYOUR TURN: In the chunk below, create a variable z, set it equal to the square root of 90, and print it out:\n\nz&lt;-sqrt(90)\nz\n\n[1] 9.486833\n\n\nOne nice thing about rstudio is that you can readily access documentation for functions by using the “help” command:\n\nhelp(sqrt)\n\nThe documentation appears in the lower right window in the “help” tab.\nOne key question: how do you know what functions exist, and what they do?\nAnswer: you Google what you’re trying to do! In the case of R, you might search “How do I do ‘x’ in R?”\nLet’s say you are interested in calculating the absolute value (positive distance from zero) of -35 in R. Take a moment with your group/neighbors, and try to find the answer by searching the internet. In the code chunk below, use the function you found to compute this calculation:\n\n# compute the absolute value of -35\n\n\n\nVectors\nSo far we’ve created variables that have single values (e.g. x&lt;-7), but there are often cases where we need to assign multiple values to a variable. These types of variables are called vectors.\nIn order to create a vector, you can use the “c” function (c stands for “combine”). Here’s an example:\n\nmyFirstVector&lt;-c(3,7,1,10)\n\nmyFirstVector\n\n[1]  3  7  1 10\n\n\nNow it’s your turn. Create a vector called mySecondVector, assign the values 8, -11, 100, 35 to it, and print it to the screen:\n\n# use the \"c\" function to create mySecondVector:\n\nBefore moving on, let’s talk a little about variable naming conventions. We started out using x, y, and z when learning about variables. That technically works, but it’s better practice to be more descriptive in your variable names. The examples above and below use a syntax called “camel case”. This allows you to string words together without spaces, but preserves quick readability. From this point on, we’re going to create variables with camel case - you should too!\n\nIt may not be immediately clear what the utility of vectors is, so let’s take a look at a practical use case. Below is a vector containing the responses from you and your classmates (and U of Arizona students) on self-reported fishing skill (1 being low, 5 being high):\n\nfishingSkill&lt;-c(1,2,2,1,1,1,1,2,2,5,1,2,2,1,5,3,4,4,4,2,1,2,2,3,2,1,2,2,2,1,5,2,3,1,4,5,2,2,2,1,1,1,1,2,3,1,1,2,1,3,1,1,1,1,2,2,5,3,1,1,1,1,2,1,3,2,5,1,2,3,3,2,3,5,2)\n\nfishingSkill\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nLet’s say we’re interested in finding the average of all the responses. We can do this by use the mean function in R: (we’ll dive more into descriptive statistics next week, and how they differ from inferential)\n\navgFishingSkill&lt;-mean(fishingSkill)\n\navgFishingSkill\n\n[1] 2.146667\n\n\nWe can also calculate the median (the “middle” value, when data is in numerical order) with the median function:\n\nmedianFishingSkill&lt;-median(fishingSkill)\n\nmedianFishingSkill\n\n[1] 2\n\n\nWe can also calculate the standard deviation (a measurement of how spread apart the data is):\n\nsdFishingSkill&lt;-sd(fishingSkill)\n\nsdFishingSkill\n\n[1] 1.248711\n\n\nNow it’s your turn. Given the vector below of self-reported cooking skill ranking, calculate its mean, median, and standard deviation:\n\ncookingSkill&lt;-c(4,5,4,1,2,5,4,4,4,4,3,2,2,2,4,4,4,3,3,5,3,3,4,4,5,5,3,4,3,3,4,4,3,4,1,4,3,4,1,4,2,3,2,4,2,2,2,4,4,1,5,3,3,4,2,4,2,3,3,2,1,3,4,2,5,5,3,5,4,2,4,4,3,3,4,4)\n\n# calculate the mean\n\n\n\n#calculate median\n\n\n\n# calculate the standard deviation\n\n\n\nWorking with a data set\nOne of the most common uses of R is to load a data set into R as a variable, and then use that data to ask and answer questions with code. Let’s start off by loading a package called the Tidyverse. The Tidyverse is a series of functions written by data scientists to make working with data a little easier. We can load it by running the following command:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNotice in the Files tab in the lower-right window, there is a file titled teamAntarcticaData.csv. This is a copy of the spreadsheet data from the Google form. Below, we can assign the entire data set to a variable using the read_csv function:\n\n#load the data\nteamAntarcticaData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#print to screen\nteamAntarcticaData\n\n# A tibble: 75 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 65 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nEarlier in this exercise we looked at the array of responses for both fishing and cooking aptitude, though in both cases the vectors were hand-typed (by me). A much more common way to acquire, and then use, a vector of data is to directly query the data set. You can get a vector (a.k.a. column) of data by using the following syntax:\ndataSet$columnName\nLet’s get all responses for fishing aptitude directly from the data set:\n\nfishing&lt;-teamAntarcticaData$fishing\n\nfishing\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nAnd just like before, we can calculate the mean, median, and standard deviation:\n\nmean(fishing)\n\n[1] 2.146667\n\nmedian(fishing)\n\n[1] 2\n\nsd(fishing)\n\n[1] 1.248711\n\n\nNow it’s your turn:\nUse the data set to get the column values for tolerance of cold (hint: after typing the $, use auto-complete to select the column name). Calculate its mean, median, and standard deviation.\n\n# create a vector that contains the column values for cold tolerance\n\n\n\n#calculate the mean\n\n\n\n#calculate the median\n\n\n\n# calculate the standard deviation\n\nNow do the same for comfort level with being in a remote location:\n\n# create a vector that contains the column values for comfort level with remote location\n\n\n\n\n#calculate the mean\n\n\n\n#calculate the median\n\n\n\n# calculate the standard deviation\n\nNow create a vector to get the responses for parka color. How is this data different from the other examples we’ve seen? What can we learn from the data?"
  },
  {
    "objectID": "modules/module_1/module_1.2/code-a-long-1.2-key.html",
    "href": "modules/module_1/module_1.2/code-a-long-1.2-key.html",
    "title": "Variables, functions, loading data",
    "section": "",
    "text": "Learning Objectives\n\nGain some familiarity and comfort with rstudio\nReview how to assign variables\nLearn about and use functions\nLearn about and use vectors\nWrite code to work with a data set, and calculate some descriptive statistics\n\n\n\nArithmetic\nThe grey rectangle below is a “code chunk”. Everything withing the grey area is interpreted as R code. To run the code, click the green triangle in the upper-right corner.\nIn this example, R can perform basic math:\n\n2+2\n\n[1] 4\n\n\nNow it’s your turn. Enter code below to subtract ten from twenty-two:\n\n22-10\n\n[1] 12\n\n\n\n\nAssigning Variables\nWe’ll be working a lot with variables throughout this semester. A variable is a name you give to some value. The value could be a single number, a word, a bunch of words, an entire data set, etc.\nMost scripting languages use the “=” sign to assign a value to a variable, but R uses “&lt;-”.\n\n# assigns 10 to x\nx&lt;-10\n\nIt’s important to note that creating a new variable using code above doesn’t give you any output. Often it’s a good idea to print your variable to the screen, just to confirm it worked the way you intended:\n\n# prints x\nx\n\n[1] 10\n\n#Anything preceded by a \"#\" is a \"comment\". It does not get executed as code.\n#Comments can be super helpful to provide info on your code.\n\nNow it’s your turn. Create a variable “y”, set it equal to 7+9, and then print it out:\n\ny&lt;-7+9\ny\n\n[1] 16\n\n\n\n\nFunctions\nCoding languages, including R, have functions that help you quickly execute common tasks. Functions typically take the form of:\nfunctionName(argument1, argument2, etc….)\nArguments are the inputs you send to a function, so it has all the information it needs to perform its operation.\nFor example, the function sqrt(number) takes the square root of a number. This lets us quickly compute the answer, rather than having to write the formula for a square root.\n\nsqrt(9)\n\n[1] 3\n\n\nYOUR TURN: In the chunk below, create a variable z, set it equal to the square root of 90, and print it out:\n\nz&lt;-sqrt(90)\nz\n\n[1] 9.486833\n\n\nOne nice thing about rstudio is that you can readily access documentation for functions by using the “help” command:\n\nhelp(sqrt)\n\nThe documentation appears in the lower right window in the “help” tab.\nOne key question: how do you know what functions exist, and what they do?\nAnswer: you Google what you’re trying to do! In the case of R, you might search “How do I do ‘x’ in R?”\nLet’s say you are interested in calculating the absolute value (positive distance from zero) of -35 in R. Take a moment with your group/neighbors, and try to find the answer by searching the internet. In the code chunk below, use the function you found to compute this calculation:\n\n# compute the absolute value of -35\n\nabs(-35)\n\n[1] 35\n\n\n\n\nVectors\nSo far we’ve created variables that have single values (e.g. x&lt;-7), but there are often cases where we need to assign multiple values to a variable. These types of variables are called vectors.\nIn order to create a vector, you can use the “c” function (c stands for “combine”). Here’s an example:\n\nmyFirstVector&lt;-c(3,7,1,10)\n\nmyFirstVector\n\n[1]  3  7  1 10\n\n\nNow it’s your turn. Create a vector called mySecondVector, assign the values 8, -11, 100, 35 to it, and print it to the screen:\n\n# use the \"c\" function to create mySecondVector:\n\nmySecondVector&lt;-c(8,-11,100, 35)\n\nmySecondVector\n\n[1]   8 -11 100  35\n\n\nBefore moving on, let’s talk a little about variable naming conventions. We started out using x, y, and z when learning about variables. That technically works, but it’s better practice to be more descriptive in your variable names. The examples above and below use a syntax called “camel case”. This allows you to string words together without spaces, but preserves quick readability. From this point on, we’re going to create variables with camel case - you should too!\n\nIt may not be immediately clear what the utility of vectors is, so let’s take a look at a practical use case. Below is a vector containing the responses from you and your classmates (and U of Arizona students) on self-reported fishing skill (1 being low, 5 being high):\n\nfishingSkill&lt;-c(1,2,2,1,1,1,1,2,2,5,1,2,2,1,5,3,4,4,4,2,1,2,2,3,2,1,2,2,2,1,5,2,3,1,4,5,2,2,2,1,1,1,1,2,3,1,1,2,1,3,1,1,1,1,2,2,5,3,1,1,1,1,2,1,3,2,5,1,2,3,3,2,3,5,2)\n\nfishingSkill\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nLet’s say we’re interested in finding the average of all the responses. We can do this by use the mean function in R: (we’ll dive more into descriptive statistics next week, and how they differ from inferential)\n\navgFishingSkill&lt;-mean(fishingSkill)\n\navgFishingSkill\n\n[1] 2.146667\n\n\nWe can also calculate the median (the “middle” value, when data is in numerical order) with the median function:\n\nmedianFishingSkill&lt;-median(fishingSkill)\n\nmedianFishingSkill\n\n[1] 2\n\n\nWe can also calculate the standard deviation (a measurement of how spread apart the data is):\n\nsdFishingSkill&lt;-sd(fishingSkill)\n\nsdFishingSkill\n\n[1] 1.248711\n\n\nNow it’s your turn. Given the vector below of self-reported cooking skill ranking, calculate its mean, median, and standard deviation:\n\ncookingSkill&lt;-c(4,5,4,1,2,5,4,4,4,4,3,2,2,2,4,4,4,3,3,5,3,3,4,4,5,5,3,4,3,3,4,4,3,4,1,4,3,4,1,4,2,3,2,4,2,2,2,4,4,1,5,3,3,4,2,4,2,3,3,2,1,3,4,2,5,5,3,5,4,2,4,4,3,3,4,4)\n\n# calculate the mean\n\nmean(cookingSkill)\n\n[1] 3.302632\n\n#calculate median\n\nmedian(cookingSkill)\n\n[1] 3.5\n\n# calculate the standard deviation\n\nsd(cookingSkill)\n\n[1] 1.107787\n\n\n\n\nWorking with a data set\nOne of the most common uses of R is to load a data set into R as a variable, and then use that data to ask and answer questions with code. Let’s start off by loading a package called the Tidyverse. The Tidyverse is a series of functions written by data scientists to make working with data a little easier. We can load it by running the following command:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNotice in the Files tab in the lower-right window, there is a file titled teamAntarcticaData.csv. This is a copy of the spreadsheet data from the Google form. Below, we can assign the entire data set to a variable using the read_csv function:\n\n#load the data\nteamAntarcticaData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#print to screen\nteamAntarcticaData\n\n# A tibble: 75 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 65 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nEarlier in this exercise we looked at the array of responses for both fishing and cooking aptitude, though in both cases the vectors were hand-typed (by me). A much more common way to acquire, and then use, a vector of data is to directly query the data set. You can get a vector (a.k.a. column) of data by using the following syntax:\ndataSet$columnName\nLet’s get all responses for fishing aptitude directly from the data set:\n\nfishing&lt;-teamAntarcticaData$fishing\n\nfishing\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nAnd just like before, we can calculate the mean, median, and standard deviation:\n\nmean(fishing)\n\n[1] 2.146667\n\nmedian(fishing)\n\n[1] 2\n\nsd(fishing)\n\n[1] 1.248711\n\n\nNow it’s your turn:\nUse the data set to get the column values for tolerance of cold (hint: after typing the $, use auto-complete to select the column name). Calculate its mean, median, and standard deviation.\n\n# create a vector that contains the column values for cold tolerance\n\n\n\ncold&lt;-teamAntarcticaData$cold\n\n#calculate the mean\n\nmean(cold)\n\n[1] 3.373333\n\n#calculate the median\n\nmedian(cold)\n\n[1] 3\n\n# calculate the standard deviation\n\nsd(cold)\n\n[1] 0.9969322\n\n\nNow do the same for comfort level with being in a remote location:\n\n# create a vector that contains the column values for comfort level with remote location\n\ncomfort&lt;-teamAntarcticaData$remote\n\n\n#calculate the mean\n\nmean(comfort)\n\n[1] 3.28\n\n#calculate the median\n\nmedian(comfort)\n\n[1] 3\n\n# calculate the standard deviation\n\nsd(comfort)\n\n[1] 1.133757\n\n\nNow create a vector to get the responses for parka color. How is this data different from the other examples we’ve seen? What can we learn from the data?\n\nparkas&lt;-teamAntarcticaData$parkaColor\n\nparkas\n\n [1] \"Gold\"              \"Blue\"              \"Green\"            \n [4] \"Blue\"              \"White\"             \"hot pink\"         \n [7] \"Blue\"              \"Blue\"              \"White\"            \n[10] \"Blue\"              \"purple\"            \"White\"            \n[13] \"Green\"             \"Black\"             \"White\"            \n[16] \"Orange\"            \"Orange\"            \"Orange\"           \n[19] \"White\"             \"Blue\"              \"Black\"            \n[22] \"Blue\"              \"Pink, if possible\" \"green\"            \n[25] \"Black\"             \"Black\"             \"White\"            \n[28] \"Black\"             \"White\"             \"Blue\"             \n[31] \"Green\"             \"Blue\"              \"Black\"            \n[34] \"Blue\"              \"White\"             \"Blue\"             \n[37] \"Green\"             \"Blue\"              \"Black\"            \n[40] \"Blue\"              \"Blue\"              \"Black\"            \n[43] \"Blue\"              \"Black\"             \"Blue\"             \n[46] \"Orange\"            \"Orange\"            \"Blue\"             \n[49] \"Orange\"            \"Black\"             \"Black\"            \n[52] \"Pink\"              \"Baby Pink\"         \"Blue\"             \n[55] \"Lavender/purple\"   \"White\"             \"Black\"            \n[58] \"Black\"             \"Blue\"              \"Black\"            \n[61] \"Orange\"            \"Blue\"              \"Blue\"             \n[64] \"Blue\"              \"Orange\"            \"White\"            \n[67] \"Orange\"            \"Black\"             NA                 \n[70] \"Black\"             \"White\"             \"Black\"            \n[73] \"Black\"             \"Orange\"            \"Purple\""
  },
  {
    "objectID": "modules/module_1/module_1.1/code-a-long-1.1-key.html",
    "href": "modules/module_1/module_1.1/code-a-long-1.1-key.html",
    "title": "Welcome to rstudio",
    "section": "",
    "text": "Let’s start off by clicking the “Visual” button above, so this document is a little easier to read and work with. You’ll likely get a popup window the first time, confirming that you want to switch to Visual Mode.\nJust click Use Visual Mode, with Don’t show this message again checked.\n\n\n\nGain some familiarity with rstudio\nLearn how to run R code in “code chunks”\nPerform some arithmetic with R\nCreate variables in R, and assign values to them\n\n\n\n\nYou’ll notice rstudio is divided into 4 windows. Let’s take a look at each one:\n\nupper-left: this is the area for reading / writing files. We’ll probably use this window the most this semester.\nlower-left: this is the console, where you can run R code directly. You might use this occasionally, but for the most part probably won’t have to.\nupper-right: this window has a couple useful tabs:\n\nEnvironment: any variables you create will be listed here. This can be useful for quick reference.\nHistory: this shows the R commands you’ve run within a session.\n\nlower-right: this window lists any files and folders that are part of your project/assignment. It also has tabs that can display plots and help documentation.\n\nYou can resize windows / borders as needed in order to more easily focus on the particular window you’re using.\n\n\n\nThe grey rectangles below are “code chunks”, where you can type and execute R code. To run the code, click the green triangle in the upper-right corner of the code chunk.\nLet’s try running the code chunk below, which is just some simple arithmetic:\n\n3+7\n\n[1] 10\n\n\nNow it’s your turn. In the code chunk below, enter a command to subtract 7 from 18, and run it:\n\n# Enter code below (by the way, I'm a comment)\n\n18-7\n\n[1] 11\n\n\n\n\n\nProgramming languages, including R, rely heavily on the use of variables. A variable is something you define and assign a value to. In the code chunk below, we’re creating a variable called x, and assigning the value of 7 to it:\n\n# Notice we use a 'left pointing arrow' to assign the value\n\nx&lt;-7\n\nWe don’t get any real feedback from running the code above, but it’s often a good idea to check your work by printing a variable’s value to the screen. To do this, you can run code that simply lists the variable:\n\n# prints to the screen:\n\nx\n\n[1] 7\n\n\nIt’s worth noting that you can run multiple lines of code within a code chunk:\n\n# create a variable \"penguinCount\" and give it the value 3\npenguinCount&lt;-3\n\n# print to screen\npenguinCount\n\n[1] 3\n\n\nNow it’s your turn. Work with your group / people next to you, and do the following:\n\ncreate a variable called y, assign three plus eight to it, and print to the screen.\ncreate a variable z, and assign x+y to it, and print to the screen\n\n\n# create the variable \"y\" here, and print to screen\n\ny&lt;-3+8\n\ny\n\n[1] 11\n\n\n\n# create the variable \"z\" here, and print to screen\n\nz&lt;-x+y\n\nz\n\n[1] 18\n\n\nYou made it! That’s it for now. We’ll do a quick review of variables during the next lesson, and will work our way toward some more exciting topics.\nMake sure you have this completed by midnight on Tuesday, September 6th. And you don’t have to “turn it in” - we’ll be able to view your project on the class work space."
  },
  {
    "objectID": "modules/module_1/module_1.1/code-a-long-1.1-key.html#welcome-to-rstudio",
    "href": "modules/module_1/module_1.1/code-a-long-1.1-key.html#welcome-to-rstudio",
    "title": "Welcome to rstudio",
    "section": "",
    "text": "Let’s start off by clicking the “Visual” button above, so this document is a little easier to read and work with. You’ll likely get a popup window the first time, confirming that you want to switch to Visual Mode.\nJust click Use Visual Mode, with Don’t show this message again checked.\n\n\n\nGain some familiarity with rstudio\nLearn how to run R code in “code chunks”\nPerform some arithmetic with R\nCreate variables in R, and assign values to them\n\n\n\n\nYou’ll notice rstudio is divided into 4 windows. Let’s take a look at each one:\n\nupper-left: this is the area for reading / writing files. We’ll probably use this window the most this semester.\nlower-left: this is the console, where you can run R code directly. You might use this occasionally, but for the most part probably won’t have to.\nupper-right: this window has a couple useful tabs:\n\nEnvironment: any variables you create will be listed here. This can be useful for quick reference.\nHistory: this shows the R commands you’ve run within a session.\n\nlower-right: this window lists any files and folders that are part of your project/assignment. It also has tabs that can display plots and help documentation.\n\nYou can resize windows / borders as needed in order to more easily focus on the particular window you’re using.\n\n\n\nThe grey rectangles below are “code chunks”, where you can type and execute R code. To run the code, click the green triangle in the upper-right corner of the code chunk.\nLet’s try running the code chunk below, which is just some simple arithmetic:\n\n3+7\n\n[1] 10\n\n\nNow it’s your turn. In the code chunk below, enter a command to subtract 7 from 18, and run it:\n\n# Enter code below (by the way, I'm a comment)\n\n18-7\n\n[1] 11\n\n\n\n\n\nProgramming languages, including R, rely heavily on the use of variables. A variable is something you define and assign a value to. In the code chunk below, we’re creating a variable called x, and assigning the value of 7 to it:\n\n# Notice we use a 'left pointing arrow' to assign the value\n\nx&lt;-7\n\nWe don’t get any real feedback from running the code above, but it’s often a good idea to check your work by printing a variable’s value to the screen. To do this, you can run code that simply lists the variable:\n\n# prints to the screen:\n\nx\n\n[1] 7\n\n\nIt’s worth noting that you can run multiple lines of code within a code chunk:\n\n# create a variable \"penguinCount\" and give it the value 3\npenguinCount&lt;-3\n\n# print to screen\npenguinCount\n\n[1] 3\n\n\nNow it’s your turn. Work with your group / people next to you, and do the following:\n\ncreate a variable called y, assign three plus eight to it, and print to the screen.\ncreate a variable z, and assign x+y to it, and print to the screen\n\n\n# create the variable \"y\" here, and print to screen\n\ny&lt;-3+8\n\ny\n\n[1] 11\n\n\n\n# create the variable \"z\" here, and print to screen\n\nz&lt;-x+y\n\nz\n\n[1] 18\n\n\nYou made it! That’s it for now. We’ll do a quick review of variables during the next lesson, and will work our way toward some more exciting topics.\nMake sure you have this completed by midnight on Tuesday, September 6th. And you don’t have to “turn it in” - we’ll be able to view your project on the class work space."
  },
  {
    "objectID": "modules/module_2/module_2.2/code-a-long-2.2-key.html",
    "href": "modules/module_2/module_2.2/code-a-long-2.2-key.html",
    "title": "Code-a-long 2.2",
    "section": "",
    "text": "Learning Outcomes\n\nStudents will be able to use ggplot to generate box plots.\nStudents will be able to apply error bars to box plots and bar plots.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\n\npenguins&lt;-palmerpenguins::penguins\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nBox plots with error bars\nStrategy: Use geom_boxplot(), and in the aes function, set x equal to a categorical column, which will automatically group them. For the horizontal lines (error bars), add stat_boxplot(geom = “errorbar”).\n\nggplot(data=penguins, mapping=aes(x=species, y=bill_length_mm, fill=species))+\n  stat_boxplot(geom=\"errorbar\")+\n  geom_boxplot()+\n  labs(title=\"Distribution of Penguin Bill lengths by Species\",\n       x=\"Species\", \n       y=\"Bill Length (mm)\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\nRemoved 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\n\nBar plots with error bars\nStrategy: use group_by/summarize to calculate group mean and standard deviation. Add geom_errorbar, in which the top top bar is the mean + standard deviation, and the lower bar is the mean - standard deviation:\n\ngroupedBillLength&lt;- penguins %&gt;% \n  group_by(species) %&gt;%\n  summarize(avgBillLength=mean(bill_length_mm, na.rm=TRUE), \n            sdBillLength=sd(bill_length_mm, na.rm=TRUE))\n\ngroupedBillLength\n\n# A tibble: 3 × 3\n  species   avgBillLength sdBillLength\n  &lt;fct&gt;             &lt;dbl&gt;        &lt;dbl&gt;\n1 Adelie             38.8         2.66\n2 Chinstrap          48.8         3.34\n3 Gentoo             47.5         3.08\n\nggplot(data=groupedBillLength, mapping=aes(x=species, y=avgBillLength, fill=species))+\n  geom_bar(stat=\"identity\")+\n  geom_errorbar(mapping=aes(ymin=avgBillLength-sdBillLength, \n                            ymax=avgBillLength+sdBillLength), \n                width=0.2)+\n  labs(title=\"Average Bill Length by Species\", \n       x=\"Species\", \n       y=\"Bill Length (mm)\")\n\n\n\n\n\n\n\n\n\n\nPractice\nCreate a box plot comparing penguin mass among species. Include error bars, a legend, and labels.\n\n# create box plot below\n\nggplot(data=penguins, mapping=aes(x=species, y=body_mass_g, fill=species))+\n  stat_boxplot(geom=\"errorbar\")+\n  geom_boxplot()+\n  labs(title=\"Distribution of Penguin Mass by Species\",\n       x=\"Species\", y=\"Mass (g)\")\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\nRemoved 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\nCreate a bar plot comparing penguin mass among species. Include error bars (+/- 1 sd), a legend, and labels.\n\n# create bar plot below\n\ngroupedMass&lt;- penguins %&gt;% \n  group_by(species) %&gt;%\n  summarize(avgMass=mean(body_mass_g, na.rm=TRUE), \n            sdMass=sd(body_mass_g, na.rm=TRUE))\n\ngroupedMass\n\n# A tibble: 3 × 3\n  species   avgMass sdMass\n  &lt;fct&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n1 Adelie      3701.   459.\n2 Chinstrap   3733.   384.\n3 Gentoo      5076.   504.\n\nggplot(data=groupedMass, mapping=aes(x=species, y=avgMass, fill=species))+\n  geom_bar(stat=\"identity\")+\n  geom_errorbar(mapping=aes(ymin=avgMass-sdMass, \n                            ymax=avgMass+sdMass), \n                width=0.2)+\n  labs(title=\"Average Penguin Mass by Species\", \n       x=\"Species\", \n       y=\"Mass (g)\")"
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding_Sick_Fish_Tilapia_Oxygen_Key.html",
    "href": "modules/module_2/module_2.3/Understanding_Sick_Fish_Tilapia_Oxygen_Key.html",
    "title": "Understanding Sick Fish",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# read in the data, sick-fish.csv\nsick &lt;- read_csv(\"sick-fish.csv\")\n\nRows: 1000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): species\ndbl (11): tank_id, avg_daily_temp, num_fish, day_length, tank_volume, size_d...\nlgl  (1): below\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# look at the data\nglimpse(sick)\n\nRows: 1,000\nColumns: 13\n$ tank_id          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ species          &lt;chr&gt; \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\"…\n$ avg_daily_temp   &lt;dbl&gt; 22.95922, 23.98088, 23.97097, 24.26474, 24.29623, 23.…\n$ num_fish         &lt;dbl&gt; 95, 96, 101, 98, 93, 101, 98, 109, 97, 102, 99, 99, 9…\n$ day_length       &lt;dbl&gt; 9, 11, 11, 10, 10, 11, 12, 10, 10, 10, 9, 11, 11, 10,…\n$ tank_volume      &lt;dbl&gt; 399.6975, 399.8071, 398.8427, 399.8410, 399.7561, 398…\n$ size_day_30      &lt;dbl&gt; 2784.895, 2781.003, 2785.807, 2785.253, 2786.946, 278…\n$ ammonia          &lt;dbl&gt; 0.10561057, 0.09073854, 0.10867733, 0.09421766, 0.093…\n$ density          &lt;dbl&gt; 0.2376798, 0.2401158, 0.2532327, 0.2450974, 0.2326418…\n$ avg_daily_temp_F &lt;dbl&gt; 73.32660, 75.16558, 75.14774, 75.67654, 75.73322, 75.…\n$ below            &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ num_sick         &lt;dbl&gt; 63, 18, 12, 0, 5, 11, 11, 0, 55, 23, 7, 65, 61, 62, 6…\n$ oxygen           &lt;dbl&gt; 9.480023, 9.288952, 9.467007, 9.322897, 9.327849, 9.4…\n\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\nsick &lt;- sick %&gt;% mutate(density = num_fish / tank_volume)\n\nsick &lt;- sick %&gt;% mutate(perc_sick = num_sick / num_fish)\n\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\n\nggplot(data = sick, mapping = aes(density, perc_sick, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n# percentage sick is standardized across all the tank volumes and fish populations, so it puts everything in the same units\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# comment it out\n# tilapia and oxygen\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\ntilapiaOnly &lt;- sick %&gt;% filter(species == \"tilapia\")\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n11:30 Class Section: https://docs.google.com/presentation/d/1AYbRlU9NB36EfF4R8C5_nTr0dQyTWpcAPTeSiW7XKhY/edit?usp=sharing\n1:50 Class Section: https://docs.google.com/presentation/d/1CnL45KGLifZypKY9J5uAC8qoXEjEToFmxZSdiy6oKqQ/edit?usp=sharing\n\nggplot(tilapiaOnly, aes(x = oxygen)) +\n  geom_histogram() +\n  labs(title = \"tilapia + oxygen\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# most common is around 9.5 but it could be different depending on their bin number. The correct answer is the value with the greatest frequency for their histogram. \n\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\ntilapiaOnly %&gt;% summarize(mean(oxygen), sd(oxygen))\n\n# A tibble: 1 × 2\n  `mean(oxygen)` `sd(oxygen)`\n           &lt;dbl&gt;        &lt;dbl&gt;\n1           9.47        0.188\n\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\n\n# we want to know if oxygen concentration is related with the percentage of sick fish. I will use a scatterplot. \n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\n\nggplot(data = tilapiaOnly, mapping = aes(x = oxygen, y= perc_sick)) +\n  geom_point()"
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding_Sick_Fish_Trout_Temperature_Key.html",
    "href": "modules/module_2/module_2.3/Understanding_Sick_Fish_Trout_Temperature_Key.html",
    "title": "Understanding Sick Fish",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# read in the data, sick-fish.csv\nsick &lt;- read_csv(\"sick-fish.csv\")\n\nRows: 1000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): species\ndbl (11): tank_id, avg_daily_temp, num_fish, day_length, tank_volume, size_d...\nlgl  (1): below\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# look at the data\nglimpse(sick)\n\nRows: 1,000\nColumns: 13\n$ tank_id          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ species          &lt;chr&gt; \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\"…\n$ avg_daily_temp   &lt;dbl&gt; 22.95922, 23.98088, 23.97097, 24.26474, 24.29623, 23.…\n$ num_fish         &lt;dbl&gt; 95, 96, 101, 98, 93, 101, 98, 109, 97, 102, 99, 99, 9…\n$ day_length       &lt;dbl&gt; 9, 11, 11, 10, 10, 11, 12, 10, 10, 10, 9, 11, 11, 10,…\n$ tank_volume      &lt;dbl&gt; 399.6975, 399.8071, 398.8427, 399.8410, 399.7561, 398…\n$ size_day_30      &lt;dbl&gt; 2784.895, 2781.003, 2785.807, 2785.253, 2786.946, 278…\n$ ammonia          &lt;dbl&gt; 0.10561057, 0.09073854, 0.10867733, 0.09421766, 0.093…\n$ density          &lt;dbl&gt; 0.2376798, 0.2401158, 0.2532327, 0.2450974, 0.2326418…\n$ avg_daily_temp_F &lt;dbl&gt; 73.32660, 75.16558, 75.14774, 75.67654, 75.73322, 75.…\n$ below            &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ num_sick         &lt;dbl&gt; 63, 18, 12, 0, 5, 11, 11, 0, 55, 23, 7, 65, 61, 62, 6…\n$ oxygen           &lt;dbl&gt; 9.480023, 9.288952, 9.467007, 9.322897, 9.327849, 9.4…\n\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\n# 2 pts, 1 for each line of code\nsick &lt;- sick %&gt;% mutate(density = num_fish / tank_volume)\n\nsick &lt;- sick %&gt;% mutate(perc_sick = num_sick / num_fish)\n\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\n\n# 2 pts, 1 for the correct plot and 1 for a comment \n\nggplot(data = sick, mapping = aes(density, perc_sick, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n# percentage sick is standardized across all the tank volumes and fish populations, so it puts everything in the same units\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# 1 pt\n\n# comment it out\n# trout and temperature\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\n# 1 pt\n\ntroutOnly &lt;- sick %&gt;% filter(species == \"trout\")\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n11:30 Class Section: https://docs.google.com/presentation/d/1AYbRlU9NB36EfF4R8C5_nTr0dQyTWpcAPTeSiW7XKhY/edit?usp=sharing\n1:50 Class Section: https://docs.google.com/presentation/d/1CnL45KGLifZypKY9J5uAC8qoXEjEToFmxZSdiy6oKqQ/edit?usp=sharing\n\n# 2 pts, 1 for plot and 1 for a common value\n\nggplot(troutOnly, aes(x = avg_daily_temp_F)) +\n  geom_histogram() +\n  labs(title = \"trout + temp\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# most common is around 59 but it could be different depending on their bin number. The correct answer is the value with the greatest frequency for their histogram. \n\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\n# 1pt \ntroutOnly %&gt;% summarize(mean(avg_daily_temp_F), sd(avg_daily_temp_F))\n\n# A tibble: 1 × 2\n  `mean(avg_daily_temp_F)` `sd(avg_daily_temp_F)`\n                     &lt;dbl&gt;                  &lt;dbl&gt;\n1                     59.0                  0.862\n\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\n\n# we want to know if temperature is related with the percentage of sick fish. I will use a scatterplot. \n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\n\n# 1 pt\n\nggplot(data = troutOnly, mapping = aes(x = avg_daily_temp_F, y= perc_sick)) +\n  geom_point()\n\n\n\n\n\n\n\n\nTEMPERATURE GROUPS ONLY\n\nIn the previous questions, you have examined fish sickness and temperature as a continuous variable. However, our data set also includes temperature as a categorical variable- is a given tank below the critical threshold for fish immune systems. If the column titled “below” is TRUE, then that tank is below the critical threshold. If the column titled “below” is FALSE, then that tank is above the critical threshold. Create a histogram that examines sick fish and the tank temperature as this categorical variable.\n\n\n# okay so many ways to do this\n# not for a grade\n\n\n# with a histogram\nggplot(data = troutOnly, mapping = aes(x = perc_sick, fill = below)) +\n  geom_histogram(color = \"black\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# with a box plot\nggplot(data = troutOnly, mapping = aes(x = below, y = perc_sick, fill = below)) +\n  geom_boxplot(color = \"black\")\n\n\n\n\n\n\n\n# with a bar plot\nsummaryData &lt;- troutOnly %&gt;% group_by(below) %&gt;% summarize(meanSick = mean(perc_sick), sdSick = sd(perc_sick))\nsummaryData\n\n# A tibble: 2 × 3\n  below meanSick sdSick\n  &lt;lgl&gt;    &lt;dbl&gt;  &lt;dbl&gt;\n1 FALSE    0.126 0.0703\n2 TRUE     0.502 0.0924\n\nggplot(summaryData, aes(x = below, y = meanSick, fill = below)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = meanSick - sdSick, ymax = meanSick + sdSick, width = 0.2))"
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding_Sick_Fish_Tilapia_Ammonia_Key.html",
    "href": "modules/module_2/module_2.3/Understanding_Sick_Fish_Tilapia_Ammonia_Key.html",
    "title": "Understanding Sick Fish",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# read in the data, sick-fish.csv\nsick &lt;- read_csv(\"sick-fish.csv\")\n\nRows: 1000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): species\ndbl (11): tank_id, avg_daily_temp, num_fish, day_length, tank_volume, size_d...\nlgl  (1): below\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# look at the data\nglimpse(sick)\n\nRows: 1,000\nColumns: 13\n$ tank_id          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ species          &lt;chr&gt; \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\"…\n$ avg_daily_temp   &lt;dbl&gt; 22.95922, 23.98088, 23.97097, 24.26474, 24.29623, 23.…\n$ num_fish         &lt;dbl&gt; 95, 96, 101, 98, 93, 101, 98, 109, 97, 102, 99, 99, 9…\n$ day_length       &lt;dbl&gt; 9, 11, 11, 10, 10, 11, 12, 10, 10, 10, 9, 11, 11, 10,…\n$ tank_volume      &lt;dbl&gt; 399.6975, 399.8071, 398.8427, 399.8410, 399.7561, 398…\n$ size_day_30      &lt;dbl&gt; 2784.895, 2781.003, 2785.807, 2785.253, 2786.946, 278…\n$ ammonia          &lt;dbl&gt; 0.10561057, 0.09073854, 0.10867733, 0.09421766, 0.093…\n$ density          &lt;dbl&gt; 0.2376798, 0.2401158, 0.2532327, 0.2450974, 0.2326418…\n$ avg_daily_temp_F &lt;dbl&gt; 73.32660, 75.16558, 75.14774, 75.67654, 75.73322, 75.…\n$ below            &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ num_sick         &lt;dbl&gt; 63, 18, 12, 0, 5, 11, 11, 0, 55, 23, 7, 65, 61, 62, 6…\n$ oxygen           &lt;dbl&gt; 9.480023, 9.288952, 9.467007, 9.322897, 9.327849, 9.4…\n\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\nsick &lt;- sick %&gt;% mutate(density = num_fish / tank_volume)\n\nsick &lt;- sick %&gt;% mutate(perc_sick = num_sick / num_fish)\n\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\n\nggplot(data = sick, mapping = aes(density, perc_sick, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n# percentage sick is standardized across all the tank volumes and fish populations, so it puts everything in the same units\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# comment it out\n# tilapia and ammonia\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\ntilapiaOnly &lt;- sick %&gt;% filter(species == \"tilapia\")\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n11:30 Class Section: https://docs.google.com/presentation/d/1AYbRlU9NB36EfF4R8C5_nTr0dQyTWpcAPTeSiW7XKhY/edit?usp=sharing\n1:50 Class Section: https://docs.google.com/presentation/d/1CnL45KGLifZypKY9J5uAC8qoXEjEToFmxZSdiy6oKqQ/edit?usp=sharing\n\nggplot(tilapiaOnly, aes(x = avg_daily_temp_F)) +\n  geom_histogram() +\n  labs(title = \"tilapia + ammonia\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# most common is around 75 but it could be different depending on their bin number. The correct answer is the value with the greatest frequency for their histogram. \n\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\ntilapiaOnly %&gt;% summarize(mean(ammonia), sd(ammonia))\n\n# A tibble: 1 × 2\n  `mean(ammonia)` `sd(ammonia)`\n            &lt;dbl&gt;         &lt;dbl&gt;\n1           0.100       0.00997\n\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\n\n# we want to know if ammonia concentration is related with the percentage of sick fish. I will use a scatterplot. \n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\n\nggplot(data = tilapiaOnly, mapping = aes(x = ammonia, y= perc_sick)) +\n  geom_point()"
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding_Sick_Fish_Tilapia_Temperature_Key.html",
    "href": "modules/module_2/module_2.3/Understanding_Sick_Fish_Tilapia_Temperature_Key.html",
    "title": "Understanding Sick Fish",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# read in the data, sick-fish.csv\nsick &lt;- read_csv(\"sick-fish.csv\")\n\nRows: 1000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): species\ndbl (11): tank_id, avg_daily_temp, num_fish, day_length, tank_volume, size_d...\nlgl  (1): below\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# look at the data\nglimpse(sick)\n\nRows: 1,000\nColumns: 13\n$ tank_id          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ species          &lt;chr&gt; \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\"…\n$ avg_daily_temp   &lt;dbl&gt; 22.95922, 23.98088, 23.97097, 24.26474, 24.29623, 23.…\n$ num_fish         &lt;dbl&gt; 95, 96, 101, 98, 93, 101, 98, 109, 97, 102, 99, 99, 9…\n$ day_length       &lt;dbl&gt; 9, 11, 11, 10, 10, 11, 12, 10, 10, 10, 9, 11, 11, 10,…\n$ tank_volume      &lt;dbl&gt; 399.6975, 399.8071, 398.8427, 399.8410, 399.7561, 398…\n$ size_day_30      &lt;dbl&gt; 2784.895, 2781.003, 2785.807, 2785.253, 2786.946, 278…\n$ ammonia          &lt;dbl&gt; 0.10561057, 0.09073854, 0.10867733, 0.09421766, 0.093…\n$ density          &lt;dbl&gt; 0.2376798, 0.2401158, 0.2532327, 0.2450974, 0.2326418…\n$ avg_daily_temp_F &lt;dbl&gt; 73.32660, 75.16558, 75.14774, 75.67654, 75.73322, 75.…\n$ below            &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ num_sick         &lt;dbl&gt; 63, 18, 12, 0, 5, 11, 11, 0, 55, 23, 7, 65, 61, 62, 6…\n$ oxygen           &lt;dbl&gt; 9.480023, 9.288952, 9.467007, 9.322897, 9.327849, 9.4…\n\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\nsick &lt;- sick %&gt;% mutate(density = num_fish / tank_volume)\n\nsick &lt;- sick %&gt;% mutate(perc_sick = num_sick / num_fish)\n\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\n\nggplot(data = sick, mapping = aes(density, perc_sick, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n# percentage sick is standardized across all the tank volumes and fish populations, so it puts everything in the same units\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# comment it out\n# tilapia and temperature\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\ntilapiaOnly &lt;- sick %&gt;% filter(species == \"tilapia\")\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n11:30 Class Section: https://docs.google.com/presentation/d/1AYbRlU9NB36EfF4R8C5_nTr0dQyTWpcAPTeSiW7XKhY/edit?usp=sharing\n1:50 Class Section: https://docs.google.com/presentation/d/1CnL45KGLifZypKY9J5uAC8qoXEjEToFmxZSdiy6oKqQ/edit?usp=sharing\n\nggplot(tilapiaOnly, aes(x = avg_daily_temp_F)) +\n  geom_histogram() +\n  labs(title = \"tilapia + temp\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# most common is around 59 but it could be different depending on their bin number. The correct answer is the value with the greatest frequency for their histogram. \n\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\ntilapiaOnly %&gt;% summarize(mean(avg_daily_temp_F), sd(avg_daily_temp_F))\n\n# A tibble: 1 × 2\n  `mean(avg_daily_temp_F)` `sd(avg_daily_temp_F)`\n                     &lt;dbl&gt;                  &lt;dbl&gt;\n1                     75.0                  0.876\n\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\n\n# we want to know if temperature is related with the percentage of sick fish. I will use a scatterplot. \n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\n\nggplot(data = tilapiaOnly, mapping = aes(x = avg_daily_temp_F, y= perc_sick)) +\n  geom_point()\n\n\n\n\n\n\n\n\nTEMPERATURE GROUPS ONLY\n\nIn the previous questions, you have examined fish sickness and temperature as a continuous variable. However, our data set also includes temperature as a categorical variable- is a given tank below the critical threshold for fish immune systems. If the column titled “below” is TRUE, then that tank is below the critical threshold. If the column titled “below” is FALSE, then that tank is above the critical threshold. Create a histogram that examines sick fish and the tank temperature as this categorical variable.\n\n\n\nokay so many ways to do this\n\n\ndo not grade them down if they don’t have anything here\n\n\nwith a histogram\nggplot(data = tilapiaOnly, mapping = aes(x = perc_sick, fill = below)) + geom_histogram(color = “black”)\n\n\nwith a box plot\nggplot(data = tilapiaOnly, mapping = aes(x = below, y = perc_sick, fill = below)) + geom_boxplot(color = “black”)\n\n\nwith a bar plot\nsummaryData &lt;- tilapiaOnly %&gt;% group_by(below) %&gt;% summarize(meanSick = mean(perc_sick), sdSick = sd(perc_sick)) summaryData ggplot(summaryData, aes(x = below, y = meanSick, fill = below)) + geom_bar(stat = “identity”) + geom_errorbar(aes(ymin = meanSick - sdSick, ymax = meanSick + sdSick, width = 0.2))"
  },
  {
    "objectID": "modules/module_2/module_2.1/homework-2.1.html",
    "href": "modules/module_2/module_2.1/homework-2.1.html",
    "title": "Homework Module 2.1",
    "section": "",
    "text": "Your Name\n\n\nDate\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\nRun this code chunk first, to make the data set from the code along is available as the variable sick:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nsick&lt;-read_csv(\"sick_data.csv\")\n\nRows: 349 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): last, first, sex, specialties\ndbl (6): age, height_cm, weight_kg, perc_fish, perc_plant, doctor_trips\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nWhat does “gg” in “ggplot” stand for? What are the three components of data visualizations?\n\n\nCreate a histogram of the distribution of team member weights with ggplot. Make sure you add descriptive labels.\n\n\nCreate a scatter plot displaying participant weight with percent plant intake using ggplot. Label axes appropriately.\n\n\nDescribe why you might use a histogram, scatter plot, or bar plot (i.e. what is the purpose of each?).\n\n\nGenerate a bar plot showing the average fish consumption among those who specialize in Management, Genetics, and Medicine. Include labels, and use the “fill” attribute to generate colors and a legend.\n\n\nFor each of the three plots above, write code to save the files to “histogram.jpg”, “scatterplot.jpg”, and “barplot.jpg”. (Hint: assign each plot to a variable as part of your answer)"
  },
  {
    "objectID": "modules/module_2/module_2.1/homework-2.1-key.html",
    "href": "modules/module_2/module_2.1/homework-2.1-key.html",
    "title": "Homework Module 2.1 Key",
    "section": "",
    "text": "Your Name\n\n\nDate\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\nRun this code chunk first, to make the data set from the code along is available as the variable sick:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nsick&lt;-read_csv(\"sick_data.csv\")\n\nRows: 349 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): last, first, sex, specialties\ndbl (6): age, height_cm, weight_kg, perc_fish, perc_plant, doctor_trips\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nWhat does “gg” in “ggplot” stand for? What are the three components of data visualizations?\n\n\n# GG stands for \"Grammar of Graphics\"\n\n# The three components of data visualizations are:\n# The Data\n# The Aesthetics (the stuff you see)\n# The Geom, or type of plot\n\n\nCreate a histogram of the distribution of team member weights with ggplot. Make sure you add descriptive labels.\n\n\nggplot(data=sick, mapping=aes(x=weight_kg))+\n  geom_histogram(bins=12, color=\"black\", fill=\"grey\" )+\n  labs(title=\"Distribution of weight among Team Antarctica Members\", \n       y=\"Frequency\", \n       x=\"Weight (kg)\")\n\n\n\n\n\n\n\n\n\nCreate a scatter plot displaying participant weight with percent plant intake using ggplot. Label axes appropriately.\n\n\nggplot(data=sick, mapping=aes(x=weight_kg, y=perc_plant))+\n  geom_point(color=\"blue\")+\n  labs(title=\"Association of team member weights with percent plant intake\", \n       x=\"Weight(kg)\", \n       y=\"Plants as percent of diet\")\n\n\n\n\n\n\n\n\n\nDescribe why you might use a histogram, scatter plot, or bar plot (i.e. what is the purpose of each?).\n\n\n# You would use a histogram to show frequency distribution for a single variable in a population.\n\n# You would use a scatter plot to view associations (or lack thereof) between two numeric variables.\n\n# You would use a bar plot to compare averages (or other statistical measures) among groups\n\n\nGenerate a bar plot showing the average fish consumption among those who specialize in Management, Genetics, and Medicine. Include labels, and use the “fill” attribute to generate colors and a legend.\n\n\nfishConsumption&lt;- sick %&gt;% \n  filter(specialties==\"Management\" | \n           specialties==\"Genetics\" | \n           specialties==\"Medicine\") %&gt;%\n  group_by(specialties) %&gt;%\n  summarize(avgFishConsumption=mean(perc_fish))\n\n\nggplot(data=fishConsumption, mapping=aes(x=specialties, y=avgFishConsumption, fill=specialties))+\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Average percent fish intake by Specialty\", \n       x=\"Specialty\", \n       y=\"Average percent fish intake\")\n\n\n\n\n\n\n\n\n\nFor each of the three plots above, write code to save the files to “histogram.jpg”, “scatterplot.jpg”, and “barplot.jpg”. (Hint: assign each plot to a variable as part of your answer)\n\n\n#histogram\nhgram&lt;-ggplot(data=sick, mapping=aes(x=weight_kg))+\n  geom_histogram(bins=12, color=\"black\", fill=\"grey\" )+\n  labs(title=\"Distribution of weight among Team Antarctica Members\", \n       y=\"Frequency\", \n       x=\"Weight (kg)\")\n\nggsave(\"histogram.jpg\", hgram)\n\nSaving 7 x 5 in image\n\n#scatterplot\nsplot&lt;-ggplot(data=sick, mapping=aes(x=weight_kg, y=perc_plant))+\n  geom_point(color=\"blue\")+\n  labs(title=\"Association of team member weights with percent plant intake\", \n       x=\"Weight(kg)\", \n       y=\"Plants as percent of diet\")\n\nggsave(\"scatterplot.jpg\", splot)\n\nSaving 7 x 5 in image\n\n#bar chart\nbarchart&lt;-ggplot(data=fishConsumption, mapping=aes(x=specialties, y=avgFishConsumption, fill=specialties))+\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Average percent fish intake by Specialty\", \n       x=\"Specialty\", \n       y=\"Average percent fish intake\")\n\nggsave(\"barplot.jpg\", barchart)\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "modules/module_2/module_2.1/code-a-long-2.1-key.html",
    "href": "modules/module_2/module_2.1/code-a-long-2.1-key.html",
    "title": "Introduction to Data Visualizations Key",
    "section": "",
    "text": "Learning Outcomes\n\nStudents will be able to apply basic data science knowledge to find the cause of a real-world scenario–food poisoning!\nStudents will be able to use ggplot to generate histograms, scatter plots, and bar charts from data sets, and save them to image files.\nStudents will be able to use visual-thinking skills to create visualizations that allow them to explore patterns in data, draw inferences, and create solutions.\n\n\n\nIntroduction to the problem\nWe have a wave of people getting sick across the team. People are coming in complaining of stomach sickness. Doctors have ruled out a communicable viral infection like norovirus, so it seems likely to be a food contamination issue.\nThe two main sources of food that are grown on site and distributed to team members are plants grown in hydroponic greenhouses (mostly Swiss chard, cucumbers and radishes) and fish (tilapia, a tolerant warm-water species, and rainbow trout, a cold-water species). Team members vary in the composition of their diet; people are allowed to choose how much of different food sources they eat.\nFortunately, we have some data to work with! We have data on the following:\n\nwhich team members are sick\nhow much fish or plant material they incorporate into their diets\n\n\n\nQuick Discussion\nHow might we go about trying to figure out what is causing the problem?\n\n\nThe Data\nFirst we’re going to pull in the data and give it a quick inspection/exploration before we start to work through some of the visualization tools in R.\n\n#load tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# assign data set to variable \"sick\"\n\nsick&lt;-read_csv(\"sick_data.csv\")\n\nRows: 349 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): last, first, sex, specialties\ndbl (6): age, height_cm, weight_kg, perc_fish, perc_plant, doctor_trips\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nHistograms\nWe’re going to look at a couple ways to create a histogram. The first is with the base R function hist, and the second is with ggplot (from the tidyverse). From today forward we’re going to exclusively use ggplot for data visualizations, as it’s the standard in R/data science.\nLet’s first look at the hist function.\n\n# use base R \"hist\" function\n\nhist(sick$age)\n\n\n\n\n\n\n\n\nNow let’s create a histogram with the same data using ggplot. First, let’s talk a little about ggplot:\n\n\nWhat is ggplot?\nggplot is an R package, and is part of the tidyverse. The “gg” translates to “grammar of graphics”, and is founded in the idea that all data visualizations are comprised of three components:\n\ndata set\naesthetics, or visual marks that represent the data (i.e. the stuff that you see)\ngeometric objects, or “geoms” (e.g the type of plot)\n\nIn the files tab (lower-right window), take a look at the ggplot-cheatsheet.pdf. In addition, there’s lots of documentation on the internet on ggplot.\n\n# Data set: \"data=sick\"              (the data set)\n# Aesthetics: \"mapping=aes(x=age)\"   (the stuff you see)\n# Geoms: \"geom_histogram()\"          (what type of plot)\n\n# Notice that the \"+\" is used to chain functions together in ggplot\n\nggplot(data=sick, mapping=aes(x=age))+ \n  geom_histogram(bins=12)\n\n\n\n\n\n\n\n# 'bins' refers to the number of ranges data can fall in\n\nWe can improve the look by adding the “color” and “fill” attributes to geom_histogram. color indicates the outline color, and fill specifies the background color:\n\n# add color and fill attributes to geom_histogram()\n\nggplot(data=sick, mapping=aes(x=age))+\n  geom_histogram(bins=12, color=\"black\", fill=\"grey\")\n\n\n\n\n\n\n\n\nOne of the keys to data visualization is making sure the data and units are very clear to the viewer. We can chain on the labs() function to create custom axis labels and title:\n\n# chain \"labs()\" to the plot code\n\nggplot(data=sick, mapping=aes(x=age))+\n  geom_histogram(bins=12, color=\"black\", fill=\"grey\")+\n  labs(title=\"Distribution of Team Anarctica Ages\", \n       x=\"Age (years)\", \n       y=\"Frequency\")\n\n\n\n\n\n\n\n\nCreate a histogram showing the distribution of height from the sick data set. Use the techniques show above to style it, and provide custom labels:\n\nggplot(data=sick, mapping=aes(x=height_cm))+\n  geom_histogram(bins=12, color=\"black\", fill=\"grey\")+\n  labs(title=\"Distribution of Team Anarctica Height\", \n       x=\"Height (cm)\", \n       y=\"Frequency\")\n\n\n\n\n\n\n\n\n\n\nScatter plots\nScatter plots are useful for visualizing if there is a potential association between two variables. Let’s take a look at an example scatter plot, displaying age on the x-axis (independent variable), and weight on the y-axis (dependent variable). You’ll see this is pretty similar to histogram code above, except for an additional attribute in the mapping aes function (y=), and a different geom function (geom_point):\n\n# use ggplot with geom_point()\n\n\nggplot(data=sick, mapping=aes(x=age, y=weight_kg))+\n  geom_point()\n\n\n\n\n\n\n\n\nTry improving this plot by adding a title, x- and y-axis labels, and perhaps some color.\n\n#add color attribute to geom_point, and chain labs() at the end\nggplot(data=sick, mapping=aes(x=age, y=weight_kg))+\n  geom_point(color=\"blue\")+\n  labs(title=\"Weight x Age of Team members\", \n       x=\"Age (yrs)\", \n       y=\"weight (kg)\")\n\n\n\n\n\n\n\n\nIn your group or with your neighbor, create a scatter plot to show what variables might be associated to give some clues about the root of the sickness. Use proper labels and add some color. Try some different variables until you see what might be a pattern.\n\n# What two variables might be useful in solving the mystery? Try multiple combinations if needed.\n\nggplot(data=sick, mapping=aes(x=perc_fish, y=doctor_trips))+\n  geom_point(color=\"red\")+\n  labs(title=\"Association of % fish in diet with trips to the doctor\", \n       x=\"Percentage of fish in diet\", \n       y=\"Number of trips to doctor (past 6 mos)\")\n\n\n\n\n\n\n\n\n\n\nBar Plots\nLastly we’re going to look at bar plots. One key difference between bar plots and the previous two plots we examined is that bar plots often show summary statistics of categorical variables, instead of all data. As such, we’ll need to use strategies from Module 1 to group data and generate statistics.\nLet’s say we’re interested in creating a visualization showing the means on doctor visits in males and females. First we’ll need to group the data and generate the means, using group_by/summarize:\n\ndrVisits&lt;-sick %&gt;% \n  group_by(sex) %&gt;%\n  summarize(meanVisits=mean(doctor_trips))\n\ndrVisits\n\n# A tibble: 3 × 2\n  sex   meanVisits\n  &lt;chr&gt;      &lt;dbl&gt;\n1 F           2.43\n2 I           2.67\n3 M           2.35\n\n\nNow that we have our data grouped with the average doctor visits, let’s use it to create a bar chart:\n\n# use ggplot with geom_bar function. stat=\"identity\" means use the data values from the data set for the y-axis, rather than count\n\n\nggplot(data=drVisits, mapping=aes(x=sex, y=meanVisits))+\n  geom_bar(stat=\"identity\")\n\n\n\n\n\n\n\n\nWe can improve this in a couple ways. Like before we can add better labeling with labs. But we can also add some color and a legend by using the “fill” attribute in the aes function, and set it to the sex variable:\n\n#add labs()\n\nggplot(data=drVisits, mapping=aes(x=sex, y=meanVisits, fill=sex))+\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Average doctor visits by sex\", \n       x=\"Sex\", \n       y=\"Average dr visits, last 6 months\")\n\n\n\n\n\n\n\n\nLet’s say were interested in comparing average plant consumption among team members who specialize in Climatology, Data Science, and Psychology. Create a bar plot below showing the average plant consumption among the three groups (hint: you may need to filter your data first).\n\n# create your subset of data from 'sick' first, then group_by/summarize\n\ncliDsPsy&lt;-sick %&gt;% \n  filter(specialties==\"Climatology\" | \n           specialties==\"Data Science\" | \n           specialties==\"Psychology\") %&gt;%\n  group_by(specialties) %&gt;% \n  summarize(avgPlant=mean(perc_plant))\n\n# now use this subset for generating the bar plot\n\nggplot(data=cliDsPsy, mapping=aes(x=specialties, y=avgPlant, fill=specialties))+\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Plant consumption among Aquaculture, Geology, and Psycology Specialists\", \n       x=\"Specialty\", \n       y=\"Average percent of plant intake in diet\")\n\n\n\n\n\n\n\n\n\n\nSaving plots\nIt’s likely at some point you may want to save your plots to image files. There’s a handy function to do this: ggsave. ggsave takes the argument of an image file name (e.g. myPlot.jpg), and optionally a variable, if you have your plot assigned to a variable - if not, it will save the last plot rendered.\n\n# create a plot, but assign it to a variable\n\nageHist&lt;-ggplot(data=sick, mapping=aes(x=age))+\n  geom_histogram(bins=12,color=\"black\", fill=\"grey\")+\n  labs(title=\"Age distributiuon of team members\", \n       x=\"Age(years)\", \n       y=\"Distribution\")\n\n\n\n# use ggsave to save it to a file\nggsave(\"ageHistPlot.jpg\", ageHist)\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "modules/module_3/week9/ANOVA-Code-Along_Key.html",
    "href": "modules/module_3/week9/ANOVA-Code-Along_Key.html",
    "title": "Module 3: ANOVA",
    "section": "",
    "text": "Last week we used t-tests to think about which bay we should go fishing to minimize our impact on leopard seals.\n\nAre the bays equal in their fish populations?\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nfish &lt;- read_csv(\"arctic-fish.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(fish, aes(bay, num_fish, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = fish, num_fish ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_fish by bay\nt = -1.7366, df = 630.63, p-value = 0.08295\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -0.54602183  0.03352183\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                  3.90625                   4.16250 \n\n\nResponse:\n\nAre the bays equal in their leopard seal populations?\n\n\nseals &lt;- read_csv(\"arctic-seals.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): area, num_seals\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(seals, aes(bay, num_seals, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = seals, num_seals ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_seals by bay\nt = -4.2182, df = 638, p-value = 2.82e-05\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -1.0258729 -0.3741271\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                     5.25                      5.95 \n\n\nResponse:\n\nWhat should we do?\n\n\n# How to report a t test: We can reject null and conclude x bc (DF&lt; alpha, p)\n\n\n\n\n\n\n\nIndependent variable is categorical and the response is numerical\nGoal: to compare means among groups\n\n\n\n\n\nData are “normally distributed” =&gt; look at the histogram\nData are “equally varied” =&gt; standard deviations reasonably similar\nSamples are independent of one another\n\n\n\n\n\\(H_{0}\\) (null hypothesis) - The means of the populations we sampled from are all equal: \\(\\mu{1} = \\mu{2} = ... = \\mu{i}\\)\n\\(H_{a}\\) (alternative hypothesis) - The means of the populations we sampled from are not all equal\n\n\n\nWe have figured out the best option for minimizing our impact on leopard seals while keeping ourselves fed between two bays: Wilhelmina and Marguerite. But there are more bays! And ideally we would use two or more bays to spread out our fishing efforts among mulitple humped rock cod populations.\nOur team has collected similar data, as we had for Wilhelmina and Marguerite, on four more bays: Emperor, Hope, Sil\nWe are going to examine the fish populations in class, and you will work with the leopard seals for your homework.\n\nWhat is it that we want to know about these six bays? Which variable is the independent variable? Which is the dependent?\n\n\nWhat are our null and alternative hypotheses?\n\n\nRead in the data\n\n\nfishManyBays &lt;- read_csv(\"antarctic_fish_many_bays.csv\")\n\nRows: 1920 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nIt’s always a good idea to visualize your data first. This gives you some perspective on the distribution of the data. What type of data viz is best for viewing the distribution of one variable?\n\n\n\n\nggplot(data = fishManyBays, aes(x = num_fish)) + \n  geom_histogram()  +\n  facet_wrap(~ bay)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNow let’s calculate some summary statistics. What do you notice?\n\n\nfishSummary &lt;- fishManyBays %&gt;% group_by(bay) %&gt;% summarize(meanFish = mean(num_fish), standDevFish = sd(num_fish), sampleSize = n())\nfishSummary\n\n# A tibble: 6 × 4\n  bay         meanFish standDevFish sampleSize\n  &lt;chr&gt;          &lt;dbl&gt;        &lt;dbl&gt;      &lt;int&gt;\n1 Emporer         2.59         1.09        320\n2 Hope            4.15         1.62        320\n3 Iceberg         3.92         1.41        320\n4 Marguarite      3.92         1.86        320\n5 Sulzberger      5.16         2.74        320\n6 Wilhelmenia     4.19         1.87        320\n\n\n\nLet’s create a bar graph to compare the summary stats between the groups. Does it seem like the groups are different?\n\n\nggplot(data = fishSummary, aes(bay, meanFish, fill = bay)) + \n  geom_bar(stat = \"identity\") +\n    geom_errorbar( aes(ymin = meanFish-standDevFish, ymax = meanFish + standDevFish), \n                 data = fishSummary, width = 0.2)  +\n  xlab(\"Bay Name\") +\n  ylab(\"Mean Number of Fish\") +\n  ggtitle(\"Mean number of fish per bay\")\n\n\n\n\n\n\n\n\n\nFinally, let’s code for the ANOVA. The syntax is dependent variable ~ independent variable\n\n\nfishModel &lt;- aov(data = fishManyBays, num_fish ~ bay)\nsummary(fishModel)\n\n              Df Sum Sq Mean Sq F value Pr(&gt;F)    \nbay            5   1094  218.71   64.88 &lt;2e-16 ***\nResiduals   1914   6452    3.37                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nHow do we interpret this ANOVA?\n\n\nWhat is our recommendation for fishing based only off of this information?\n\nANOVAs are incredibly useful to tell you if there is a difference in the means of any of the groups. However, they do not tell you which means differ from another. To do that, you need to use a class of tests called Post Hoc Tests. Post hoc tests take into account the problem of running multiple pairwise comparisons, which is the increasing chance of error rates. The most common is Tukey’s HSD, but there are others depending on the specifics of your data set. You don’t need to worry about understanding Tukey’s test, but here I am going to show you how it works and an overview of the interpretation of it.\n\nTukeyHSD(fishModel)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = num_fish ~ bay, data = fishManyBays)\n\n$bay\n                                diff        lwr        upr     p adj\nHope-Emporer            1.562500e+00  1.1484366  1.9765634 0.0000000\nIceberg-Emporer         1.337500e+00  0.9234366  1.7515634 0.0000000\nMarguarite-Emporer      1.337500e+00  0.9234366  1.7515634 0.0000000\nSulzberger-Emporer      2.575000e+00  2.1609366  2.9890634 0.0000000\nWilhelmenia-Emporer     1.606250e+00  1.1921866  2.0203134 0.0000000\nIceberg-Hope           -2.250000e-01 -0.6390634  0.1890634 0.6316815\nMarguarite-Hope        -2.250000e-01 -0.6390634  0.1890634 0.6316815\nSulzberger-Hope         1.012500e+00  0.5984366  1.4265634 0.0000000\nWilhelmenia-Hope        4.375000e-02 -0.3703134  0.4578134 0.9996682\nMarguarite-Iceberg      4.440892e-16 -0.4140634  0.4140634 1.0000000\nSulzberger-Iceberg      1.237500e+00  0.8234366  1.6515634 0.0000000\nWilhelmenia-Iceberg     2.687500e-01 -0.1453134  0.6828134 0.4328039\nSulzberger-Marguarite   1.237500e+00  0.8234366  1.6515634 0.0000000\nWilhelmenia-Marguarite  2.687500e-01 -0.1453134  0.6828134 0.4328039\nWilhelmenia-Sulzberger -9.687500e-01 -1.3828134 -0.5546866 0.0000000\n\n\nMaking a boxplot w/ tukey’s results posted\n\n# install.packages(\"multcompView\")\nlibrary(\"multcompView\")\n\ngenerate_label_df &lt;- function(TUKEY, variable){\n\n  # Extract labels and factor levels from Tukey post-hoc \n  Tukey.levels &lt;- TUKEY[[variable]][,4]\n  Tukey.labels &lt;- data.frame(multcompLetters(Tukey.levels)['Letters'])\n\n  #I need to put the labels in the same order as in the boxplot :\n  Tukey.labels$treatment=rownames(Tukey.labels)\n  Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]\n  return(Tukey.labels)\n}\n\nfishManyBays &lt;- fishManyBays %&gt;% select(num_fish, bay)\n\nmodel=lm(fishManyBays$num_fish ~ fishManyBays$bay)\nANOVA=aov(model)\n\n# Tukey test to study each pair of treatment :\nTUKEY &lt;- TukeyHSD(x=ANOVA, 'fishManyBays$bay', conf.level=0.95)\n\nlabels&lt;-generate_label_df(TUKEY , \"fishManyBays$bay\")  #generate labels using function\n\nnames(labels)&lt;-c('Letters','bay')#rename columns for merging\n\nyvalue&lt;-aggregate(.~ bay, data=fishManyBays, mean) # obtain letter position for y axis using means\n\nfinal&lt;-merge(labels, yvalue) #merge dataframes\n\nggplot(fishManyBays, aes(x = bay, y = num_fish, fill = bay)) +\n  geom_blank() +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  labs(x = 'Bay', y = 'Number of Fish') +\n  ggtitle(\"Differences in the number of fish by bay from Tukey's HSD\")+\n  theme(plot.title = element_text(hjust = 0.5, face='bold')) +\n  geom_boxplot(stat = \"boxplot\") +\n  geom_text(data = final, aes(x = bay, y = num_fish, label = Letters) ,vjust=-3.5,hjust=-.5) +\n  theme(plot.title = element_text(vjust=-0.6))\n\n\n\n\n\n\n\n\nWant to nerd out about ANOVAs? I recommend Bio statistical Design and Analysis Using R: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99900585075901844 (p254) A Primer of Ecological Statistics: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99141374340101844"
  },
  {
    "objectID": "modules/module_3/week9/ANOVA-Code-Along_Key.html#wrapping-up-t-tests",
    "href": "modules/module_3/week9/ANOVA-Code-Along_Key.html#wrapping-up-t-tests",
    "title": "Module 3: ANOVA",
    "section": "",
    "text": "Last week we used t-tests to think about which bay we should go fishing to minimize our impact on leopard seals.\n\nAre the bays equal in their fish populations?\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nfish &lt;- read_csv(\"arctic-fish.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(fish, aes(bay, num_fish, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = fish, num_fish ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_fish by bay\nt = -1.7366, df = 630.63, p-value = 0.08295\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -0.54602183  0.03352183\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                  3.90625                   4.16250 \n\n\nResponse:\n\nAre the bays equal in their leopard seal populations?\n\n\nseals &lt;- read_csv(\"arctic-seals.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): area, num_seals\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(seals, aes(bay, num_seals, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = seals, num_seals ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_seals by bay\nt = -4.2182, df = 638, p-value = 2.82e-05\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -1.0258729 -0.3741271\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                     5.25                      5.95 \n\n\nResponse:\n\nWhat should we do?\n\n\n# How to report a t test: We can reject null and conclude x bc (DF&lt; alpha, p)\n\n\n\n\n\n\n\nIndependent variable is categorical and the response is numerical\nGoal: to compare means among groups\n\n\n\n\n\nData are “normally distributed” =&gt; look at the histogram\nData are “equally varied” =&gt; standard deviations reasonably similar\nSamples are independent of one another\n\n\n\n\n\\(H_{0}\\) (null hypothesis) - The means of the populations we sampled from are all equal: \\(\\mu{1} = \\mu{2} = ... = \\mu{i}\\)\n\\(H_{a}\\) (alternative hypothesis) - The means of the populations we sampled from are not all equal\n\n\n\nWe have figured out the best option for minimizing our impact on leopard seals while keeping ourselves fed between two bays: Wilhelmina and Marguerite. But there are more bays! And ideally we would use two or more bays to spread out our fishing efforts among mulitple humped rock cod populations.\nOur team has collected similar data, as we had for Wilhelmina and Marguerite, on four more bays: Emperor, Hope, Sil\nWe are going to examine the fish populations in class, and you will work with the leopard seals for your homework.\n\nWhat is it that we want to know about these six bays? Which variable is the independent variable? Which is the dependent?\n\n\nWhat are our null and alternative hypotheses?\n\n\nRead in the data\n\n\nfishManyBays &lt;- read_csv(\"antarctic_fish_many_bays.csv\")\n\nRows: 1920 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nIt’s always a good idea to visualize your data first. This gives you some perspective on the distribution of the data. What type of data viz is best for viewing the distribution of one variable?\n\n\n\n\nggplot(data = fishManyBays, aes(x = num_fish)) + \n  geom_histogram()  +\n  facet_wrap(~ bay)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNow let’s calculate some summary statistics. What do you notice?\n\n\nfishSummary &lt;- fishManyBays %&gt;% group_by(bay) %&gt;% summarize(meanFish = mean(num_fish), standDevFish = sd(num_fish), sampleSize = n())\nfishSummary\n\n# A tibble: 6 × 4\n  bay         meanFish standDevFish sampleSize\n  &lt;chr&gt;          &lt;dbl&gt;        &lt;dbl&gt;      &lt;int&gt;\n1 Emporer         2.59         1.09        320\n2 Hope            4.15         1.62        320\n3 Iceberg         3.92         1.41        320\n4 Marguarite      3.92         1.86        320\n5 Sulzberger      5.16         2.74        320\n6 Wilhelmenia     4.19         1.87        320\n\n\n\nLet’s create a bar graph to compare the summary stats between the groups. Does it seem like the groups are different?\n\n\nggplot(data = fishSummary, aes(bay, meanFish, fill = bay)) + \n  geom_bar(stat = \"identity\") +\n    geom_errorbar( aes(ymin = meanFish-standDevFish, ymax = meanFish + standDevFish), \n                 data = fishSummary, width = 0.2)  +\n  xlab(\"Bay Name\") +\n  ylab(\"Mean Number of Fish\") +\n  ggtitle(\"Mean number of fish per bay\")\n\n\n\n\n\n\n\n\n\nFinally, let’s code for the ANOVA. The syntax is dependent variable ~ independent variable\n\n\nfishModel &lt;- aov(data = fishManyBays, num_fish ~ bay)\nsummary(fishModel)\n\n              Df Sum Sq Mean Sq F value Pr(&gt;F)    \nbay            5   1094  218.71   64.88 &lt;2e-16 ***\nResiduals   1914   6452    3.37                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nHow do we interpret this ANOVA?\n\n\nWhat is our recommendation for fishing based only off of this information?\n\nANOVAs are incredibly useful to tell you if there is a difference in the means of any of the groups. However, they do not tell you which means differ from another. To do that, you need to use a class of tests called Post Hoc Tests. Post hoc tests take into account the problem of running multiple pairwise comparisons, which is the increasing chance of error rates. The most common is Tukey’s HSD, but there are others depending on the specifics of your data set. You don’t need to worry about understanding Tukey’s test, but here I am going to show you how it works and an overview of the interpretation of it.\n\nTukeyHSD(fishModel)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = num_fish ~ bay, data = fishManyBays)\n\n$bay\n                                diff        lwr        upr     p adj\nHope-Emporer            1.562500e+00  1.1484366  1.9765634 0.0000000\nIceberg-Emporer         1.337500e+00  0.9234366  1.7515634 0.0000000\nMarguarite-Emporer      1.337500e+00  0.9234366  1.7515634 0.0000000\nSulzberger-Emporer      2.575000e+00  2.1609366  2.9890634 0.0000000\nWilhelmenia-Emporer     1.606250e+00  1.1921866  2.0203134 0.0000000\nIceberg-Hope           -2.250000e-01 -0.6390634  0.1890634 0.6316815\nMarguarite-Hope        -2.250000e-01 -0.6390634  0.1890634 0.6316815\nSulzberger-Hope         1.012500e+00  0.5984366  1.4265634 0.0000000\nWilhelmenia-Hope        4.375000e-02 -0.3703134  0.4578134 0.9996682\nMarguarite-Iceberg      4.440892e-16 -0.4140634  0.4140634 1.0000000\nSulzberger-Iceberg      1.237500e+00  0.8234366  1.6515634 0.0000000\nWilhelmenia-Iceberg     2.687500e-01 -0.1453134  0.6828134 0.4328039\nSulzberger-Marguarite   1.237500e+00  0.8234366  1.6515634 0.0000000\nWilhelmenia-Marguarite  2.687500e-01 -0.1453134  0.6828134 0.4328039\nWilhelmenia-Sulzberger -9.687500e-01 -1.3828134 -0.5546866 0.0000000\n\n\nMaking a boxplot w/ tukey’s results posted\n\n# install.packages(\"multcompView\")\nlibrary(\"multcompView\")\n\ngenerate_label_df &lt;- function(TUKEY, variable){\n\n  # Extract labels and factor levels from Tukey post-hoc \n  Tukey.levels &lt;- TUKEY[[variable]][,4]\n  Tukey.labels &lt;- data.frame(multcompLetters(Tukey.levels)['Letters'])\n\n  #I need to put the labels in the same order as in the boxplot :\n  Tukey.labels$treatment=rownames(Tukey.labels)\n  Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]\n  return(Tukey.labels)\n}\n\nfishManyBays &lt;- fishManyBays %&gt;% select(num_fish, bay)\n\nmodel=lm(fishManyBays$num_fish ~ fishManyBays$bay)\nANOVA=aov(model)\n\n# Tukey test to study each pair of treatment :\nTUKEY &lt;- TukeyHSD(x=ANOVA, 'fishManyBays$bay', conf.level=0.95)\n\nlabels&lt;-generate_label_df(TUKEY , \"fishManyBays$bay\")  #generate labels using function\n\nnames(labels)&lt;-c('Letters','bay')#rename columns for merging\n\nyvalue&lt;-aggregate(.~ bay, data=fishManyBays, mean) # obtain letter position for y axis using means\n\nfinal&lt;-merge(labels, yvalue) #merge dataframes\n\nggplot(fishManyBays, aes(x = bay, y = num_fish, fill = bay)) +\n  geom_blank() +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  labs(x = 'Bay', y = 'Number of Fish') +\n  ggtitle(\"Differences in the number of fish by bay from Tukey's HSD\")+\n  theme(plot.title = element_text(hjust = 0.5, face='bold')) +\n  geom_boxplot(stat = \"boxplot\") +\n  geom_text(data = final, aes(x = bay, y = num_fish, label = Letters) ,vjust=-3.5,hjust=-.5) +\n  theme(plot.title = element_text(vjust=-0.6))\n\n\n\n\n\n\n\n\nWant to nerd out about ANOVAs? I recommend Bio statistical Design and Analysis Using R: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99900585075901844 (p254) A Primer of Ecological Statistics: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99141374340101844"
  },
  {
    "objectID": "modules/module_3/week9/ANOVA-seal-homework.html",
    "href": "modules/module_3/week9/ANOVA-seal-homework.html",
    "title": "Module 3: ANOVA",
    "section": "",
    "text": "Your name:\nDate:\nMain Question: We want to know if the population of leopard seals differs between the bays.\n\nTo answer this question, which variable in the data set is the independent variable? Which is the dependent? Which variable is categorical? Which variable is numeric? (4pts)\n\n\n# independent is\n\n# dependent is\n\n# categorical is\n\n# numerical is \n\n\nWhat are our null and alternative hypotheses? (2pts)\n\n\n# Null: \n\n# Alternative: \n\n\nLoad tidyverse and read in the data, called “antarctic_seals_many_bays.csv” (2pts)\n\n\nCreate a histogram of the number of seals to see the distribution. Use facet_wrap(~ bay) to create 6 histograms, one for each bay. (2pts)\n\n\nNow let’s calculate some summary statistics of the number of leopard seals per bay (mean and standard deviation). Which bay has the highest average of seals? Which bay has the lowest average? (4pts)\n\n\n# summary stats\n\n\n# bay with lowest mean number of seals:\n# bay with the greatest mean number of seals: \n\n\nRun an ANOVA to test if the mean number of seals varies between the bays. (1pts)\n\n\nInterpret the ANOVA table you just created: What is the p-value? What is the F-value? What is our critical p-value we have been using in this class (called the alpha level)? Do you accept or reject the null hypothesis? What does that mean, specifically for comparing the means of the data (you should reference “bay” and “population” in your answer? (5pts)\n\n\n# p-value from ANOVA table:\n# F-value from ANOVA table:\n# Critical p-value (alpha level):\n# Do you accept or reject the null?\n# What it means:"
  },
  {
    "objectID": "modules/module_3/module_3.1/homework-3.1.html",
    "href": "modules/module_3/module_3.1/homework-3.1.html",
    "title": "Homework 3.1",
    "section": "",
    "text": "Q1. (2 points) Describe null and alternative hypotheses for:\n\nThe difference in means of seal count in Wilhelmenia vs. Marguarite bay\nthe difference in means of fish count in Wilhelmenia vs. Marguarite bay\n\nQ2. (2 points) Generate helpful visualizations and descriptive statistics for the above data\nQ3. (4 points) Perform t-tests to evaluate your hypotheses, and interpret the results. Reject the null hypothesis if p&lt;0.05.\n\nAnswers\nQ1.\n\\(H_{0}\\):\n\\(H_{a}\\):\nQ2.\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nQ3."
  },
  {
    "objectID": "modules/module_3/module_3.1/code-a-long-3.1.html",
    "href": "modules/module_3/module_3.1/code-a-long-3.1.html",
    "title": "Code-a-long 3.1 - Statistical inference and two sample t-tests",
    "section": "",
    "text": "Student learning outcomes\n\nStudents will understand basic concepts underlying inference\nStudents will be able to formulate statistical hypotheses using data\nStudents will be able to perform and interpret the results of two sample t-tests\n\n\n\nSome review on t-tests and statistical hypotheses\nA two sample t-test is a way of evaluating if the means of two populations are different, given our samples of those populations.\nA t-test relies on the calculate a t-score. This quantity depends on our sample mean, our sample standard deviation, and the size of our sample.\nThe formula of the t-score for a two sample t-test:\n\\[t = \\frac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{\\frac{s_1^2}{n_1}+\\frac{s_2^2}{n_{2}}}}\\]\nThe primary output of a t-test is a p-value. A p value represents the probability that the difference between our sample means would have occurred by chance.\nWe can use this p-value to assess a statistical hypothesis.\nStatistical hypotheses are formulated as a null and an alternative hypotheses:\n\\(H_{0}\\) (null hypothesis) - There is no difference in the means of the populations we sampled from\n\\(H_{a}\\) (alternative hypothesis) - The means of the populations we sampled from are different\nAgain, our p-value is the decimal probability that our data occurred by chance. For instance, a p-value of 0.05 would mean there is a 5% probability that the null hypothesis is true, given our observations.\n\n\nSick fish example\nRecall that there seemed to be a difference in the proportion of sick fish in a tank, when the tank was above or below a critical temperature value.\nAt the time, we just compared means and visualized the data, but that isn’t very statistically rigorous.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nSo, lets validate our results using a t-test.\n\n\nFishing and leopard seals\nAs you are well aware by now, our main source of food (fish) has been compromised. Rather than starve or leave, we decide to source our fish from waters of Antarctica.\nThe problem is, the places we’d fish are also foraging grounds for leopard seals. To minimize the impact of our fishing on the seal population, we’d like to know where and when the presence of fish/seals are greater.\nLuckily, we’ve been collecting relevant data for awhile. We have: radio tags on seals, and the number of seals at a given location. We also net traps to count humped rockcod, our shared food source.\n \n\n\nData exploration\nLet’s take a look at our new data. Because we have two different collection schemes, our data are separated in to two data frames (and files).\n\n\nGroup Brainstorm\n\nWe’d like to know if seal and fish counts are different during times of day observed.\nBased on our goals, what quantities do we want to compare?\nCreate null and alternative hypotheses to evaluate our data\nH0: no difference between the mean count of fish between the times of day\nHa: there is a difference\n\n\n\n\nVisualization and descriptive statistics\nGenerate descriptive statistics from our data, and visualize the data.\n\n\nPerforming our tests\n\nPerform a t-test to evaluate our hypothesis\nInterpret the results using the p-value"
  },
  {
    "objectID": "modules/module_4/week 11/regression-code-along.html",
    "href": "modules/module_4/week 11/regression-code-along.html",
    "title": "Regression Code Along",
    "section": "",
    "text": "Statistical inference and regression analyses\n\nSetting up the scenario\nWe want to build a road to our fishing site, while minimizing our impact on the delicate antarctic ecosystem. For today’s lesson, we are going to focus on antarctic hairgrass, one of only two flowering species of plants on the continent.\nhttps://www.researchgate.net/figure/Morphology-of-Antarctic-hair-grass-Deschampsia-antarctica-a-A-small-cluster-of-D_fig1_304660866\n\n\n\nHairgrass plant and flowering structures\n\n\nWe want to know what environmental conditions are associated with hairgrass, so we can build a road where those conditions are not. It would take far too long to survey every square inch of land between our base and our fishing spot, so we are going to build a model based on some samples of where hairgrass is found to predict where else it might be.\nWe collected data for one month on key components of the hairgrass’ environment\n\nsoil pH : most plants prefer mildly acidic to neutral environments\nnitrogen content (as percentage per 100 mL soil sample) : important for plant growth and tissue building\nphosphorous content (as percentage per 100 mL soil sample) : important for plant growth and tissue building\npercent soil rock : rockiness of soil impacts water drainage and temperature\nmax windpseed knots : extreme wind can pose a challenge to plants of all types\naverage UV index : plants can get sunburned too\naverage summer temperature\naverage winter temperature\npenguin density within 100 m : the number of penguins per 5 m sq within 100 m of the sample quadrant for hairgrass\nhairgrass density (measured as number of individual clumps of hairgrass within 1 square meter)\n\n(This data is based on this article: I.Yu. Parnikoza, N.Yu. Miryuta, D.N. Maidanyuk, S.A. Loparev, S.G. Korsun, I.G. Budzanivska, T.P. Shevchenko, V.P. Polischuk, V.A. Kunakh, I.A. Kozeretska, Habitat and leaf cytogenetic characteristics of Deschampsia antarctica Desv. in the Maritime Antarctica, Polar Science, Volume 1, Issues 2–4, 2007, Pages 121-128, ISSN 1873-9652, https://doi.org/10.1016/j.polar.2007.10.002.)\n\n\nExploring and analyzing our first variables of interest\nThere are many environmental conditions that may be associated with hairgrass density. For today’s code along, we are going to focus on two: soil pH and nitrogen content.\nLet’s look at nitrogen content first.\nWe always should start with a data visualization and some descriptive statistics.\n\n# load in the tidyverse\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# load in the data\nhairgrass &lt;- read_csv(\"hairgrass_data.csv\")\n\nRows: 480 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl  (11): location_ID, soil_pH, p_content, percent_soil_rock, max_windspeed...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNow let’s actually calculate the correlation coefficient, r. As a reminder, the correlation coefficient is a number between -1 and 1 that kooks at the relationship between two numeric variables. The greater the magnitude of the correlation coefficient, the stronger the correlation (All the points fall exactly on the line of best fit if r = 1 or -1).\nWe often think about the correlation in terms of r-squared. All we have to do is square the value we calculated above. How do we interpret r-squared for this relationship?\nAdding our line of best fit to the data\nIf we want to add statistical rigor, we need to use regression analysis. A regression analysis approximates the relationship between a dependent variable and one or more independent variables and evaluates the strength of that relationship (giving us a p-value).\nWe will use linear regressions in this unit. This simply means that the model will take the form of y = ax + b, where y is the dependent variable, x is the dependent variable, a is the slope, and b is the y-intercept.\nWhat would the model for our question about nitrogen content be? (it’s okay that we haven’t yet calculated the values)\nWhat is the null hypothesis? What is the alternative hypothesis?\nR can actually calculate what this model would be for us. The formula for the line of best fit (y = mx+b) aims to minimize the distance between each observation (point) and the line. What is the model?\nSo what can we conclude about soil pH and hairgrass density?\n----------------------------------------------------------------------------------------\nMoving on to soil pH\nData visualization, with the line of best fit, and summary statistics for soil pH\nWhat is the correlation coefficient?\nWhat is the model for our question about soil pH, without values?\nCreate the model in R and calculate the values for a and b.\nAt alpha = 0.05, what do we conclude about the relationship between soil pH and hairgrass density and why?\nWhat does this mean for the road we are building?"
  },
  {
    "objectID": "modules/module_4/week 11/regression-homework-key.html",
    "href": "modules/module_4/week 11/regression-homework-key.html",
    "title": "Regression Homework",
    "section": "",
    "text": "Statistical inference and regression analyses homework\n\nYour name:\n\n\nDate:\nScore out of 20 points:\n\n\nThe assignment\nIn this homework, you are going to look at the relationship between hairgrass density and another variable, the average summer temperature. The sites we sampled were along a gradient of summer temperatures, but we don’t know if that is at all related to the growth of the hairgrass.\n\nFirst load the tidyverse and read in the data. (1 pts)\n\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nhairgrass &lt;- read_csv(\"hairgrass_data.csv\")\n\nRows: 480 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl  (11): location_ID, soil_pH, p_content, percent_soil_rock, max_windspeed...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nCalculate descriptive statistics for the temperature (mean and standard deviation). As a reminder, this should NOT be grouped by another categorical variable (our data set doesn’t even have categorical variables) (2pts)\n\n\nhairgrass %&gt;% summarize(mean(avg_summer_temp), sd(avg_summer_temp))\n\n# A tibble: 1 × 2\n  `mean(avg_summer_temp)` `sd(avg_summer_temp)`\n                    &lt;dbl&gt;                 &lt;dbl&gt;\n1                    15.0                  1.01\n\n\n\nCreate a scatter plot of hairgrass density and average summer temperature. Think carefully about which variable is the independent (x axis) and which is the dependent (y axis). Give your plot a title. hint: ggtitle(“title here”) Write a few sentences about what you think the relationship between hairgrass density and avg summer temperature is (is it related at all? are they positively related? negatively related?) (4 pts)\n\n\nhairgrass %&gt;% \n  ggplot(aes(x = avg_summer_temp, y = hairgrass_density_per_m2)) +\n  geom_point() +\n  ggtitle(\"There seems to be a relationship between the hairgrass density and the average summer temp\")\n\n\n\n\n\n\n\n# I think there is a positive relationship. As temp increases, so does hairgrass density (anything is fine as long as they give some thought)\n\n\nCalculate the correlation coefficient, r. Calculate r-squared. Interpret what r squared means for this relationship. (3pts)\n\n\nr &lt;- cor(y = hairgrass$hairgrass_density_per_m2, x = hairgrass$avg_summer_temp)\nr^2 \n\n[1] 0.3988874\n\n# This means that 40% of the variation in hairgrass density can be explained by variation in the average summer temperature.\n\n\nWhat would the model for hairgrass density and summer temperature be? (Write it without the numbers for the coefficients) (1 pt)\n\n\n# hairgrass density = a * avg_summer_temp + b\n\n\nWhat are the null and alternative hypothesis regarding the relationship between these two variables? (2 pts)\n\n\n# null: There is no relationship between hairgrass density and avg_summer_temp\n# alt: There is a relationship between hairgrass density and avg_summer_temp\n\n\nCreate the model in R and obtain the summary of it. What is the model? What is the p-value associated with the F-statistic? Do we accept or reject the null hypothesis regarding the relationship between these two variables? What can we conclude then about building a road? (5 pts)\n\n\nmod &lt;- lm(hairgrass$hairgrass_density_per_m2 ~hairgrass$avg_summer_temp)\nsummary(mod) # 1pt\n\n\nCall:\nlm(formula = hairgrass$hairgrass_density_per_m2 ~ hairgrass$avg_summer_temp)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.49670 -0.56407  0.03632  0.57001  2.63672 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)               -2.57656    0.56378   -4.57 6.21e-06 ***\nhairgrass$avg_summer_temp  0.66710    0.03746   17.81  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8304 on 478 degrees of freedom\nMultiple R-squared:  0.3989,    Adjusted R-squared:  0.3976 \nF-statistic: 317.2 on 1 and 478 DF,  p-value: &lt; 2.2e-16\n\n# the p-value is &lt;2.2e-16 \n# We can reject the null hypothesis\n# There is a relationship between average summer temperature and hairgrass ensity\n# Because it is a positie value, we should consider building a road in areas where it is colder where there will be less hairgrass \n\n# if they put in the wrong variables and get the incorrect model, they can still get the rest of the points as long as they interpret the one they made correctly\n\n\nCreate the scatter plot that includes the line of best fit (of which you now know the formula for)! (2 pts)\n\n\nhairgrass %&gt;% \n  ggplot(aes(x = avg_summer_temp, y = hairgrass_density_per_m2)) +\n  geom_point() +\n  ggtitle(\"There seems to be a relationship between the hairgrass density and the average summer temp\") +\n  geom_smooth(method = \"lm\") +\n  ylab(bquote('Hairgrass density ' (individuals / m^2))) +\n  xlab(\"Average Summer Temperature (C)\") +\n  ggtitle(\"Summer temperature and hairgrass density\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "modules/module_4/week 12/regression-code-along-continued.html",
    "href": "modules/module_4/week 12/regression-code-along-continued.html",
    "title": "Regression Code Along",
    "section": "",
    "text": "Regression Analyses Continued\nWe are going to continue figuring out what environmental parameters are important for the hairgrass (the really awesome vascular plant in the arctic). Last week, we found that hairgrass density was significantly positively correlated with nitrogen content and the average summer temperature. This week, we will explore the other variables in the data set. Each of you will be assigned one variable, and will work in teams. Each person needs to turn in a completed copy of this assignment.\nThe remaining variables are\n\nphosphorous content\npercentage of soil that is rock\nmonthly maximum wind speed in knots\naverage UV index\naverage winter temperature (C)\npenguin density (per 5 sq m within 100 m of the hairgrass quadrants)\n\nWrite your variable here:\nPlease fill out the slide deck below in your group.\n11:30 Class https://docs.google.com/presentation/d/1X9qGtxDMBo4eRk2SY_ogTLZjY6NoxAhbtb4SE3QZKag/edit#slide=id.p\n1:50 Class https://docs.google.com/presentation/d/1EZ9Z1XhR_NMnc1xMuEtOlUuuYi-8gPr52a4bdM8D8IE/edit#slide=id.p\nAs a reminder, you can always look back on past assignments or at the Coding cheat sheet https://docs.google.com/document/d/1CJQdSOXL0gkSZ1Y0h-xR8-fJn0twbglAUpNy8cm-SBQ/edit for reference.\nLoad the tidyverse and read in your data\n\nCreate a scatter plot with the line of best fit for hairgrass density and your variable. Be sure to add a title and label the axes with units.\n\n\nCreate a linear regression with hairgrass density and your variable. What is the null hypothesis?\n\n\nWhat is the formula for the line of best fit?\n\n\nIs your variable significant in predicting hairgrass density? (Is the p-value associated with the F-stat significant at alpha = 0.05?)\n\nHave one person working on this variable upload the results into the slide deck.\nEach person turn in this .Rmd file to moodle during class."
  },
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules",
    "section": "",
    "text": "Week Overviews\n  \n    Week 1: Introduction to Course – meet the team, understand the mission.\n    Weeks 2–4: We're in Antarctica!\n    Practice:\n    \n      Exploring and summarizing data about our new colleagues\n      Exploring weather station data\n      Learning R and RStudio, basic data manipulation\n    \n  \n\n\n\n  Antarctica Narrative\n  \n    We start en route to Antarctica! Students took a survey to get to know teammates and pick a mascot.\n    We study weather data from Antarctic research stations and use the Palmer Penguin dataset for practice.\n  \n\n\n\n\n\n  Concepts\n  \n    \n      What is data science and how does it interact with daily life?\n      What is RStudio and how to navigate it\n      Assigning variables\n    \n  \n\n\n\n  Week Schedule\n  \n    \n      🗓️ Day 1: Welcome! Survey completed. Data to be used in Week 2.\n      Day 2: Discussion on data science and society; reflection prompt.\n      Day 3: Used welcome.Rmd in class for basic RStudio, arithmetic, and variable assignment.\n    \n  \n\n\n\n\n\n\n  Concepts\n  \n    \n      Assigning variables\n      Creating vectors\n      Functions & arguments\n      Loading data from CSV\n      Creating vectors from data columns\n      Calculating mean, median, standard deviation\n    \n  \n\n\n\n  Week Schedule\n  \n    \n      Day 1: Labor Day – No class\n      Day 2: Code-along with introToR.Rmd. Topics: variables, camel case, loading data, central tendency.\n        Homework: problemSet1.Rmd\n      Day 3: Group work on penguinPractice1.Rmd in Watzek Library – great collaboration!\n    \n  \n\n\n\n  Description\n  \n    Short week due to Labor Day. Code-along and group practice helped reinforce new skills.",
    "crumbs": [
      "Modules"
    ]
  },
  {
    "objectID": "modules.html#module-1",
    "href": "modules.html#module-1",
    "title": "Modules",
    "section": "",
    "text": "Week Overviews\n  \n    Week 1: Introduction to Course – meet the team, understand the mission.\n    Weeks 2–4: We're in Antarctica!\n    Practice:\n    \n      Exploring and summarizing data about our new colleagues\n      Exploring weather station data\n      Learning R and RStudio, basic data manipulation\n    \n  \n\n\n\n  Antarctica Narrative\n  \n    We start en route to Antarctica! Students took a survey to get to know teammates and pick a mascot.\n    We study weather data from Antarctic research stations and use the Palmer Penguin dataset for practice.\n  \n\n\n\n\n\n  Concepts\n  \n    \n      What is data science and how does it interact with daily life?\n      What is RStudio and how to navigate it\n      Assigning variables\n    \n  \n\n\n\n  Week Schedule\n  \n    \n      🗓️ Day 1: Welcome! Survey completed. Data to be used in Week 2.\n      Day 2: Discussion on data science and society; reflection prompt.\n      Day 3: Used welcome.Rmd in class for basic RStudio, arithmetic, and variable assignment.\n    \n  \n\n\n\n\n\n\n  Concepts\n  \n    \n      Assigning variables\n      Creating vectors\n      Functions & arguments\n      Loading data from CSV\n      Creating vectors from data columns\n      Calculating mean, median, standard deviation\n    \n  \n\n\n\n  Week Schedule\n  \n    \n      Day 1: Labor Day – No class\n      Day 2: Code-along with introToR.Rmd. Topics: variables, camel case, loading data, central tendency.\n        Homework: problemSet1.Rmd\n      Day 3: Group work on penguinPractice1.Rmd in Watzek Library – great collaboration!\n    \n  \n\n\n\n  Description\n  \n    Short week due to Labor Day. Code-along and group practice helped reinforce new skills.",
    "crumbs": [
      "Modules"
    ]
  },
  {
    "objectID": "modules/module_4/week 11/regression-homework.html",
    "href": "modules/module_4/week 11/regression-homework.html",
    "title": "Regression Homework",
    "section": "",
    "text": "Statistical inference and regression analyses homework\n\nYour name:\n\n\nDate:\nScore out of 20 points:\n\n\nThe assignment\nIn this homework, you are going to look at the relationship between hairgrass density and another variable, the average summer temperature. The sites we sampled were along a gradient of summer temperatures, but we don’t know if that is at all related to the growth of the hairgrass.\n\nFirst load the tidyverse and read in the data. (1 pts)\n\n\nCalculate descriptive statistics for the temperature (mean and standard deviation). As a reminder, this should NOT be grouped by another categorical variable (our data set doesn’t even have categorical variables) (2pts)\n\n\nCreate a scatter plot of hairgrass density and average summer temperature. Think carefully about which variable is the independent (x axis) and which is the dependent (y axis). Give your plot a title. hint: ggtitle(“title here”) Write a few sentences about what you think the relationship between hairgrass density and avg summer temperature is (is it related at all? are they positively related? negatively related?) (4 pts)\n\n\nCalculate the correlation coefficient, r. Calculate r-squared. Interpret what r squared means for this relationship. (3pts)\n\n\nWhat would the model for hairgrass density and summer temperature be? (Write it without the numbers for the coefficients) (1 pt)\n\n\nWhat are the null and alternative hypothesis regarding the relationship between these two variables? (2 pts)\n\n\nCreate the model in R and obtain the summary of it. What is the model? What is the p-value associated with the F-statistic? Do we accept or reject the null hypothesis regarding the relationship between these two variables? What can we conclude then about building a road? (5 pts)\n\n\nCreate the scatter plot that includes the line of best fit (of which you now know the formula for)! (2 pts)\n\nREMEMBER TO SAVE THIS FILE BEFORE YOU EXPORT IT"
  },
  {
    "objectID": "modules/module_4/week 11/regression-code-along-key.html",
    "href": "modules/module_4/week 11/regression-code-along-key.html",
    "title": "Regression Code Along",
    "section": "",
    "text": "Statistical inference and regression analyses\n\nSetting up the scenario\nWe want to build a road to our fishing site, while minimizing our impact on the delicate antarctic ecosystem. For today’s lesson, we are going to focus on antarctic hairgrass, one of only two flowering species of plants on the continent.\nhttps://www.researchgate.net/figure/Morphology-of-Antarctic-hair-grass-Deschampsia-antarctica-a-A-small-cluster-of-D_fig1_304660866\n\n\n\nHairgrass plant and flowering structures\n\n\nWe want to know what environmental conditions are associated with hairgrass, so we can build a road where those conditions are not. It would take far too long to survey every square inch of land between our base and our fishing spot, so we are going to build a model based on some samples of where hairgrass is found to predict where else it might be.\nWe collected data for one month on key components of the hairgrass’ environment\n\nsoil pH : most plants prefer mildly acidic to neutral environments\nnitrogen content (as percentage per 100 mL soil sample) : important for plant growth and tissue building\nphosphorous content (as percentage per 100 mL soil sample) : important for plant growth and tissue building\npercent soil rock : rockiness of soil impacts water drainage and temperature\nmax windpseed knots : extreme wind can pose a challenge to plants of all types\naverage UV index : plants can get sunburned too\naverage summer temperature\naverage winter temperature\npenguin density within 100 m : the number of penguins per 5 m sq within 100 m of the sample quadrant for hairgrass\nhairgrass density (measured as number of individual clumps of hairgrass within 1 square meter)\n\n(This data is based on this article: I.Yu. Parnikoza, N.Yu. Miryuta, D.N. Maidanyuk, S.A. Loparev, S.G. Korsun, I.G. Budzanivska, T.P. Shevchenko, V.P. Polischuk, V.A. Kunakh, I.A. Kozeretska, Habitat and leaf cytogenetic characteristics of Deschampsia antarctica Desv. in the Maritime Antarctica, Polar Science, Volume 1, Issues 2–4, 2007, Pages 121-128, ISSN 1873-9652, https://doi.org/10.1016/j.polar.2007.10.002.)\n\n\nExploring and analyzing our first variables of interest\nThere are many environmental conditions that may be associated with hairgrass density. For today’s code along, we are going to focus on two: soil pH and nitrogen content.\nLet’s look at nitrogen content first.\nWe always should start with a data visualization and some descriptive statistics.\n\n# load in the tidyverse\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# load in the data\nhairgrass &lt;- read_csv(\"hairgrass_data.csv\")\n\nRows: 480 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl  (11): location_ID, soil_pH, p_content, percent_soil_rock, max_windspeed...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# What are our independent and dependent variables?\n# What kind of variables are they?\n# What kind of viz should we do?\n\nhairgrass %&gt;% summarize(max(n_content), min(n_content), mean(n_content), sd(n_content))\n\n# A tibble: 1 × 4\n  `max(n_content)` `min(n_content)` `mean(n_content)` `sd(n_content)`\n             &lt;dbl&gt;            &lt;dbl&gt;             &lt;dbl&gt;           &lt;dbl&gt;\n1             12.6              6.2              9.93            1.02\n\n# okay cool good to know, emphasize we are not doing group by because not categorical data\n\nhairgrass %&gt;% ggplot(aes(y = hairgrass_density_per_m2, x = n_content)) +\n  geom_jitter() \n\n\n\n\n\n\n\n  # could do jitter or not, what do other people think?\n\n# do you see a pattern? Do you think these data are correlated? What do you think the correlation coefficient will be?\n\nNow let’s actually calculate the correlation coefficient, r. As a reminder, the correlation coefficient is a number between -1 and 1 that kooks at the relationship between two numeric variables. The greater the magnitude of the correlation coefficient, the stronger the correlation (All the points fall exactly on the line of best fit if r = 1 or -1).\n\nr = cor(hairgrass$hairgrass_density_per_m2, hairgrass$n_content)\n# What do we expect based on this correlation coefficient?\n\nWe often think about the correlation in terms of r-squared. All we have to do is square the value we calculated above. How do we interpret r-squared for this relationship?\n\nr^2 \n\n[1] 0.400296\n\n# Means that 40% of the variation in harigrass density can be explained by the variation in nitrogen content\n\nAdding our line of best fit to the data\n\n# is that what we expected based on that correlation coefficient? \n\nhairgrass %&gt;% ggplot(aes(y = hairgrass_density_per_m2, x = n_content)) +\n  geom_jitter() +\n  geom_smooth(method = \"lm\") +\n  ylab(bquote('Hairgrass density ' (individuals / m^2))) +\n  xlab(\"Nitrogen content (% in 100 mL sample)\") +\n  ggtitle(\"Nitrogen content and hairgrass density\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nIf we want to add statistical rigor, we need to use regression analysis. A regression analysis approximates the relationship between a dependent variable and one or more independent variables and evaluates the strength of that relationship (giving us a p-value).\nWe will use linear regressions in this unit. This simply means that the model will take the form of y = ax + b, where y is the dependent variable, x is the dependent variable, a is the slope, and b is the y-intercept.\nWhat would the model for our question about nitrogen content be? (it’s okay that we haven’t yet calculated the values)\n\n# hairgrass density = a *  n_content + b\n\nWhat is the null hypothesis? What is the alternative hypothesis?\n\n# null: There is no relationship between hairgrass density and n_content\n# alt: There is a relationship between hairgrass density and n_content\n\nR can actually calculate what this model would be for us. The formula for the line of best fit (y = mx+b) aims to minimize the distance between each observation (point) and the line. What is the model?\n\nsummary(lm(hairgrass_density_per_m2 ~ n_content, data = hairgrass))\n\n\nCall:\nlm(formula = hairgrass_density_per_m2 ~ n_content, data = hairgrass)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.82079 -0.55590 -0.02612  0.57654  2.51032 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)  0.86739    0.37000   2.344   0.0195 *  \nn_content    0.66223    0.03707  17.862   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.8294 on 478 degrees of freedom\nMultiple R-squared:  0.4003,    Adjusted R-squared:  0.399 \nF-statistic: 319.1 on 1 and 478 DF,  p-value: &lt; 2.2e-16\n\n# model: hairgrass density = 0.87 + 0.66 *n_content\n\nSo what can we conclude about soil pH and hairgrass density?\n\n# stats interpretation\n# Because the p-value associated with the F statistic was 319, we reject the null hypothesis that there is no relationship between n_content and hairgrass density. The slope of the line is unlikely to be 0.\n\n# interpretation in light of scenario: we should pay attention to n content as we build our road\n\n# REMIND everyone how to submit these words so they get counted\n\n----------------------------------------------------------------------------------------\nMoving on to soil pH\nData visualization, with the line of best fit, and summary statistics for soil pH\n\nhairgrass %&gt;% summarize(max(soil_pH), min(soil_pH), mean(soil_pH), sd(soil_pH))\n\n# A tibble: 1 × 4\n  `max(soil_pH)` `min(soil_pH)` `mean(soil_pH)` `sd(soil_pH)`\n           &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;         &lt;dbl&gt;\n1           9.37           2.44            5.55          1.30\n\n# okay cool good to know, emphasize we are not doing group by because not categorical data\n\nhairgrass %&gt;% ggplot(aes(y = hairgrass_density_per_m2, x = soil_pH)) +\n  geom_jitter() +\n  geom_smooth(method = \"lm\") +\n  ylab(bquote('Hairgrass density ' (individuals / m^2))) +\n  xlab(\"Soil pH\") +\n  ggtitle(\"soil pH and hairgrass density\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nWhat is the correlation coefficient?\n\ncor(hairgrass$hairgrass_density_per_m2, hairgrass$soil_pH)\n\n[1] 0.007200444\n\n\nWhat is the model for our question about soil pH, without values?\n\n# hairgrass density = a *  soil_pH + b\n\nCreate the model in R and calculate the values for a and b.\n\nsummary(lm(hairgrass_density_per_m2 ~ soil_pH, data = hairgrass))\n\n\nCall:\nlm(formula = hairgrass_density_per_m2 ~ soil_pH, data = hairgrass)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-3.4403 -0.4491 -0.4271  0.5631  2.5637 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 7.408859   0.214051  34.613   &lt;2e-16 ***\nsoil_pH     0.005915   0.037570   0.157    0.875    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.071 on 478 degrees of freedom\nMultiple R-squared:  5.185e-05, Adjusted R-squared:  -0.00204 \nF-statistic: 0.02478 on 1 and 478 DF,  p-value: 0.875\n\n# model: hairgrass density = 7.4 + 0.006 * soil pH\n\nAt alpha = 0.05, what do we conclude about the relationship between soil pH and hairgrass density and why?\n\n# stats interpretation\n# Because the p-value associated with the F statistic was 0.875, we accept the null hypothesis that there is no relationship between soil pH and hairgrass density. The slope of the line is likely 0.\n\n\n# REMIND everyone how to submit these words so they get counted\n\nWhat does this mean for the road we are building?\n\n# interpretation in light of scenario: we shouldn't worry about soil pH as we think about where to build our road\n\n\n hairgrass %&gt;% ggplot(aes(x= penguin_density_per_5m2_within_100m, y = n_content)) +\n  geom_jitter() +\n  geom_smooth(method = \"lm\") +\n  xlab(bquote('Penguin density ' (individuals /5 *m^2))) +\n  ylab(\"Nitrogen content (% in 100 mL sample)\") +\n  ggtitle(\"Penguin density is related to nitrogen content\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nsummary(lm(n_content ~ penguin_density_per_5m2_within_100m, data = hairgrass))\n\n\nCall:\nlm(formula = n_content ~ penguin_density_per_5m2_within_100m, \n    data = hairgrass)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.45157 -0.31911 -0.00157  0.31401  1.34843 \n\nCoefficients:\n                                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                          6.94895    0.07196   96.56   &lt;2e-16 ***\npenguin_density_per_5m2_within_100m  0.86754    0.02004   43.28   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4614 on 478 degrees of freedom\nMultiple R-squared:  0.7967,    Adjusted R-squared:  0.7963 \nF-statistic:  1873 on 1 and 478 DF,  p-value: &lt; 2.2e-16"
  },
  {
    "objectID": "modules/module_3/module_3.1/homework-3.1-key.html",
    "href": "modules/module_3/module_3.1/homework-3.1-key.html",
    "title": "Homework 3.1 Key",
    "section": "",
    "text": "Q1. (2 points) Describe null and alternative hypotheses for:\n\nThe difference in means of seal count in Wilhelmenia vs. Marguarite bay\nthe difference in means of fish count in Wilhelmenia vs. Marguarite bay\n\nQ2. (2 points) Generate helpful visualizations and descriptive statistics for the above data\nQ3. (4 points) Perform t-tests to evaluate your hypotheses, and interpret the results. Reject the null hypothesis if p&lt;0.05.\n\nAnswers\nQ1.\n\\(H_{0}\\): There is no difference in the mean seal count in Wilhelmia and Marguarite bay. There is no difference in the mean fish count in Wilhelmia and Marguarite bay.\n\\(H_{a}\\):There is a difference in the mean seal count in Wilhelmia and Marguarite bay. There is a difference in the mean fish count in Wilhelmia and Marguarite bay.\nQ2.\n\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nseals &lt;- read_csv(\"arctic-seals.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): area, num_seals\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfish &lt;- read_csv(\"arctic-fish.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# descriptive stats\nsummarySeals &lt;- seals %&gt;% group_by(bay) %&gt;% summarize(mean(num_seals), sd(num_seals))\nsummaryFish &lt;- fish %&gt;% group_by(bay) %&gt;% summarize(mean(num_fish), sd(num_fish))\n\n# data visualization: best to do a boxplot or bar chart\nsealsPlot &lt;- seals %&gt;% \n  ggplot(aes(bay, num_seals, fill= bay)) +\n  geom_boxplot() +\n  xlab(\"Bay Identity\") +\n  ylab(\"Number of Seals\")\n\nfishPlot &lt;- fish %&gt;% ggplot(aes(bay, num_fish, fill = bay)) +\n  geom_boxplot() +\n  xlab(\"Bay Identity\") +\n  ylab(\"Number of Fish\")\n\n\nsummarySeals\n\n# A tibble: 2 × 3\n  bay         `mean(num_seals)` `sd(num_seals)`\n  &lt;chr&gt;                   &lt;dbl&gt;           &lt;dbl&gt;\n1 Marguarite               5.25            2.10\n2 Wilhelmenia              5.95            2.10\n\nsummaryFish\n\n# A tibble: 2 × 3\n  bay         `mean(num_fish)` `sd(num_fish)`\n  &lt;chr&gt;                  &lt;dbl&gt;          &lt;dbl&gt;\n1 Marguarite              3.91           1.76\n2 Wilhelmenia             4.16           1.96\n\nsealsPlot\n\n\n\n\n\n\n\nfishPlot\n\n\n\n\n\n\n\n\nQ3.\n\n# t test for seals\nsealsT &lt;- t.test(data = seals, num_seals ~ bay)\nsealsT\n\n\n    Welch Two Sample t-test\n\ndata:  num_seals by bay\nt = -4.2182, df = 638, p-value = 2.82e-05\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -1.0258729 -0.3741271\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                     5.25                      5.95 \n\n# Interpretation: The p-value is 0.0000272, which is less than our alpha level of 0.05, so we can reject the null. \n# We conclude that the mean number of seals is different between Marguarite and Wilhelmia Bay\n\n# t test for fish\nfishT &lt;- t.test(data = fish, num_fish ~ bay)\nfishT\n\n\n    Welch Two Sample t-test\n\ndata:  num_fish by bay\nt = -1.7366, df = 630.63, p-value = 0.08295\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -0.54602183  0.03352183\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                  3.90625                   4.16250 \n\n# Interpretation: The p-value was 0.08, which is greater than our alpha level of 0.05, so we cannot reject the null.\n# We conclude that the mean number of fish is not different between Marguarite and Wilhelmia Bay."
  },
  {
    "objectID": "modules/module_3/module_3.1/code-a-long-3.1-key.html",
    "href": "modules/module_3/module_3.1/code-a-long-3.1-key.html",
    "title": "Code-a-long 3.1 Key - Statistical inference and two sample t-tests",
    "section": "",
    "text": "Student learning outcomes\n\nStudents will understand basic concepts underlying inference\nStudents will be able to formulate statistical hypotheses using data\nStudents will be able to perform and interpret the results of two sample t-tests\n\n\n\nSome review on t-tests and statistical hypotheses\nA two sample t-test is a way of evaluating if the means of two populations are different, given our samples of those populations.\nA t-test relies on the calculate a t-score. This quantity depends on our sample mean, our sample standard deviation, and the size of our sample.\nThe formula of the t-score for a two sample t-test:\n\\[t = \\frac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{\\frac{s_1^2}{n_1}+\\frac{s_2^2}{n_{2}}}}\\]\nThe primary output of a t-test is a p-value. A p value represents the probability that the difference between our sample means would have occurred by chance.\nWe can use this p-value to assess a statistical hypothesis.\nStatistical hypotheses are formulated as a null and an alternative hypotheses:\n\\(H_{0}\\) (null hypothesis) - There is no difference in the means of the populations we sampled from\n\\(H_{a}\\) (alternative hypothesis) - The means of the populations we sampled from are different\nAgain, our p-value is the decimal probability that our data occurred by chance. For instance, a p-value of 0.05 would mean there is a 5% probability that the null hypothesis is true, given our observations.\n\n\nSick fish example\nRecall that there seemed to be a difference in the proportion of sick fish in a tank, when the tank was above or below a critical temperature value.\nAt the time, we just compared means and visualized the data, but that isn’t very statistically rigorous.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nsick_data &lt;- read_csv(\"sick-fish.csv\")\n\nRows: 1000 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): species\ndbl (10): tank_id, avg_daily_temp, num_fish, day_length, tank_volume, size_d...\nlgl  (1): below\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(sick_data)\n\nRows: 1,000\nColumns: 12\n$ tank_id          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ species          &lt;chr&gt; \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\"…\n$ avg_daily_temp   &lt;dbl&gt; 22.95922, 23.98088, 23.97097, 24.26474, 24.29623, 23.…\n$ num_fish         &lt;dbl&gt; 95, 96, 101, 98, 93, 101, 98, 109, 97, 102, 99, 99, 9…\n$ day_length       &lt;dbl&gt; 9, 11, 11, 10, 10, 11, 12, 10, 10, 10, 9, 11, 11, 10,…\n$ tank_volume      &lt;dbl&gt; 399.6975, 399.8071, 398.8427, 399.8410, 399.7561, 398…\n$ size_day_30      &lt;dbl&gt; 2784.895, 2781.003, 2785.807, 2785.253, 2786.946, 278…\n$ ammonia          &lt;dbl&gt; 0.10561057, 0.09073854, 0.10867733, 0.09421766, 0.093…\n$ avg_daily_temp_F &lt;dbl&gt; 73.32660, 75.16558, 75.14774, 75.67654, 75.73322, 75.…\n$ below            &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ num_sick         &lt;dbl&gt; 63, 18, 12, 0, 5, 11, 11, 0, 55, 23, 7, 65, 61, 62, 6…\n$ oxygen           &lt;dbl&gt; 9.480023, 9.288952, 9.467007, 9.322897, 9.327849, 9.4…\n\nsick_data &lt;- sick_data %&gt;% \n  mutate(perc_sick = num_sick/num_fish)\n\nsick_data %&gt;% \n  filter(species==\"tilapia\") %&gt;% \n  group_by(below) %&gt;% \n  summarize(mean = mean(perc_sick))\n\n# A tibble: 2 × 2\n  below  mean\n  &lt;lgl&gt; &lt;dbl&gt;\n1 FALSE 0.125\n2 TRUE  0.597\n\nsick_data %&gt;% \n  filter(species==\"tilapia\") %&gt;% \n  ggplot(aes(x=perc_sick, fill=below)) +\n  geom_histogram(alpha=0.4, position = \"identity\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nSo, lets validate our results using a t-test.\n\ntilapia &lt;- sick_data %&gt;% \n  filter(species==\"tilapia\")\n\nt.test(perc_sick ~ below, data = tilapia)\n\n\n    Welch Two Sample t-test\n\ndata:  perc_sick by below\nt = -71.159, df = 721.94, p-value &lt; 2.2e-16\nalternative hypothesis: true difference in means between group FALSE and group TRUE is not equal to 0\n95 percent confidence interval:\n -0.4855783 -0.4595037\nsample estimates:\nmean in group FALSE  mean in group TRUE \n          0.1249432           0.5974842 \n\n\n\n\nFishing and leopard seals\nAs you are well aware by now, our main source of food (fish) has been compromised. Rather than starve or leave, we decide to source our fish from waters of Antarctica.\nThe problem is, the places we’d fish are also foraging grounds for leopard seals. To minimize the impact of our fishing on the seal population, we’d like to know where and when the presence of fish/seals are greater.\nLuckily, we’ve been collecting relevant data for awhile. We have: radio tags on seals, and the number of seals at a given location. We also net traps to count humped rockcod, our shared food source.\n \n\n\nData exploration\nLet’s take a look at our new data. Because we have two different collection schemes, our data are separated in to two data frames (and files).\n\nseal_data &lt;- read_csv(\"arctic-seals.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): area, num_seals\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nfish_data &lt;- read_csv(\"arctic-fish.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglimpse(fish_data)\n\nRows: 640\nColumns: 5\n$ date     &lt;date&gt; 2021-03-01, 2021-03-01, 2021-03-01, 2021-03-01, 2021-03-01, …\n$ net      &lt;dbl&gt; 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1…\n$ time     &lt;chr&gt; \"AM\", \"AM\", \"AM\", \"AM\", \"AM\", \"PM\", \"PM\", \"PM\", \"PM\", \"PM\", \"…\n$ num_fish &lt;dbl&gt; 7, 4, 2, 2, 5, 1, 0, 4, 6, 1, 6, 1, 3, 4, 4, 2, 4, 3, 4, 4, 4…\n$ bay      &lt;chr&gt; \"Wilhelmenia\", \"Wilhelmenia\", \"Wilhelmenia\", \"Wilhelmenia\", \"…\n\n\n\n\nGroup Brainstorm\n\nWe’d like to know if seal and fish counts are different during times of day observed.\nBased on our goals, what quantities do we want to compare?\nCreate null and alternative hypotheses to evaluate our data\nH0: no difference between the mean count of fish between the times of day\nHa: there is a difference\n\n\n\n\nVisualization and descriptive statistics\nGenerate descriptive statistics from our data, and visualize the data.\n\n#fish\nfish_data %&gt;% group_by(time) %&gt;%\n  summarize(avgCount=mean(num_fish)) %&gt;%\n  ggplot(mapping=aes(y=avgCount, x=time, fill=time)) +\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Average Fish Count, AM vs PM\")\n\n\n\n\n\n\n\n#seals\nseal_data %&gt;% group_by(time) %&gt;%\n  summarize(avgCount=mean(num_seals)) %&gt;%\n  ggplot(mapping=aes(y=avgCount, x=time, fill=time)) +\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Average Seal Count, AM vs PM\")\n\n\n\n\n\n\n\n\n\n\nPerforming our tests\n\nPerform a t-test to evaluate our hypothesis\nInterpret the results using the p-value\n\n\nt.test(num_fish ~ time, data=fish_data)\n\n\n    Welch Two Sample t-test\n\ndata:  num_fish by time\nt = -1.5665, df = 635.07, p-value = 0.1177\nalternative hypothesis: true difference in means between group AM and group PM is not equal to 0\n95 percent confidence interval:\n -0.52114501  0.05864501\nsample estimates:\nmean in group AM mean in group PM \n         3.91875          4.15000 \n\nt.test(num_seals ~ time, data = seal_data)\n\n\n    Welch Two Sample t-test\n\ndata:  num_seals by time\nt = 2.6898, df = 635.23, p-value = 0.007338\nalternative hypothesis: true difference in means between group AM and group PM is not equal to 0\n95 percent confidence interval:\n 0.121469 0.778531\nsample estimates:\nmean in group AM mean in group PM \n           5.825            5.375"
  },
  {
    "objectID": "modules/module_3/week9/ANOVA-Code_Along.html",
    "href": "modules/module_3/week9/ANOVA-Code_Along.html",
    "title": "Module 3: ANOVA",
    "section": "",
    "text": "Last week we used t-tests to think about which bay we should go fishing to minimize our impact on leopard seals.\n\nAre the bays equal in their fish populations?\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nfish &lt;- read_csv(\"arctic-fish.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(fish, aes(bay, num_fish, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = fish, num_fish ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_fish by bay\nt = -1.7366, df = 630.63, p-value = 0.08295\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -0.54602183  0.03352183\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                  3.90625                   4.16250 \n\n\nResponse:\n\nAre the bays equal in their leopard seal populations?\n\n\nseals &lt;- read_csv(\"arctic-seals.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): area, num_seals\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(seals, aes(bay, num_seals, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = seals, num_seals ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_seals by bay\nt = -4.2182, df = 638, p-value = 2.82e-05\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -1.0258729 -0.3741271\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                     5.25                      5.95 \n\n\nResponse:\n\nWhat should we do?\n\n\n\n\nCute Seal\n\n\n\n\n\n\n\n\nIndependent variable is categorical and the response is numerical\nGoal: to compare means among groups\n\n\n\n\n\nData are “normally distributed” =&gt; look at the histogram\nData are “equally varied” =&gt; standard deviations reasonably similar\nSamples are independent of one another\n\n\n\n\n\\(H_{0}\\) (null hypothesis) - The means of the populations we sampled from are all equal: \\(\\mu{1} = \\mu{2} = ... = \\mu{i}\\)\n\\(H_{a}\\) (alternative hypothesis) - The means of the populations we sampled from are not all equal\n\n\n\nWe have figured out the best option for minimizing our impact on leopard seals while keeping ourselves fed between two bays: Wilhelmina and Marguerite. But there are more bays! And ideally we would use two or more bays to spread out our fishing efforts among mulitple humped rock cod populations.\nOur team has collected similar data, as we had for Wilhelmina and Marguerite, on four more bays: Emperor, Hope, Sulzberger, and Iceberg.\nWe are going to examine the fish populations in class, and you will work with the leapard seals for your homework.\n\nWhat is it that we want to know about these six bays? Which variable is the independent variable? Which is the dependent?\n\n\nWhat are our null and alternative hypotheses?\n\n\nLoad tidyverse and read in the data\n\nIt’s always a good idea to visualize your data first. This gives you some perspective on the distribution of the data. What type of data viz is best for viewing the distribution of one variable?\n\n\n\n\nNow let’s calculate some summary statistics. What do you notice?\n\n\nLet’s create a bar graph to compare the summary stats between the groups. Does it seem like the groups are different?\n\n\nFinally, let’s code for the ANOVA.\n\n\nHow do we interpret this ANOVA?\n\n\nWhat is our recommendation for fishing based only off of this information?\n\nANOVAs are incredibly useful to tell you if there is a difference in the means of any of the groups. However, they do not tell you which means differ from another. To do that, you need to use a class of tests called Post Hoc Tests. Post hoc tests take into account the problem of running multiple pairwise comparisons, which is the increasing chance of error rates. The most common is Tukey’s HSD, but there are others depending on the specifics of your data set. You don’t need to worry about understanding Tukey’s test, but here I am going to show you how it works and an overview of the interpretation of it.\nWant to nerd out about ANOVAs? I recommend Bio statistical Design and Analysis Using R: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99900585075901844 (p254) A Primer of Ecological Statistics: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99141374340101844"
  },
  {
    "objectID": "modules/module_3/week9/ANOVA-Code_Along.html#wrapping-up-t-tests",
    "href": "modules/module_3/week9/ANOVA-Code_Along.html#wrapping-up-t-tests",
    "title": "Module 3: ANOVA",
    "section": "",
    "text": "Last week we used t-tests to think about which bay we should go fishing to minimize our impact on leopard seals.\n\nAre the bays equal in their fish populations?\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nfish &lt;- read_csv(\"arctic-fish.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): net, num_fish\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(fish, aes(bay, num_fish, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = fish, num_fish ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_fish by bay\nt = -1.7366, df = 630.63, p-value = 0.08295\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -0.54602183  0.03352183\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                  3.90625                   4.16250 \n\n\nResponse:\n\nAre the bays equal in their leopard seal populations?\n\n\nseals &lt;- read_csv(\"arctic-seals.csv\")\n\nRows: 640 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): area, num_seals\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nggplot(seals, aes(bay, num_seals, fill = bay)) +\n  geom_boxplot()\n\n\n\n\n\n\n\nt.test(data = seals, num_seals ~ bay)\n\n\n    Welch Two Sample t-test\n\ndata:  num_seals by bay\nt = -4.2182, df = 638, p-value = 2.82e-05\nalternative hypothesis: true difference in means between group Marguarite and group Wilhelmenia is not equal to 0\n95 percent confidence interval:\n -1.0258729 -0.3741271\nsample estimates:\n mean in group Marguarite mean in group Wilhelmenia \n                     5.25                      5.95 \n\n\nResponse:\n\nWhat should we do?\n\n\n\n\nCute Seal\n\n\n\n\n\n\n\n\nIndependent variable is categorical and the response is numerical\nGoal: to compare means among groups\n\n\n\n\n\nData are “normally distributed” =&gt; look at the histogram\nData are “equally varied” =&gt; standard deviations reasonably similar\nSamples are independent of one another\n\n\n\n\n\\(H_{0}\\) (null hypothesis) - The means of the populations we sampled from are all equal: \\(\\mu{1} = \\mu{2} = ... = \\mu{i}\\)\n\\(H_{a}\\) (alternative hypothesis) - The means of the populations we sampled from are not all equal\n\n\n\nWe have figured out the best option for minimizing our impact on leopard seals while keeping ourselves fed between two bays: Wilhelmina and Marguerite. But there are more bays! And ideally we would use two or more bays to spread out our fishing efforts among mulitple humped rock cod populations.\nOur team has collected similar data, as we had for Wilhelmina and Marguerite, on four more bays: Emperor, Hope, Sulzberger, and Iceberg.\nWe are going to examine the fish populations in class, and you will work with the leapard seals for your homework.\n\nWhat is it that we want to know about these six bays? Which variable is the independent variable? Which is the dependent?\n\n\nWhat are our null and alternative hypotheses?\n\n\nLoad tidyverse and read in the data\n\nIt’s always a good idea to visualize your data first. This gives you some perspective on the distribution of the data. What type of data viz is best for viewing the distribution of one variable?\n\n\n\n\nNow let’s calculate some summary statistics. What do you notice?\n\n\nLet’s create a bar graph to compare the summary stats between the groups. Does it seem like the groups are different?\n\n\nFinally, let’s code for the ANOVA.\n\n\nHow do we interpret this ANOVA?\n\n\nWhat is our recommendation for fishing based only off of this information?\n\nANOVAs are incredibly useful to tell you if there is a difference in the means of any of the groups. However, they do not tell you which means differ from another. To do that, you need to use a class of tests called Post Hoc Tests. Post hoc tests take into account the problem of running multiple pairwise comparisons, which is the increasing chance of error rates. The most common is Tukey’s HSD, but there are others depending on the specifics of your data set. You don’t need to worry about understanding Tukey’s test, but here I am going to show you how it works and an overview of the interpretation of it.\nWant to nerd out about ANOVAs? I recommend Bio statistical Design and Analysis Using R: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99900585075901844 (p254) A Primer of Ecological Statistics: https://primo.lclark.edu/permalink/01ALLIANCE_LCC/pajj6s/alma99141374340101844"
  },
  {
    "objectID": "modules/module_3/week9/ANOVA-seal-homeowrk-Key.html",
    "href": "modules/module_3/week9/ANOVA-seal-homeowrk-Key.html",
    "title": "Module 3: ANOVA",
    "section": "",
    "text": "Your name: Mila :)\nDate:\nMain Question: We want to know if the population of leopard seals differs between the bays.\n\nTo answer this question, which variable in the data set is the independent variable? Which is the dependent? Which variable is categorical? Which variable is numeric? (4pts)\n\n\n# independent is the bay\n\n# dependent is the number of seals\n\n# categorical is bay\n\n# numerical is number of seals\n\n\nWhat are our null and alternative hypotheses? (2pts)\n\n\n# Null: The mean number of leapord seals is the same at each of the bays\n\n# Alternative: The mean number of leapord seals is not the same at all of the bays. At least one is different.  \n\n\nLoad tidyverse and read in the data, called “antarctic_seals_many_bays.csv” (2pts)\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(multcompView)\nsealData &lt;- read_csv(\"antarctic_seals_many_bays.csv\")\n\nRows: 1920 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): time, bay\ndbl  (2): area, num_seals\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nCreate a histogram of the number of seals to see the distribution. Use facet_wrap(~ bay) to create 6 histograms, one for each bay. (2pts)\n\n\nggplot(sealData, aes(num_seals)) +\n  geom_histogram() +\n  facet_wrap(~bay)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nNow let’s calculate some summary statistics of the number of leopard seals per bay (mean and standard deviation). Which bay has the most leopard seals? Which has the least? (4pts)\n\n\nsealSummary &lt;- sealData %&gt;% group_by(bay) %&gt;% summarize(meanSeals = mean(num_seals), sdSeals = sd(num_seals))\n# bay with lowest mean number of seals: Sulzberger\n# bay with the greatest mean number of seals: Hope\n\nggplot(data = sealSummary, aes(bay, meanSeals, fill = bay)) + \n  geom_bar(stat = \"identity\") +\n    geom_errorbar( aes(ymin = meanSeals-sdSeals, ymax = meanSeals + sdSeals), \n              width = 0.2)  +\n  xlab(\"Bay Name\") +\n  ylab(\"Mean Number of Seals\") +\n  ggtitle(\"Mean number of seals per bay\")\n\n\n\n\n\n\n\n\n\nRun an ANOVA to test if the mean number of seals varies between the bays. (1pts)\n\n\nsealModel &lt;- aov(data = sealData, num_seals ~ bay)\nsummary(sealModel)\n\n              Df Sum Sq Mean Sq F value Pr(&gt;F)    \nbay            5  16645    3329    1129 &lt;2e-16 ***\nResiduals   1914   5642       3                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\nInterpret the ANOVA table you just created: What is the p-value? What is the F-statistic? What is our alpha level (cutoff value for p)? Do you accept or reject the null hypothesis? What does that mean? (5pts)\n\n\n# the p-value is smaller than 2 x 10 ^ - 16 \n# the f-stat is 1129\n# I reject the null hypothesis because the p-value of 2e-16 is smaller than my alpha of 0.05\n# this means that at least one of the mean number of leopard seals is different in one of the bays\n\nMila making figure for class: tukeys results on graph\n\ngenerate_label_df &lt;- function(TUKEY, variable){\n\n  # Extract labels and factor levels from Tukey post-hoc \n  Tukey.levels &lt;- TUKEY[[variable]][,4]\n  Tukey.labels &lt;- data.frame(multcompLetters(Tukey.levels)['Letters'])\n\n  #I need to put the labels in the same order as in the boxplot :\n  Tukey.labels$treatment=rownames(Tukey.labels)\n  Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]\n  return(Tukey.labels)\n}\n\nsealsManyBays &lt;- sealData %&gt;% select(num_seals, bay)\n\nmodel=lm(sealsManyBays$num_seals ~ sealsManyBays$bay)\nANOVA=aov(model)\n\n# Tukey test to study each pair of treatment :\nTUKEY &lt;- TukeyHSD(x=ANOVA, 'sealsManyBays$bay', conf.level=0.95)\n\nlabels&lt;-generate_label_df(TUKEY , \"sealsManyBays$bay\")  #generate labels using function\n\nnames(labels)&lt;-c('Letters','bay')#rename columns for merging\n\nyvalue&lt;-aggregate(.~ bay, data=sealsManyBays, mean) # obtain letter position for y axis using means\n\nfinal&lt;-merge(labels, yvalue) #merge dataframes\n\nggplot(sealsManyBays, aes(x = bay, y = num_seals, fill = bay)) +\n  geom_blank() +\n  theme_bw() +\n  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +\n  labs(x = 'Bay', y = 'Number of Seals') +\n  ggtitle(\"Differences in the number of seals by bay from Tukey's HSD\")+\n  theme(plot.title = element_text(hjust = 0.5, face='bold')) +\n  geom_boxplot(stat = \"boxplot\") +\n  geom_text(data = final, aes(x = bay, y = num_seals, label = Letters) ,vjust=-3.5,hjust=-.5) +\n  theme(plot.title = element_text(vjust=-0.6))"
  },
  {
    "objectID": "modules/module_2/module_2.1/code-a-long-2.1.html",
    "href": "modules/module_2/module_2.1/code-a-long-2.1.html",
    "title": "Introduction to Data Visualizations",
    "section": "",
    "text": "Learning Outcomes\n\nStudents will be able to apply basic data science knowledge to find the cause of a real-world scenario–food poisoning!\nStudents will be able to use ggplot to generate histograms, scatter plots, and bar charts from data sets, and save them to image files.\nStudents will be able to use visual-thinking skills to create visualizations that allow them to explore patterns in data, draw inferences, and create solutions.\n\n\n\nIntroduction to the problem\nWe have a wave of people getting sick across the team. People are coming in complaining of stomach sickness. Doctors have ruled out a communicable viral infection like norovirus, so it seems likely to be a food contamination issue.\nThe two main sources of food that are grown on site and distributed to team members are plants grown in hydroponic greenhouses (mostly Swiss chard, cucumbers and radishes) and fish (tilapia, a tolerant warm-water species, and rainbow trout, a cold-water species). Team members vary in the composition of their diet; people are allowed to choose how much of different food sources they eat.\nFortunately, we have some data to work with! We have data on the following:\n\nwhich team members are sick\nhow much fish or plant material they incorporate into their diets\n\n\n\nQuick Discussion\nHow might we go about trying to figure out what is causing the problem?\n\n\nThe Data\nFirst we’re going to pull in the data and give it a quick inspection/exploration before we start to work through some of the visualization tools in R.\n\n#load tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# assign data set to variable \"sick\"\n\nsick&lt;-read_csv(\"sick_data.csv\")\n\nRows: 349 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): last, first, sex, specialties\ndbl (6): age, height_cm, weight_kg, perc_fish, perc_plant, doctor_trips\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nHistograms\nWe’re going to look at a couple ways to create a histogram. The first is with the base R function hist, and the second is with ggplot (from the tidyverse). From today forward we’re going to exclusively use ggplot for data visualizations, as it’s the standard in R/data science.\nLet’s first look at the hist function.\n\n# use base R \"hist\" function\n\nNow let’s create a histogram with the same data using ggplot. First, let’s talk a little about ggplot:\n\n\nWhat is ggplot?\nggplot is an R package, and is part of the tidyverse. The “gg” translates to “grammar of graphics”, and is founded in the idea that all data visualizations are comprised of three components:\n\ndata set\naesthetics, or visual marks that represent the data (i.e. the stuff that you see)\ngeometric objects, or “geoms” (e.g the type of plot)\n\nIn the files tab (lower-right window), take a look at the ggplot-cheatsheet.pdf. In addition, there’s lots of documentation on the internet on ggplot.\n\n# Data set: \"data=sick\"              (the data set)\n# Aesthetics: \"mapping=aes(x=age)\"   (the stuff you see)\n# Geoms: \"geom_histogram()\"          (what type of plot)\n\n# Notice that the \"+\" is used to chain functions together in ggplot\n\n\n\n# 'bins' refers to the number of ranges data can fall in\n\nWe can improve the look by adding the “color” and “fill” attributes to geom_histogram. color indicates the outline color, and fill specifies the background color:\n\n# add color and fill attributes to geom_histogram()\n\nOne of the keys to data visualization is making sure the data and units are very clear to the viewer. We can chain on the labs() function to create custom axis labels and title:\n\n# chain \"labs()\" to the plot code\n\nCreate a histogram showing the distribution of height from the sick data set. Use the techniques show above to style it, and provide custom labels:\n\n\nScatter plots\nScatter plots are useful for visualizing if there is a potential association between two variables. Let’s take a look at an example scatter plot, displaying age on the x-axis (independent variable), and weight on the y-axis (dependent variable). You’ll see this is pretty similar to histogram code above, except for an additional attribute in the mapping aes function (y=), and a different geom function (geom_point):\n\n# use ggplot with geom_point()\n\nTry improving this plot by adding a title, x- and y-axis labels, and perhaps some color.\n\n#add color attribute to geom_point, and chain labs() at the end\n\nIn your group or with your neighbor, create a scatter plot to show what variables might be associated to give some clues about the root of the sickness. Use proper labels and add some color. Try some different variables until you see what might be a pattern.\n\n# What two variables might be useful in solving the mystery? Try multiple combinations if needed.\n\n\n\nBar Plots\nLastly we’re going to look at bar plots. One key difference between bar plots and the previous two plots we examined is that bar plots often show summary statistics of categorical variables, instead of all data. As such, we’ll need to use strategies from Module 1 to group data and generate statistics.\nLet’s say we’re interested in creating a visualization showing the means on doctor visits in males and females. First we’ll need to group the data and generate the means, using group_by/summarize:\nNow that we have our data grouped with the average doctor visits, let’s use it to create a bar chart:\n\n# use ggplot with geom_bar function. stat=\"identity\" means use the data values from the data set for the y-axis, rather than count\n\nWe can improve this in a couple ways. Like before we can add better labeling with labs. But we can also add some color and a legend by using the “fill” attribute in the aes function, and set it to the sex variable:\n\n#add labs()\n\nLet’s say were interested in comparing average plant consumption among team members who specialize in Climatology, Data Science, and Psychology. Create a bar plot below showing the average plant consumption among the three groups (hint: you may need to filter your data first).\n\n# create your subset of data from 'sick' first, then group_by/summarize\n\n\n\n# now use this subset for generating the bar plot\n\n\n\nSaving plots\nIt’s likely at some point you may want to save your plots to image files. There’s a handy function to do this: ggsave. ggsave takes the argument of an image file name (e.g. myPlot.jpg), and optionally a variable, if you have your plot assigned to a variable - if not, it will save the last plot rendered.\n\n# create a plot, but assign it to a variable\n\n\n\n# use ggsave to save it to a file"
  },
  {
    "objectID": "modules/module_2/module_2.1/practice-problems-2.1-key.html",
    "href": "modules/module_2/module_2.1/practice-problems-2.1-key.html",
    "title": "Practice Problems 1.3 Key",
    "section": "",
    "text": "First we need to load the penguin data set, just like we have before. The data set will be called penguins This data was collected by real scientists! Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\n\nlibrary(palmerpenguins)\npenguins&lt;-palmerpenguins::penguins\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nlibrary(tidyverse) # to make tidyverse commands available \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThere are three different species of penguins in this data set. We can see from the photo below that they may have different body dimensions. We will be using data visualizations to explore some of these differences.\n\nRemember\n\nCreate a histogram of body mass for all penguin species. Using comments, write a description of what this histogram shows.\n\n\nggplot(data = penguins, mapping=aes(x=body_mass_g)) +\n  geom_histogram() +\n  labs(title=\"Distribution of body mass for all species\", \n       x = \"body mass (g)\", \n       y = \"frequency\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n# this histogram shows a distribution of the variable body_mass_g\n\n\nCreate a histogram of body mass, with each species in a different color. What does this show us about the different species? Which species do you think has the greatest body mass?\n\n\nggplot(data = penguins, mapping=aes(x=body_mass_g, fill=species)) +\n  geom_histogram() +\n  labs(title=\"Distribution of body mass by species\", \n       x = \"body mass (g)\", \n       y = \"frequency\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n# Gentoo tend to have a larger body mass than Adelie and Chinstrap penguins.\n\n\nNow let’s find out! Create a bar graph with the average body mass for each penguin species. (Don’t forget about the NAs in the data set) Which one has the greatest average body mass? How does that compare with what you thought looking at the histogram?\n\n\npenguinMass &lt;- penguins %&gt;% \n  group_by(species) %&gt;% \n  summarize(avgMass = mean(body_mass_g, na.rm=TRUE))\n\nggplot(data=penguinMass, mapping=aes(x=species, y=avgMass, fill = species)) +\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Mass by Species\", \n       y = \"Average body mass (g)\", \n       x = \"species\")\n\n\n\n\n\n\n\n\n\nCreate a visualization that will help answer the question: Do heavier penguins have longer flippers? Think about how many variables you have and the best way to present this data. Color by species.\n\n\nggplot(data = penguins, mapping = aes(x=body_mass_g, y = flipper_length_mm, color = species)) +\n  geom_point() +\n  labs(title = \"Heavier penguins tend to have longer flippers\", \n       x = \"body mass (g)\", \n       y = \"flipper length (mm)\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n \n\nCreate a data visualization to explore the question: Do penguins with longer bills tend to have longer flippers as well? Make sure to give the points either different colors or shapes based on the species.\n\n\nggplot(data = penguins, \n       mapping = aes(x=bill_length_mm, \n                     y = flipper_length_mm, \n                     shape = species, \n                     color=species)) +\n  geom_point() +\n  labs(title = \"Penguins with longer bills tend to have longer flippers\", \n       x = \"bill length (mm)\", \n       y = \"flipper length (mm)\")\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nCreate a bar graph that shows the average body mass by sex.\n\n\npenguinMassBySex &lt;- penguins %&gt;% \n  group_by(sex) %&gt;% \n  summarize(avgMass = mean(body_mass_g, na.rm=T))\n\nggplot(data=penguinMassBySex, mapping=aes(x=sex, y=avgMass, fill = sex)) +\n  geom_bar(stat=\"identity\")+\n  labs(title=\"Mass by Sex\", \n       y = \"Average body mass (g)\", x = \"sex\")\n\n\n\n\n\n\n\n\n\nCreate one figure that has three bar graphs: comparing average body mass by sex AND species. If you need a hint, please ask!\n\n\npenguinMassBySexAndSp &lt;- penguins %&gt;% \n  group_by(sex, species) %&gt;% \n  summarize(avgMass = mean(body_mass_g, na.rm=T)) %&gt;% \n  na.omit()\n\n`summarise()` has grouped output by 'sex'. You can override using the `.groups`\nargument.\n\nggplot(data=penguinMassBySexAndSp, mapping=aes(x=sex, y=avgMass, fill = sex)) +\n  geom_bar(stat=\"identity\") + \n  labs(title=\"Mass by Sex\", y = \"Average body mass (g)\", x = \"sex\") +\n  facet_wrap(~ species)\n\n\n\n\n\n\n\n\n\nThere is so much option in ggplot for customizing your plots and so many interesting relationships between variables to explore! Create any data visualization you like of the palmer penguin data set, customizing it in at least one way. Here are some online resources for customization https://ggplot2-book.org/polishing.html, http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization (scroll to the bottom to see their style guide).\n\nThink about how many variables you are graphing (one or two), what kind of variables they are (categorical or numerical), and what question your viz will explore!\n\nCreate a a pie chart, showing the percentage of the data set each penguin species comprises. (you definitely will need to use google). In data science, are pie charts a good idea? Take a look here, and explain your answer.\n\n\n# first we need to calculate the number of penguins of each species in the dataset\npenguinCounts &lt;- penguins %&gt;% group_by(species) %&gt;% summarise(number = n())\npenguinCounts\n\n# A tibble: 3 × 2\n  species   number\n  &lt;fct&gt;      &lt;int&gt;\n1 Adelie       152\n2 Chinstrap     68\n3 Gentoo       124\n\n# now we need to divide each of those by the total to get the percentage\npenguinCounts$perc &lt;- penguinCounts$number / nrow(penguins)\npenguinCounts\n\n# A tibble: 3 × 3\n  species   number  perc\n  &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n1 Adelie       152 0.442\n2 Chinstrap     68 0.198\n3 Gentoo       124 0.360\n\n# now we can first make a bar plot with the data\npenguinBP &lt;- ggplot(penguinCounts, aes(x=\"\", y=perc, fill = species)) +\n  geom_bar(width=1, stat = \"identity\") +\n  labs(title=\"Species of Penguin in this Sample\", x=\"\", y=\"percentage of species\")\n\npenguinBP\n\n\n\n\n\n\n\n# and finally change that to a pie chart\npenguinPieChart &lt;- penguinBP + coord_polar(\"y\")\npenguinPieChart\n\n\n\n\n\n\n\n# Generally speaking, pie charts aren't a great choice for data visualizations, because humans aren't good and comparing shapes with angles. Differences in bar charts are much easier for humans to interpret."
  },
  {
    "objectID": "modules/module_2/module_2.1/practice-problems-2.1.html",
    "href": "modules/module_2/module_2.1/practice-problems-2.1.html",
    "title": "Practice Problems 1.3",
    "section": "",
    "text": "First we need to load the penguin data set, just like we have before. The data set will be called penguins This data was collected by real scientists! Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\n\nlibrary(palmerpenguins)\npenguins&lt;-palmerpenguins::penguins\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nlibrary(tidyverse) # to make tidyverse commands available \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nThere are three different species of penguins in this data set. We can see from the photo below that they may have different body dimensions. We will be using data visualizations to explore some of these differences.\n\nRemember\n\nCreate a histogram of body mass for all penguin species. Using comments, write a description of what this histogram shows.\n\n\nCreate a histogram of body mass, with each species in a different color. What does this show us about the different species? Which species do you think has the greatest body mass?\n\n\nNow let’s find out! Create a bar graph with the average body mass for each penguin species. (Don’t forget about the NAs in the data set) Which one has the greatest average body mass? How does that compare with what you thought looking at the histogram?\n\n\nCreate a visualization that will help answer the question: Do heavier penguins have longer flippers? Think about how many variables you have and the best way to present this data. Color by species.\n\n \n\nCreate a data visualization to explore the question: Do penguins with longer bills tend to have longer flippers as well? Make sure to give the points either different colors or shapes based on the species.\n\n\nCreate a bar graph that shows the average body mass by sex.\n\n\nCreate one figure that has three bar graphs: comparing average body mass by sex AND species. If you need a hint, please ask!\n\n\nThere is so much option in ggplot for customizing your plots and so many interesting relationships between variables to explore! Create any data visualization you like of the palmer penguin data set, customizing it in at least one way. Here are some online resources for customization https://ggplot2-book.org/polishing.html, http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization (scroll to the bottom to see their style guide).\n\nThink about how many variables you are graphing (one or two), what kind of variables they are (categorical or numerical), and what question your viz will explore!\n\nCreate a a pie chart, showing the percentage of the data set each penguin species comprises. (you definitely will need to use google). In data science, are pie charts a good idea? Take a look here, and explain your answer."
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding-sick-fish.html",
    "href": "modules/module_2/module_2.3/Understanding-sick-fish.html",
    "title": "Understanding Sick Fish 2.3",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\n\n# read in the data, sick-fish.csv\n\n# look at the data\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# comment it out\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n&lt; INSERT A LINK TO SLIDE DECK HERE &gt;\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\nTEMPERATURE GROUPS ONLY\n\nIn the previous questions, you have examined fish sickness and temperature as a continuous variable. However, our data set also includes temperature as a categorical variable- is a given tank below the critical threshold for fish immune systems. If the column titled “below” is TRUE, then that tank is below the critical threshold. If the column titled “below” is FALSE, then that tank is above the critical threshold. Create a histogram that examines sick fish and the tank temperature as this categorical variable."
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding_Sick_Fish_Trout_Ammonium.html",
    "href": "modules/module_2/module_2.3/Understanding_Sick_Fish_Trout_Ammonium.html",
    "title": "Understanding Sick Fish",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# read in the data, sick-fish.csv\nsick &lt;- read_csv(\"sick-fish.csv\")\n\nRows: 1000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): species\ndbl (11): tank_id, avg_daily_temp, num_fish, day_length, tank_volume, size_d...\nlgl  (1): below\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# look at the data\nglimpse(sick)\n\nRows: 1,000\nColumns: 13\n$ tank_id          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ species          &lt;chr&gt; \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\"…\n$ avg_daily_temp   &lt;dbl&gt; 22.95922, 23.98088, 23.97097, 24.26474, 24.29623, 23.…\n$ num_fish         &lt;dbl&gt; 95, 96, 101, 98, 93, 101, 98, 109, 97, 102, 99, 99, 9…\n$ day_length       &lt;dbl&gt; 9, 11, 11, 10, 10, 11, 12, 10, 10, 10, 9, 11, 11, 10,…\n$ tank_volume      &lt;dbl&gt; 399.6975, 399.8071, 398.8427, 399.8410, 399.7561, 398…\n$ size_day_30      &lt;dbl&gt; 2784.895, 2781.003, 2785.807, 2785.253, 2786.946, 278…\n$ ammonia          &lt;dbl&gt; 0.10561057, 0.09073854, 0.10867733, 0.09421766, 0.093…\n$ density          &lt;dbl&gt; 0.2376798, 0.2401158, 0.2532327, 0.2450974, 0.2326418…\n$ avg_daily_temp_F &lt;dbl&gt; 73.32660, 75.16558, 75.14774, 75.67654, 75.73322, 75.…\n$ below            &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ num_sick         &lt;dbl&gt; 63, 18, 12, 0, 5, 11, 11, 0, 55, 23, 7, 65, 61, 62, 6…\n$ oxygen           &lt;dbl&gt; 9.480023, 9.288952, 9.467007, 9.322897, 9.327849, 9.4…\n\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\nsick &lt;- sick %&gt;% mutate(density = num_fish / tank_volume)\n\nsick &lt;- sick %&gt;% mutate(perc_sick = num_sick / num_fish)\n\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\n\nggplot(data = sick, mapping = aes(density, perc_sick, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n# percentage sick is standardized across all the tank volumes and fish populations, so it puts everything in the same units\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# comment it out\n# trout and ammonia\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\ntroutOnly &lt;- sick %&gt;% filter(species == \"trout\")\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n11:30 Class Section: https://docs.google.com/presentation/d/1AYbRlU9NB36EfF4R8C5_nTr0dQyTWpcAPTeSiW7XKhY/edit?usp=sharing\n1:50 Class Section: https://docs.google.com/presentation/d/1CnL45KGLifZypKY9J5uAC8qoXEjEToFmxZSdiy6oKqQ/edit?usp=sharing\n\nggplot(troutOnly, aes(x = ammonia)) +\n  geom_histogram() +\n  labs(title = \"trout + ammonia\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# most common is around .027 but it could be different depending on their bin number. The correct answer is the value with the greatest frequency for their histogram. \n\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\ntroutOnly %&gt;% summarize(mean(ammonia), sd(ammonia))\n\n# A tibble: 1 × 2\n  `mean(ammonia)` `sd(ammonia)`\n            &lt;dbl&gt;         &lt;dbl&gt;\n1          0.0280       0.00506\n\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\n\n# we want to know if oxygen concentration is related with the percentage of sick fish. I will use a scatterplot. \n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\n\nggplot(data = troutOnly, mapping = aes(x = ammonia, y= perc_sick)) +\n  geom_point()\n\n\n\n\n\n\n\n\nTEMPERATURE GROUPS ONLY\n\nIn the previous questions, you have examined fish sickness and temperature as a continuous variable. However, our data set also includes temperature as a categorical variable- is a given tank below the critical threshold for fish immune systems. If the column titled “below” is TRUE, then that tank is below the critical threshold. If the column titled “below” is FALSE, then that tank is above the critical threshold. Create a histogram that examines sick fish and the tank temperature as this categorical variable."
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding_Sick_Fish_Trout_Oxygen_Key.html",
    "href": "modules/module_2/module_2.3/Understanding_Sick_Fish_Trout_Oxygen_Key.html",
    "title": "Understanding Sick Fish",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# read in the data, sick-fish.csv\nsick &lt;- read_csv(\"sick-fish.csv\")\n\nRows: 1000 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): species\ndbl (11): tank_id, avg_daily_temp, num_fish, day_length, tank_volume, size_d...\nlgl  (1): below\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# look at the data\nglimpse(sick)\n\nRows: 1,000\nColumns: 13\n$ tank_id          &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ species          &lt;chr&gt; \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\", \"tilapia\"…\n$ avg_daily_temp   &lt;dbl&gt; 22.95922, 23.98088, 23.97097, 24.26474, 24.29623, 23.…\n$ num_fish         &lt;dbl&gt; 95, 96, 101, 98, 93, 101, 98, 109, 97, 102, 99, 99, 9…\n$ day_length       &lt;dbl&gt; 9, 11, 11, 10, 10, 11, 12, 10, 10, 10, 9, 11, 11, 10,…\n$ tank_volume      &lt;dbl&gt; 399.6975, 399.8071, 398.8427, 399.8410, 399.7561, 398…\n$ size_day_30      &lt;dbl&gt; 2784.895, 2781.003, 2785.807, 2785.253, 2786.946, 278…\n$ ammonia          &lt;dbl&gt; 0.10561057, 0.09073854, 0.10867733, 0.09421766, 0.093…\n$ density          &lt;dbl&gt; 0.2376798, 0.2401158, 0.2532327, 0.2450974, 0.2326418…\n$ avg_daily_temp_F &lt;dbl&gt; 73.32660, 75.16558, 75.14774, 75.67654, 75.73322, 75.…\n$ below            &lt;lgl&gt; TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ num_sick         &lt;dbl&gt; 63, 18, 12, 0, 5, 11, 11, 0, 55, 23, 7, 65, 61, 62, 6…\n$ oxygen           &lt;dbl&gt; 9.480023, 9.288952, 9.467007, 9.322897, 9.327849, 9.4…\n\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\nsick &lt;- sick %&gt;% mutate(density = num_fish / tank_volume)\n\nsick &lt;- sick %&gt;% mutate(perc_sick = num_sick / num_fish)\n\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\n\nggplot(data = sick, mapping = aes(density, perc_sick, color = species)) +\n  geom_point()\n\n\n\n\n\n\n\n# percentage sick is standardized across all the tank volumes and fish populations, so it puts everything in the same units\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# comment it out\n# trout and oxygen\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\ntroutOnly &lt;- sick %&gt;% filter(species == \"trout\")\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n11:30 Class Section: https://docs.google.com/presentation/d/1AYbRlU9NB36EfF4R8C5_nTr0dQyTWpcAPTeSiW7XKhY/edit?usp=sharing\n1:50 Class Section: https://docs.google.com/presentation/d/1CnL45KGLifZypKY9J5uAC8qoXEjEToFmxZSdiy6oKqQ/edit?usp=sharing\n\nggplot(troutOnly, aes(x = oxygen)) +\n  geom_histogram() +\n  labs(title = \"trout + oxygen\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n# most common is around 11.6, but it could be different depending on their bin number. The correct answer is the value with the greatest frequency for their histogram. \n\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\ntroutOnly %&gt;% summarize(mean(oxygen), sd(oxygen))\n\n# A tibble: 1 × 2\n  `mean(oxygen)` `sd(oxygen)`\n           &lt;dbl&gt;        &lt;dbl&gt;\n1           11.7        0.177\n\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\n\n# we want to know if oxygen concentration is related with the percentage of sick fish. I will use a scatterplot. \n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\n\nggplot(data = troutOnly, mapping = aes(x = oxygen, y= perc_sick)) +\n  geom_point()\n\n\n\n\n\n\n\n\nTEMPERATURE GROUPS ONLY\n\nIn the previous questions, you have examined fish sickness and temperature as a continuous variable. However, our data set also includes temperature as a categorical variable- is a given tank below the critical threshold for fish immune systems. If the column titled “below” is TRUE, then that tank is below the critical threshold. If the column titled “below” is FALSE, then that tank is above the critical threshold. Create a histogram that examines sick fish and the tank temperature as this categorical variable."
  },
  {
    "objectID": "modules/module_2/module_2.3/Understanding_Sick_Fish.html",
    "href": "modules/module_2/module_2.3/Understanding_Sick_Fish.html",
    "title": "Penguin_Practice_No1",
    "section": "",
    "text": "In class practice to understand why the fish are sick\nWe know that there are tanks whose temperature are below the critical threshold for the immune systems of the fish species we are farming. However, there could be other factors contributing to the numbers of sick fish. After our class brainstormed more factors, the ichthyologists (fish scientists) measured: oxygen concentration and ammonia concentration (a proxy for waste buildup). We are going to look at these factors as well, to ensure we can address all of the factors affecting the fish health.\n\n# load the tidyverse\n\n# read in the data, sick-fish.csv\n\n# look at the data\n\nOur ichthyologist friends told us that density often contributes to the spread of any disease present in a system. We want to look at how density relates to the number of sick fish. Because we are in Antarctica, and obtaining supplies is quite difficult, not all of our tanks are from the same manufacturer and shipment. We have tanks of many different sizes. We know the size of each tank and the number of fish, so we can calculate the density. (Density = number / volume).\n1.Create a variable in the data set for the density of fish per tank. Create a variable in the data set for the percentage of sick fish per tank.\n\nCreate a scatter plot to examine the relationship between density and the percentage of sick fish. In comments, explain why we are looking at the relationship between the density and the number of sick fish in a tank instead of the total number of fish in a given tank and the percentage of sick fish.\n\nIn your group, discuss which of the following variables you’d like to examine in more detail.\n\nTemperature\nOxygen concentration\nAmmonia (NH3) concentration\n\nPAUSE. CLASS DISCUSSION OF CHOICES.\n\nWhat is your variable and species?\n\n\n# comment it out\n\nYour task is now to learn all about this variable and how it may contribute to the problem. Each person in the group will turn in this .Rmd file as a homework assignment, so be sure to fill out your copy completely. For every visualization, be sure to label the axes clearly (with units) and provide a title. Feel free to customize the appearance as you like.\n\nCreate a dataframe with only your fish species.\n\n\nCreate a histogram of your variable. What is (approximately) the most common value of your variable? One person from each group: put a copy of this histogram to this shared google slide deck to show the class on Wednesday.\n\n&lt; INSERT A LINK TO SLIDE DECK HERE &gt;\n\nWhat is the mean and standard deviation of your variable? Add to google slide deck.\n\n\nWhat is the motivating question? That is, what can your variable tell us about the sick fish? What data visualization will you use to answer this question?\n\nPAUSE. SHARE YOUR QUESTION AND PROPOSED ANALYSIS WITH THE GROUP THAT IS STUDYING THE SAME VARIABLE ON THE OTHER FISH SPECIES.\n\nCreate a visualization to analyze the relationship between fish sickness and your variable. Add this to the google slide deck.\n\nTEMPERATURE GROUPS ONLY\n\nIn the previous questions, you have examined fish sickness and temperature as a continuous variable. However, our data set also includes temperature as a categorical variable- is a given tank below the critical threshold for fish immune systems. If the column titled “below” is TRUE, then that tank is below the critical threshold. If the column titled “below” is FALSE, then that tank is above the critical threshold. Create a histogram that examines sick fish and the tank temperature as this categorical variable."
  },
  {
    "objectID": "modules/module_2/module_2.2/code-a-long-2.2.html",
    "href": "modules/module_2/module_2.2/code-a-long-2.2.html",
    "title": "Code-a-long 2.2",
    "section": "",
    "text": "Learning Outcomes\n\nStudents will be able to use ggplot to generate box plots.\nStudents will be able to apply error bars to box plots and bar plots.\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\n\npenguins&lt;-palmerpenguins::penguins\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nBox plots with error bars\nStrategy: Use geom_boxplot(), and in the aes function, set x equal to a categorical column, which will automatically group them. For the horizontal lines (error bars), add stat_boxplot(geom = “errorbar”).\n\n\nBar plots with error bars\nStrategy: use group_by/summarize to calculate group mean and standard deviation. Add geom_errorbar, in which the top top bar is the mean + standard deviation, and the lower bar is the mean - standard deviation:\n\n\nPractice\nCreate a box plot comparing penguin mass among species. Include error bars, a legend, and labels.\n\n# create box plot below\n\nCreate a bar plot comparing penguin mass among species. Include error bars (+/- 1 sd), a legend, and labels.\n\n# create bar plot below"
  },
  {
    "objectID": "modules/module_1/module_1.1/code-a-long-1.1.html",
    "href": "modules/module_1/module_1.1/code-a-long-1.1.html",
    "title": "Welcome to rstudio",
    "section": "",
    "text": "Let’s start off by clicking the “Visual” button above, so this document is a little easier to read and work with. You’ll likely get a popup window the first time, confirming that you want to switch to Visual Mode.\nJust click Use Visual Mode, with Don’t show this message again checked.\n\n\n\nGain some familiarity with rstudio\nLearn how to run R code in “code chunks”\nPerform some arithmetic with R\nCreate variables in R, and assign values to them\n\n\n\n\nYou’ll notice rstudio is divided into 4 windows. Let’s take a look at each one:\n\nupper-left: this is the area for reading / writing files. We’ll probably use this window the most this semester.\nlower-left: this is the console, where you can run R code directly. You might use this occasionally, but for the most part probably won’t have to.\nupper-right: this window has a couple useful tabs:\n\nEnvironment: any variables you create will be listed here. This can be useful for quick reference.\nHistory: this shows the R commands you’ve run within a session.\n\nlower-right: this window lists any files and folders that are part of your project/assignment. It also has tabs that can display plots and help documentation.\n\nYou can resize windows / borders as needed in order to more easily focus on the particular window you’re using.\n\n\n\nThe grey rectangles below are “code chunks”, where you can type and execute R code. To run the code, click the green triangle in the upper-right corner of the code chunk.\nLet’s try running the code chunk below, which is just some simple arithmetic:\nNow it’s your turn. In the code chunk below, enter a command to subtract 7 from 18, and run it:\n\n# Enter code below (by the way, I'm a comment)\n\n\n\n\nProgramming languages, including R, rely heavily on the use of variables. A variable is something you define and assign a value to. In the code chunk below, we’re creating a variable called x, and assigning the value of 7 to it:\n\n# Notice we use a 'left pointing arrow' to assign the value\n\nWe don’t get any real feedback from running the code above, but it’s often a good idea to check your work by printing a variable’s value to the screen. To do this, you can run code that simply lists the variable:\n\n# prints to the screen:\n\nIt’s worth noting that you can run multiple lines of code within a code chunk:\n\n# create a variable \"penguinCount\" and give it the value 3\n\n\n# print to screen\n\nNow it’s your turn. Work with your group / people next to you, and do the following:\n\ncreate a variable called y, assign three plus eight to it, and print to the screen.\ncreate a variable z, and assign x+y to it, and print to the screen\n\n\n# create the variable \"y\" here, and print to screen\n\n\n# create the variable \"z\" here, and print to screen\n\nYou made it! That’s it for now. We’ll do a quick review of variables during the next lesson, and will work our way toward some more exciting topics.\nMake sure you have this completed by midnight on Tuesday, September 6th. And you don’t have to “turn it in” - we’ll be able to view your project on the class work space."
  },
  {
    "objectID": "modules/module_1/module_1.1/code-a-long-1.1.html#welcome-to-rstudio",
    "href": "modules/module_1/module_1.1/code-a-long-1.1.html#welcome-to-rstudio",
    "title": "Welcome to rstudio",
    "section": "",
    "text": "Let’s start off by clicking the “Visual” button above, so this document is a little easier to read and work with. You’ll likely get a popup window the first time, confirming that you want to switch to Visual Mode.\nJust click Use Visual Mode, with Don’t show this message again checked.\n\n\n\nGain some familiarity with rstudio\nLearn how to run R code in “code chunks”\nPerform some arithmetic with R\nCreate variables in R, and assign values to them\n\n\n\n\nYou’ll notice rstudio is divided into 4 windows. Let’s take a look at each one:\n\nupper-left: this is the area for reading / writing files. We’ll probably use this window the most this semester.\nlower-left: this is the console, where you can run R code directly. You might use this occasionally, but for the most part probably won’t have to.\nupper-right: this window has a couple useful tabs:\n\nEnvironment: any variables you create will be listed here. This can be useful for quick reference.\nHistory: this shows the R commands you’ve run within a session.\n\nlower-right: this window lists any files and folders that are part of your project/assignment. It also has tabs that can display plots and help documentation.\n\nYou can resize windows / borders as needed in order to more easily focus on the particular window you’re using.\n\n\n\nThe grey rectangles below are “code chunks”, where you can type and execute R code. To run the code, click the green triangle in the upper-right corner of the code chunk.\nLet’s try running the code chunk below, which is just some simple arithmetic:\nNow it’s your turn. In the code chunk below, enter a command to subtract 7 from 18, and run it:\n\n# Enter code below (by the way, I'm a comment)\n\n\n\n\nProgramming languages, including R, rely heavily on the use of variables. A variable is something you define and assign a value to. In the code chunk below, we’re creating a variable called x, and assigning the value of 7 to it:\n\n# Notice we use a 'left pointing arrow' to assign the value\n\nWe don’t get any real feedback from running the code above, but it’s often a good idea to check your work by printing a variable’s value to the screen. To do this, you can run code that simply lists the variable:\n\n# prints to the screen:\n\nIt’s worth noting that you can run multiple lines of code within a code chunk:\n\n# create a variable \"penguinCount\" and give it the value 3\n\n\n# print to screen\n\nNow it’s your turn. Work with your group / people next to you, and do the following:\n\ncreate a variable called y, assign three plus eight to it, and print to the screen.\ncreate a variable z, and assign x+y to it, and print to the screen\n\n\n# create the variable \"y\" here, and print to screen\n\n\n# create the variable \"z\" here, and print to screen\n\nYou made it! That’s it for now. We’ll do a quick review of variables during the next lesson, and will work our way toward some more exciting topics.\nMake sure you have this completed by midnight on Tuesday, September 6th. And you don’t have to “turn it in” - we’ll be able to view your project on the class work space."
  },
  {
    "objectID": "modules/module_1/module_1.2/homework-1.2-key.html",
    "href": "modules/module_1/module_1.2/homework-1.2-key.html",
    "title": "Homework Module 1.2 Key",
    "section": "",
    "text": "Your Name (replace me)\n\n\nDate (replace me)\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\n\nIn the code chunk below, define what a variable is (using comments), and create a variable myVariable set equal to 20.\n\n\n# A variable is a letter, word, or series of words that can store a value (number, word, vector, data set) in R\n\n\nmyVariable&lt;-20\n\n\nDescribe what a vector is in R, and create a sample vector below:\n\n\n# A vector is a type of variable that stores multiple values\n\nmyVector&lt;-c(1,2,3,4,5)\n\n\nIn the code chunk below, load the tidyverse. Why might we do this, and what is the tidyverse for?\n\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Loading the tidyverse provides additional functions for R programming.\n\n# The tidyverse is a series of packages and functions written by data scientists to make working with data easier.\n\n\nDescribe what a function is. What is an argument? How might you learn about what functions exist in R?\n\n\n# A function is a built in command that performs common tasks.\n\n# An argument is a thing (variable, data set, etc.) that you provide to a function as input.\n\n# You can learn about what functions exist by searching the internet.\n\n\nWhat is camel case? Describe some best practices for naming variables.\n\n\n# Camel case is a syntax for creating variable names in which the first word is lower case, and subsequent words are title case, with no spaces.\n\n# Variables should be named in such a manner that they are readable (e.g. with camel case), and that they accurately describe what the variable contains.\n\n\nWhat is the mean for the survey responses for self reported willingness to settle in a remote environment (hint: use the remote column)\n\n\nteamAntarcticaData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nremote&lt;-teamAntarcticaData$remote\n\nmean(remote)\n\n[1] 3.28\n\n\n\nWhat does the glimpse function do (we have not covered it)? How might you learn more about it?\n\n\n# glimpse() lets you view your dataset in a transposed view (columns become rows)\n\n# You can learn more about glimpse() by running help(glimpse). You can also find documentation/look for examples by searching the internet."
  },
  {
    "objectID": "modules/module_1/module_1.2/homework-1.2.html",
    "href": "modules/module_1/module_1.2/homework-1.2.html",
    "title": "Homework Module 1.2",
    "section": "",
    "text": "Your Name (replace me)\n\n\nDate (replace me)\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\n\nIn the code chunk below, define what a variable is (using comments), and create a variable myVariable set equal to 20.\n\n\nDescribe what a vector is in R, and create a sample vector below:\n\n\nIn the code chunk below, load the tidyverse. Why might we do this, and what is the tidyverse for?\n\n\nDescribe what a function is. What is an argument? How might you learn about what functions exist in R?\n\n\nWhat is camel case? Describe some best practices for naming variables.\n\n\nWhat is the mean for the survey responses for self reported willingness to settle in a remote environment (hint: use the remote column)\n\n\nWhat does the glimpse function do (we have not covered it)? How might you learn more about it?"
  },
  {
    "objectID": "modules/module_1/module_1.2/practice-problems-1.2.html",
    "href": "modules/module_1/module_1.2/practice-problems-1.2.html",
    "title": "Practice Problems 1.2",
    "section": "",
    "text": "Here are some practice problems to explore the penguins data set. First we need to load the penguin data set.\n\nlibrary(\"palmerpenguins\")\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nWhat are the mean and standard deviation of bill length of the penguins?\n\n\n# create a variable that contains only the column for bill length\n\n\n\n# mean \n\n# standard deviation\n\n\nWhat are the mean and standard deviation of the body mass of the penguins?\n\n\n# create a variable that contains only the column for body mass\n\n# mean\n\n# standard deviation\n\n\nWhat is the mean and median flipper length of the penguins?\n\n\n# create a variable that contains only the column for flipper length\n\n# mean\n\n# median\n\n\nHow long are the largest flippers in this data set? How long is the shortest? (Hint: google how to find the minimum and maximum values in a vector). You can use the same variable that you created in 3!\n\n\n# longest flipper length\n\n# shortest flipper length\n\n\nWhat is the range of bill depths of penguins? (Range is the maximum value - minimum value)\n\n\n# deepest bill depth\n\n# shallowest bill depth\n\n# range of bill depth\n\n\nHow many species of penguins are in this data set (hint: there is a function to find distinct values in a vector)? List them using comments.\n\n\nFind the value for the longest bill in the data set. Assign it to the variable longestBill.\n\n\nCalculate the variance of body mass. (Hint: google variance in R)\n\n\nCalculate the variance of flipper length.\n\n\nCalculate and compare the standard deviation of bill length and bill depth. Which has a larger standard deviation?\n\n\n# standard deviation of bill length\n\n# standard deviation of bill depth\n\n# Which has a larger standard deviation? \n\n\nChallenge: calculate the mean and standard deviation of bill length for gentoo penguins"
  },
  {
    "objectID": "modules/module_1/module_1.4/code-a-long-1.4.html",
    "href": "modules/module_1/module_1.4/code-a-long-1.4.html",
    "title": "Analyzing external data set",
    "section": "",
    "text": "Students will be able to use some functions of the tidyverse: select, filter, mutate, summarize and the pipe %&gt;%.\nStudents will be able to explore and summarize complex, real-world data"
  },
  {
    "objectID": "modules/module_1/module_1.4/code-a-long-1.4.html#creating-new-variables-with-mutate",
    "href": "modules/module_1/module_1.4/code-a-long-1.4.html#creating-new-variables-with-mutate",
    "title": "Analyzing external data set",
    "section": "Creating new variables with mutate()",
    "text": "Creating new variables with mutate()\nSometimes our data aren’t in exactly the format we want. For example, we might want our temperature data in Fahrenheit instead of Celsius.\nThe tidyverse has a function called mutate() that lets us create a new column. Often, we want to apply a function to the entire column or perform some type of calculation, such as converting temp from F to C.\nTo help us out, here is the equation for converting: Fahrenheit = Celcius * (9/5) + 32\n\n# create a new column for temps in Fahrenheit"
  },
  {
    "objectID": "modules/module_1/module_1.4/code-a-long-1.4.html#understanding-data-through-summarize",
    "href": "modules/module_1/module_1.4/code-a-long-1.4.html#understanding-data-through-summarize",
    "title": "Analyzing external data set",
    "section": "Understanding data through summarize()",
    "text": "Understanding data through summarize()\nLike we have talked about in previous classes, one of the best ways for us to understand our data is through what we call summary statistics such as the mean, standard deviation, etc.\nSummary statistics are particularly useful for large data sets, because we cannot navigate the data manually. Along with data visualization (covered soon!), summary statistics are essential to understanding large data sets.\n\n# first attempt at mean and sd of average temperature\n\nThe above gives us an impression of the climate of the whole region contained by all of the stations. However, this wouldn’t really help us choose an ideal location for us to inhabit, or tell us which areas we might avoid.\nGrouping data by variable values gives us a clearer picture of specific subsets of the data. For instance, we might like to know the average measurements for specific locations.\nThe group_by() function lets us do this. It is most often used in combination with summarize().\nWe can use this method to calculate the mean temperatures of each station_id instead of the overall mean of the entire data set.\nNext, use arrange() function, which can rearrange our data in numerical order by a specific column. For instance, we could use it with the code below to find the stations with the highest and lowest average temperatures.\n\n#group_by summarize arrange\n\nOne great thing about group_by() is that you can give it multiple columns. This allows us to have groups within groups. For instance, we could organize our data by station_id and then break up data for each station by month. That’s a mouthful, so let’s just take a look at it:\n\n#group_by multiple columns\n\nWhat are good/bad columns to group by? Try summarizing the mean temperature, grouping by different combinations of columns. Talk with your neighbors about which columns might or might not work well."
  },
  {
    "objectID": "modules/module_1/module_1.4/code-a-long-1.4-key.html",
    "href": "modules/module_1/module_1.4/code-a-long-1.4-key.html",
    "title": "Analyzing external data set",
    "section": "",
    "text": "Students will be able to use some functions of the tidyverse: select, filter, mutate, summarize and the pipe %&gt;%.\nStudents will be able to explore and summarize complex, real-world data"
  },
  {
    "objectID": "modules/module_1/module_1.4/code-a-long-1.4-key.html#creating-new-variables-with-mutate",
    "href": "modules/module_1/module_1.4/code-a-long-1.4-key.html#creating-new-variables-with-mutate",
    "title": "Analyzing external data set",
    "section": "Creating new variables with mutate()",
    "text": "Creating new variables with mutate()\nSometimes our data aren’t in exactly the format we want. For example, we might want our temperature data in Fahrenheit instead of Celsius.\nThe tidyverse has a function called mutate() that lets us create a new column. Often, we want to apply a function to the entire column or perform some type of calculation, such as converting temp from F to C.\nTo help us out, here is the equation for converting: Fahrenheit = Celcius * (9/5) + 32\n\n# create a new column for temps in Fahrenheit\nmutate(stationData, temp_f = temp * (9/5)+32)\n\n# A tibble: 139,160 × 13\n    year   day month running_day  hour  temp pressure wind_speed wind_direction\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;          &lt;dbl&gt;\n 1  2018     1     1           1     0 -29.5     629         5.1            247\n 2  2018     1     1           1   300 -27.4     629.        5.8            236\n 3  2018     1     1           1   600 -25.5     629.        5.5            228\n 4  2018     1     1           1   900 -24.9     629.        5.8            219\n 5  2018     1     1           1  1200 -25       630.        3.9            230\n 6  2018     1     1           1  1500 -27.5     630.        3.4            242\n 7  2018     1     1           1  1800 -30.3     630.        3.3            259\n 8  2018     1     1           1  2100 -30.1     630.        3.8            243\n 9  2018     2     1           2     0 -28.8     630.        5.1            238\n10  2018     2     1           2   300 -26.4     630.        4.9            235\n# ℹ 139,150 more rows\n# ℹ 4 more variables: humidity &lt;dbl&gt;, delta_t &lt;dbl&gt;, station_id &lt;chr&gt;,\n#   temp_f &lt;dbl&gt;"
  },
  {
    "objectID": "modules/module_1/module_1.4/code-a-long-1.4-key.html#understanding-data-through-summarize",
    "href": "modules/module_1/module_1.4/code-a-long-1.4-key.html#understanding-data-through-summarize",
    "title": "Analyzing external data set",
    "section": "Understanding data through summarize()",
    "text": "Understanding data through summarize()\nLike we have talked about in previous classes, one of the best ways for us to understand our data is through what we call summary statistics such as the mean, standard deviation, etc.\nSummary statistics are particularly useful for large data sets, because we cannot navigate the data manually. Along with data visualization (covered soon!), summary statistics are essential to understanding large data sets.\n\n# first attempt at mean and sd of average temperature\nstationData %&gt;% \n  summarize(mean_temp=mean(temp, na.rm=TRUE), sd_temp=sd(temp, na.rm=TRUE))\n\n# A tibble: 1 × 2\n  mean_temp sd_temp\n      &lt;dbl&gt;   &lt;dbl&gt;\n1     -25.3    15.3\n\n\nThe above gives us an impression of the climate of the whole region contained by all of the stations. However, this wouldn’t really help us choose an ideal location for us to inhabit, or tell us which areas we might avoid.\nGrouping data by variable values gives us a clearer picture of specific subsets of the data. For instance, we might like to know the average measurements for specific locations.\nThe group_by() function lets us do this. It is most often used in combination with summarize().\nWe can use this method to calculate the mean temperatures of each station_id instead of the overall mean of the entire data set.\nNext, use arrange() function, which can rearrange our data in numerical order by a specific column. For instance, we could use it with the code below to find the stations with the highest and lowest average temperatures.\n\n#group_by summarize arrange\nstationData %&gt;% \n  group_by(station_id) %&gt;% \n  summarize(mean_temp=mean(temp, na.rm=TRUE)) %&gt;% \n  arrange(mean_temp)\n\n# A tibble: 52 × 2\n   station_id mean_temp\n   &lt;chr&gt;          &lt;dbl&gt;\n 1 fujq3h         -52.6\n 2 dc2q3h         -51.7\n 3 ag4q3h         -51.0\n 4 jasq3h         -49.8\n 5 rlsq3h         -44.6\n 6 d85q3h         -40.5\n 7 balq3h         -36.8\n 8 pdaq3h         -35.8\n 9 mizq3h         -29.8\n10 kmsq3h         -29.3\n# ℹ 42 more rows\n\n\nOne great thing about group_by() is that you can give it multiple columns. This allows us to have groups within groups. For instance, we could organize our data by station_id and then break up data for each station by month. That’s a mouthful, so let’s just take a look at it:\n\n#group_by multiple columns\nstationData %&gt;% \n  group_by(station_id, month) %&gt;% \n  summarize(mean_temp=mean(temp, na.rm=TRUE))\n\n`summarise()` has grouped output by 'station_id'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 571 × 3\n# Groups:   station_id [52]\n   station_id month mean_temp\n   &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;\n 1 ag4q3h         1     -31.4\n 2 ag4q3h         2     -43.0\n 3 ag4q3h         3     -54.9\n 4 ag4q3h         4     -60.7\n 5 ag4q3h         5     -57.1\n 6 ag4q3h         6     -58.6\n 7 ag4q3h         7     -60.9\n 8 ag4q3h         8     -61.2\n 9 ag4q3h         9     -63.6\n10 ag4q3h        10     -51.8\n# ℹ 561 more rows\n\n\nWhat are good/bad columns to group by? Try summarizing the mean temperature, grouping by different combinations of columns. Talk with your neighbors about which columns might or might not work well."
  },
  {
    "objectID": "modules/module_1/module_1.3/practice-problems-1.3.html",
    "href": "modules/module_1/module_1.3/practice-problems-1.3.html",
    "title": "Practice Problems 1.3",
    "section": "",
    "text": "First we need to load the penguin data set, just like last week. The dataset will be called penguins This data was collected by real scientists! Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\n\nlibrary(palmerpenguins)\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nlibrary(tidyverse) # to make tidyverse commands available \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nCreate a vector that is the subset of the data with only penguins that live on Torgersen. How many penguins is this?\n\n\nOf the penguins that live on Torgersen, how many have flippers shorter than 190mm?\n\n\nOf the penguins that live on Torgersen, what percentage are female?\n\nThere are three different species of penguins in this dataset. We can see from the photo below that they may have different body dimensions.\n\n\nWhat is the mean and standard deviation of body mass for each penguin species? (Hint: use group_by/summarize)\n\n\nWhat is the mean and standard deviation of bill length for each penguin species?\n\nThe penguins live on different islands. The islands are different sizes and located in different locations within the Palmer Archipelago. This could affect the avaibility of prey, habitat, etc.\n\n\nDo the Adelie penguins living on Torgersen Island have a different mean body mass than the Adelie penguins living on Biscoe?\n\n\nDo the female Adelie penguins living on Torgersen Island have a different mean body mass than the female Adelie penguins living on Biscoe? Calculate both the mean and standard deviation of body mass for both groups.\n\n\nWhat is the maximum bill depth of penguins for each island?\n\n\nWhat is the percentage of female penguins present in the entire dataset?\n\n\nDuring which year did the scientists measure the most penguins? (Hint: how many penguins are in the data set per year)\n\n\nWhat species of penguin live on each island?"
  },
  {
    "objectID": "modules/module_1/module_1.3/practice-problems-1.3-key.html",
    "href": "modules/module_1/module_1.3/practice-problems-1.3-key.html",
    "title": "Practice Problems 1.3 Key",
    "section": "",
    "text": "First we need to load the penguin data set, just like last week. The dataset will be called penguins This data was collected by real scientists! Data were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network.\n\nlibrary(palmerpenguins)\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nlibrary(tidyverse) # to make tidyverse commands available \n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nCreate a vector that is the subset of the data with only penguins that live on Torgersen. How many penguins is this?\n\n\npenguins &lt;- na.omit(penguins)\n\ntorg &lt;- filter(penguins, island == \"Torgersen\")\ntorg\n\n# A tibble: 47 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 37 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nOf the penguins that live on Torgersen, how many have flippers shorter than 190mm?\n\n\ntorgShort &lt;- filter(torg, flipper_length_mm &lt; 190)\ntorgShort\n\n# A tibble: 16 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           38.9          17.8               181        3625\n 4 Adelie  Torgersen           41.1          17.6               182        3200\n 5 Adelie  Torgersen           36.6          17.8               185        3700\n 6 Adelie  Torgersen           34.4          18.4               184        3325\n 7 Adelie  Torgersen           37.2          19.4               184        3900\n 8 Adelie  Torgersen           36.2          16.1               187        3550\n 9 Adelie  Torgersen           34.6          17.2               189        3200\n10 Adelie  Torgersen           36.7          18.8               187        3800\n11 Adelie  Torgersen           38.6          17                 188        2900\n12 Adelie  Torgersen           35.7          17                 189        3350\n13 Adelie  Torgersen           41.1          18.6               189        3325\n14 Adelie  Torgersen           36.2          17.2               187        3150\n15 Adelie  Torgersen           40.2          17                 176        3450\n16 Adelie  Torgersen           35.2          15.9               186        3050\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nOf the penguins that live on Torgersen, what percentage are female?\n\n\ntorgFemalePerc &lt;- torg %&gt;% \n  group_by(sex) %&gt;% \n  summarise(percent=n()/nrow(torg))\n\ntorgFemalePerc\n\n# A tibble: 2 × 2\n  sex    percent\n  &lt;fct&gt;    &lt;dbl&gt;\n1 female   0.511\n2 male     0.489\n\n\nThere are three different species of penguins in this dataset. We can see from the photo below that they may have different body dimensions.\n\n\nWhat is the mean and standard deviation of body mass for each penguin species? (Hint: use group_by/summarize)\n\n\nmassSummary &lt;- penguins %&gt;% \n  group_by(species) %&gt;% \n  summarize(avgMass=mean(body_mass_g), sdMass=sd(body_mass_g))\n\nmassSummary\n\n# A tibble: 3 × 3\n  species   avgMass sdMass\n  &lt;fct&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n1 Adelie      3706.   459.\n2 Chinstrap   3733.   384.\n3 Gentoo      5092.   501.\n\n\n\nWhat is the mean and standard deviation of bill length for each penguin species?\n\n\nlengthSummary &lt;- penguins %&gt;% \n  group_by(species) %&gt;% \n  summarize(avgLength=mean(bill_length_mm), sdLength=sd(bill_length_mm))\n\nlengthSummary\n\n# A tibble: 3 × 3\n  species   avgLength sdLength\n  &lt;fct&gt;         &lt;dbl&gt;    &lt;dbl&gt;\n1 Adelie         38.8     2.66\n2 Chinstrap      48.8     3.34\n3 Gentoo         47.6     3.11\n\n\nThe penguins live on different islands. The islands are different sizes and located in different locations within the Palmer Archipelago. This could affect the avaibility of prey, habitat, etc.\n\n6. Do the Adelie penguins living on Torgersen Island have a different mean body mass than the Adelie penguins living on Biscoe?\n\n# one way is using filters and later calulating mass\n\n# first create vectors that are 1. only Adelie on Torgersen and 2. only Adelie on Biscoe\nadelieTorgersen &lt;- filter(penguins, island==\"Torgersen\" & species==\"Adelie\")\nadelieTorgersen\n\n# A tibble: 47 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           36.7          19.3               193        3450\n 5 Adelie  Torgersen           39.3          20.6               190        3650\n 6 Adelie  Torgersen           38.9          17.8               181        3625\n 7 Adelie  Torgersen           39.2          19.6               195        4675\n 8 Adelie  Torgersen           41.1          17.6               182        3200\n 9 Adelie  Torgersen           38.6          21.2               191        3800\n10 Adelie  Torgersen           34.6          21.1               198        4400\n# ℹ 37 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nadelieBiscoe &lt;- filter(penguins, island==\"Biscoe\" & species==\"Adelie\")\nadelieBiscoe\n\n# A tibble: 44 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Biscoe           37.8          18.3               174        3400\n 2 Adelie  Biscoe           37.7          18.7               180        3600\n 3 Adelie  Biscoe           35.9          19.2               189        3800\n 4 Adelie  Biscoe           38.2          18.1               185        3950\n 5 Adelie  Biscoe           38.8          17.2               180        3800\n 6 Adelie  Biscoe           35.3          18.9               187        3800\n 7 Adelie  Biscoe           40.6          18.6               183        3550\n 8 Adelie  Biscoe           40.5          17.9               187        3200\n 9 Adelie  Biscoe           37.9          18.6               172        3150\n10 Adelie  Biscoe           40.5          18.9               180        3950\n# ℹ 34 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n# then caclulate the average mass of each of those subsets\nadelieTorgersenMass &lt;- mean(adelieTorgersen$body_mass_g)\nadelieTorgersenMass \n\n[1] 3708.511\n\nadelieBiscoeMass &lt;- mean(adelieBiscoe$body_mass_g)\nadelieBiscoeMass\n\n[1] 3709.659\n\n# another way is using group by with multiple criteria, search through the table to find the rows that show Adelies on Torgersen and Biscoe\nmassByIslandSpecies &lt;- penguins %&gt;% \n  group_by(island, species) %&gt;% \n  summarize(avgMass=mean(body_mass_g), sdMass=sd(body_mass_g))\n\n`summarise()` has grouped output by 'island'. You can override using the\n`.groups` argument.\n\nmassByIslandSpecies\n\n# A tibble: 5 × 4\n# Groups:   island [3]\n  island    species   avgMass sdMass\n  &lt;fct&gt;     &lt;fct&gt;       &lt;dbl&gt;  &lt;dbl&gt;\n1 Biscoe    Adelie      3710.   488.\n2 Biscoe    Gentoo      5092.   501.\n3 Dream     Adelie      3701.   449.\n4 Dream     Chinstrap   3733.   384.\n5 Torgersen Adelie      3709.   452.\n\n\n\nDo the female Adelie penguins living on Torgersen Island have a different mean body mass than the female Adelie penguins living on Biscoe? Calculate both the mean and standard deviation of body mass for both groups.\n\n\n# one way is using filters and later calulating mass\n\n# first create vectors that are 1. only Adelie on Torgersen and 2. only Adelie on Biscoe\nadelieTorgersenF &lt;- filter(penguins, island==\"Torgersen\" & species==\"Adelie\" & sex==\"female\")\nadelieTorgersenF\n\n# A tibble: 24 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.5          17.4               186        3800\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           36.7          19.3               193        3450\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           41.1          17.6               182        3200\n 6 Adelie  Torgersen           36.6          17.8               185        3700\n 7 Adelie  Torgersen           38.7          19                 195        3450\n 8 Adelie  Torgersen           34.4          18.4               184        3325\n 9 Adelie  Torgersen           35.9          16.6               190        3050\n10 Adelie  Torgersen           33.5          19                 190        3600\n# ℹ 14 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\nadelieBiscoeF &lt;- filter(penguins, island==\"Biscoe\" & species==\"Adelie\" & sex==\"female\")\nadelieBiscoeF\n\n# A tibble: 22 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Biscoe           37.8          18.3               174        3400\n 2 Adelie  Biscoe           35.9          19.2               189        3800\n 3 Adelie  Biscoe           35.3          18.9               187        3800\n 4 Adelie  Biscoe           40.5          17.9               187        3200\n 5 Adelie  Biscoe           37.9          18.6               172        3150\n 6 Adelie  Biscoe           39.6          17.7               186        3500\n 7 Adelie  Biscoe           35            17.9               190        3450\n 8 Adelie  Biscoe           34.5          18.1               187        2900\n 9 Adelie  Biscoe           39            17.5               186        3550\n10 Adelie  Biscoe           36.5          16.6               181        2850\n# ℹ 12 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n# then caclulate the average mass of each of those subsets\nadelieTorgersenMassF &lt;- mean(adelieTorgersenF$body_mass_g)\nadelieTorgersenSdF&lt;-sd(adelieTorgersenF$body_mass_g)\nadelieTorgersenMassF\n\n[1] 3395.833\n\nadelieTorgersenSdF\n\n[1] 259.1444\n\nadelieBiscoeMassF &lt;- mean(adelieBiscoeF$body_mass_g)\nadelieBiscoeSdF &lt;- sd(adelieBiscoeF$body_mass_g)\nadelieBiscoeMassF\n\n[1] 3369.318\n\nadelieBiscoeSdF\n\n[1] 343.4707\n\n\n\nWhat is the maximum bill depth of penguins for each island?\n\n\nbillByIsland &lt;- penguins %&gt;% \n  group_by(island) %&gt;% \n  summarize(maxDepth=max(bill_depth_mm)) \nbillByIsland\n\n# A tibble: 3 × 2\n  island    maxDepth\n  &lt;fct&gt;        &lt;dbl&gt;\n1 Biscoe        21.1\n2 Dream         21.2\n3 Torgersen     21.5\n\n\n\nWhat is the percentage of female penguins present in the entire dataset?\n\n\nfemalePerc &lt;- penguins %&gt;% \n  group_by(sex) %&gt;% \n  summarise(percent=n()/nrow(penguins))\n\nfemalePerc\n\n# A tibble: 2 × 2\n  sex    percent\n  &lt;fct&gt;    &lt;dbl&gt;\n1 female   0.495\n2 male     0.505\n\n\n\nDuring which year did the scientists measure the most penguins? (Hint: how many penguins are in the data set per year)\n\n\nyearCounts &lt;- penguins %&gt;% \n  group_by(year) %&gt;% \n  summarize(count=n())\nyearCounts\n\n# A tibble: 3 × 2\n   year count\n  &lt;int&gt; &lt;int&gt;\n1  2007   103\n2  2008   113\n3  2009   117\n\n\n\nWhat species of penguin live on each island?\n\n\nspeciesByIsland &lt;- penguins %&gt;% \n  group_by(species) %&gt;% \n  summarize(penguinSp=unique(island)) \n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\nspeciesByIsland\n\n# A tibble: 5 × 2\n# Groups:   species [3]\n  species   penguinSp\n  &lt;fct&gt;     &lt;fct&gt;    \n1 Adelie    Torgersen\n2 Adelie    Biscoe   \n3 Adelie    Dream    \n4 Chinstrap Dream    \n5 Gentoo    Biscoe   \n\n# on Torgersen\n# Adelie only \n\n# on Biscoe\n# Adelie and Gentoo\n\n# on Dream\n#Adelie and Chinstrap"
  },
  {
    "objectID": "modules/module_1/module_1.3/plots for Monday class.html",
    "href": "modules/module_1/module_1.3/plots for Monday class.html",
    "title": "Plots for Monday class",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\n\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\nadelie&lt;-penguins %&gt;%\n  filter(species==\"Adelie\")\n\ngentoo&lt;-penguins %&gt;% \n  filter(species==\"Gentoo\")\n\nchinstrap&lt;-penguins %&gt;%\n  filter(species==\"Chinstrap\")\n\n\nbillLengthsAllHist&lt;-ggplot(data=penguins, mapping=aes(bill_length_mm))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of All Penguin Bill Lengths\", x=\"Bill Lengths (mm)\", y=\"Count\")\n\nggsave( \"plots/BillLengthsAll.jpg\",billLengthsAllHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\nbodyMassAllHist&lt;-ggplot(data=penguins, mapping=aes(body_mass_g))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of All Penguin Body Mass\", x=\"Body Mass (g)\", y=\"Count\")\n\nggsave( \"plots/BodyMassAll.jpg\",bodyMassAllHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n#Hists of Adelie bill length & mass\n\nbillLengthsAdelieHist&lt;-ggplot(data=adelie, mapping=aes(bill_length_mm))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Adelie Penguin Bill Lengths\", x=\"Bill Lengths (mm)\", y=\"Count\")\n\nggsave( \"plots/BillLengthsAdelie.jpg\",billLengthsAdelieHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_bin()`).\n\nbodyMassAdelieHist&lt;-ggplot(data=adelie, mapping=aes(body_mass_g))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Adelie Penguin Body Mass\", x=\"Body Mass (g)\", y=\"Count\")\n\nggsave( \"plots/BodyMassAdelie.jpg\",bodyMassAdelieHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n#Hists of Adelie bill length & mass\n\nbillLengthsAdelieHist&lt;-ggplot(data=adelie, mapping=aes(bill_length_mm))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Adelie Penguin Bill Lengths\", x=\"Bill Lengths (mm)\", y=\"Count\")\n\nggsave( \"plots/BillLengthsAdelie.jpg\",billLengthsAdelieHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_bin()`).\n\nbodyMassAdelieHist&lt;-ggplot(data=adelie, mapping=aes(body_mass_g))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Adelie Penguin Body Mass\", x=\"Body Mass (g)\", y=\"Count\")\n\nggsave( \"plots/BodyMassAdelie.jpg\",bodyMassAdelieHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n#Hists of Gentoo bill length & mass\n\nbillLengthsGentooHist&lt;-ggplot(data=gentoo, mapping=aes(bill_length_mm))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Gentoo Penguin Bill Lengths\", x=\"Bill Lengths (mm)\", y=\"Count\")\n\nggsave( \"plots/BillLengthsGentoo.jpg\",billLengthsGentooHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_bin()`).\n\nbodyMassGentooHist&lt;-ggplot(data=gentoo, mapping=aes(body_mass_g))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Gentoo Penguin Body Mass\", x=\"Body Mass (g)\", y=\"Count\")\n\nggsave( \"plots/BodyMassGentoo.jpg\",bodyMassGentooHist)\n\nSaving 7 x 5 in image\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n#Hists of Chinstrap bill length & mass\n\nbillLengthsChinstrapHist&lt;-ggplot(data=chinstrap, mapping=aes(bill_length_mm))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Chinstrap Penguin Bill Lengths\", x=\"Bill Lengths (mm)\", y=\"Count\")\n\nggsave( \"plots/BillLengthsChinstrap.jpg\",billLengthsChinstrapHist)\n\nSaving 7 x 5 in image\n\nbodyMassChinstrapHist&lt;-ggplot(data=chinstrap, mapping=aes(body_mass_g))+\n  geom_histogram(bins=20)+\n  labs(title=\"Distribution of Chinstrap Penguin Body Mass\", x=\"Body Mass (g)\", y=\"Count\")\n\nggsave( \"plots/BodyMassChinstrap.jpg\",bodyMassChinstrapHist)\n\nSaving 7 x 5 in image\n\n\n\n#bill length stats by species\n\npenguinBillLengthStats&lt;-penguins %&gt;% group_by(species) %&gt;% summarize(avgBillLength=mean(bill_length_mm, na.rm=TRUE), sdBillLength=sd(bill_length_mm, na.rm=TRUE))\n\npenguinBillLengthStats\n\n# A tibble: 3 × 3\n  species   avgBillLength sdBillLength\n  &lt;fct&gt;             &lt;dbl&gt;        &lt;dbl&gt;\n1 Adelie             38.8         2.66\n2 Chinstrap          48.8         3.34\n3 Gentoo             47.5         3.08\n\n\n\n#bar plot of bill lengths\n\nbillLengthPlot&lt;-ggplot(data=penguinBillLengthStats, mapping=aes(x=species, y=avgBillLength, fill=species))+\n  geom_bar(stat=\"identity\", color=\"black\")+\n  labs(title=\"Comparison of Average Bill Lengths by Species\", y=\"Average Bill Length (mm)\", x=\"Species\")+\n  geom_errorbar(aes(ymin=avgBillLength-sdBillLength, ymax=avgBillLength+sdBillLength), width=.2,\n                 position=position_dodge(.9)) \n\n\nbillLengthPlot\n\n\n\n\n\n\n\nggsave(\"plots/BillLengthComparison.jpg\",billLengthPlot )\n\nSaving 7 x 5 in image\n\n\n\n#body mass stats by species\n\npenguinMassStats&lt;-penguins %&gt;% group_by(species) %&gt;% summarize(avgBodyMass=mean(body_mass_g, na.rm=TRUE), sdBodyMass=sd(body_mass_g, na.rm=TRUE))\n\npenguinMassStats\n\n# A tibble: 3 × 3\n  species   avgBodyMass sdBodyMass\n  &lt;fct&gt;           &lt;dbl&gt;      &lt;dbl&gt;\n1 Adelie          3701.       459.\n2 Chinstrap       3733.       384.\n3 Gentoo          5076.       504.\n\n\n\n#bar plot of body mass\n\nbodyMassPlot&lt;-ggplot(data=penguinMassStats, mapping=aes(x=species, y=avgBodyMass, fill=species))+\n  geom_bar(stat=\"identity\", color=\"black\")+\n  labs(title=\"Comparison of Average Body Mass by Species\", y=\"Average Body Mass (g)\", x=\"Species\")+\n  geom_errorbar(aes(ymin=avgBodyMass-sdBodyMass, ymax=avgBodyMass+sdBodyMass), width=.2,\n                 position=position_dodge(.9)) \n\n\nbodyMassPlot\n\n\n\n\n\n\n\nggsave(\"plots/BodyMassComparison.jpg\",bodyMassPlot )\n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "modules/module_1/module_1.3/homework-1.3-key.html",
    "href": "modules/module_1/module_1.3/homework-1.3-key.html",
    "title": "Homework Module 1.3 Key",
    "section": "",
    "text": "Your Name\n\n\nDate\nIn the questions below, use R code to answer questions. For any non-coding questions, give your answer as a comment.\nRun this code chunk first, to make the survey data available as the variable classData:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nclassData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nCreate a subset of classData of students who responded less than 3 on the fishing question, called poorFishing. How many reported less than 3?\n\n\npoorFishing&lt;-classData %&gt;% filter(fishing&lt;3)\n\nnrow(poorFishing)\n\n[1] 54\n\n\n\nDescribe logical operators, and how they can be used in the filter function:\n\n\n# Logical operators are a logical action or process, like \"&\" or \"|\". They allow you to have multiple conditions in the filter function.\n\n\nHow many Lewis & Clark students voted to have the bear as the team flag? Show code below how you would derive your answer:\n\n\nlcBear&lt;-classData %&gt;% \n  filter(school==\"Lewis & Clark College\" & teamFlag==\"Bear\")\n\nnrow(lcBear)\n\n[1] 9\n\n\n\nWhat is the “pipe” in R? What is it used for?\n\n\n# The pipe, %&gt;%, is a tidyverse convention that allows you to chain data and functions together. \n\n\nDetermine the mean and standard deviation of self-reported bedside manner, comparing Lewis & Clark to University of Arizona students:\n\n\nbedsideMannerData&lt;- classData %&gt;% \n  group_by(school) %&gt;% \n  summarize(bedsideAvg=mean(bedsideManner), bedsideSd=sd(bedsideManner))\n\nbedsideMannerData\n\n# A tibble: 2 × 3\n  school                bedsideAvg bedsideSd\n  &lt;chr&gt;                      &lt;dbl&gt;     &lt;dbl&gt;\n1 Lewis & Clark College       3.62     0.922\n2 University of Arizona       3.39     1.34 \n\n\n\nCreate a data set showing the percentage of votes for team flag animal, just for Lewis & Clark students:\n\n\nlc&lt;-classData %&gt;% \n  filter(school==\"Lewis & Clark College\")\n\nlcTotal&lt;-nrow(lc)\n\nlcFlagPercentage&lt;-lc %&gt;% \n  group_by(teamFlag) %&gt;% \n  summarize(percentage=n()/lcTotal)\n\nlcFlagPercentage\n\n# A tibble: 4 × 2\n  teamFlag                             percentage\n  &lt;chr&gt;                                     &lt;dbl&gt;\n1 Bear                                      0.191\n2 Penguin                                   0.532\n3 Sea Spider (Pycnogonida - google it)      0.170\n4 Seal                                      0.106"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data in the wild",
    "section": "",
    "text": "An emperor penguin jumping out of the water onto ice in Antarctica, photo by Christopher Michel.",
    "crumbs": [
      "Data in the wild"
    ]
  },
  {
    "objectID": "index.html#a-numbers-general-education-course-lewis-clark-college",
    "href": "index.html#a-numbers-general-education-course-lewis-clark-college",
    "title": "Data in the wild",
    "section": "",
    "text": "An emperor penguin jumping out of the water onto ice in Antarctica, photo by Christopher Michel.",
    "crumbs": [
      "Data in the wild"
    ]
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "Data in the wild",
    "section": "Course Overview",
    "text": "Course Overview\nData in the Wild is a semester-long introductory course to quantitative reasoning, primarily using R to apply concepts to “real world” scenarios. This course is designed for first-year college students with no experience coding. Throughout this course, there are three interwoven narratives broken into four modules: a mission to Antarctica as the real world scenario, coding in R, and quantitative reasoning. We rely heavily on tidyverse for many functions, including plotting in ggplot.",
    "crumbs": [
      "Data in the wild"
    ]
  },
  {
    "objectID": "index.html#intended-audience",
    "href": "index.html#intended-audience",
    "title": "Data in the wild",
    "section": "Intended Audience",
    "text": "Intended Audience\nThis course is intended for a general education, first-year student audience. This course is designed to equip students with basic quantitative skills for understanding our world.",
    "crumbs": [
      "Data in the wild"
    ]
  },
  {
    "objectID": "index.html#narrative-structure",
    "href": "index.html#narrative-structure",
    "title": "Data in the wild",
    "section": "Narrative Structure",
    "text": "Narrative Structure\nThe Antarctica Narrative: We begin module 1 with getting to know the team of students and their relevant skills to the mission. We learn about penguins and Antartic weather. We learn the basics of Rstudio and descriptive statistics. We then transition to module 2, with a sickness outbreak in the team. Students use their descriptive statistics knowledge from module 1 and learn how to create data visualizations to figure out the cause of the sickness. Students practice creating data visualizations using the same penguin data set as in module 1. In module 3, having identified the cause of the illness as aquaculture fish, the team attempts to find new food sources in Antarctica. Students learn about inferential statistics, and perform t-tests and ANOVAs to determine the optimal fishing location. Finally, in module 4, students learn regression analysis to choose how to build a road to the optimal fishing location.\nWe completed the course with group independent projects based on real Antarctica data, culminating in 1. data visualization(s) and abstract, and 2. oral presentation of the visualizations. Information on independent projects is located within the independent project folder.",
    "crumbs": [
      "Data in the wild"
    ]
  },
  {
    "objectID": "index.html#course-material-organization",
    "href": "index.html#course-material-organization",
    "title": "Data in the wild",
    "section": "Course Material Organization",
    "text": "Course Material Organization\nThe lessons are organized by module and week. Our course schedule is located in the extras folder.\nWe generally structured each module as follows:\nDay 1: Lecture or discussion-based introduction to the quantitative and narrative content\nDay 2: In-class code along session, homework to follow\nDay 3: Small group work on practice and challenge problems using the Palmer Penguin data set\nRepeat in-class code along and practice until all module topics addressed. Written reflection prompts were also used ~ once per module as homework. Written exam given at the end of the module, focusing more on core concepts of quantitative reasoning. We also interspersed in-class work days for the independent projects during the second half of the semester.",
    "crumbs": [
      "Data in the wild"
    ]
  },
  {
    "objectID": "index.html#github-material-organization",
    "href": "index.html#github-material-organization",
    "title": "Data in the wild",
    "section": "Github Material Organization",
    "text": "Github Material Organization\nIn each module, there is a readme file explaining the broad goals. Each week also has a read me file explaining the sequence of activities.",
    "crumbs": [
      "Data in the wild"
    ]
  }
]