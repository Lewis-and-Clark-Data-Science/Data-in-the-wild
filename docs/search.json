[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "An emperor penguin jumping out of the water onto ice in Antarctica, photo by Christopher Michel.\n\n\n\n\n\nData in the Wild is a semester-long introductory course to quantitative reasoning, primarily using R to apply concepts to “real world” scenarios. This course is designed for first-year college students with no experience coding. Throughout this course, there are three interwoven narratives broken into four modules: a mission to Antarctica as the real world scenario, coding in R, and quantitative reasoning. We rely heavily on tidyverse for many functions, including plotting in ggplot.\n\n\n\nThis course is intended for a general education, first-year student audience. This course is designed to equip students with basic quantitative skills for understanding our world.\n\n\n\nThe Antarctica Narrative: We begin module 1 with getting to know the team of students and their relevant skills to the mission. We learn about penguins and Antartic weather. We learn the basics of Rstudio and descriptive statistics. We then transition to module 2, with a sickness outbreak in the team. Students use their descriptive statistics knowledge from module 1 and learn how to create data visualizations to figure out the cause of the sickness. Students practice creating data visualizations using the same penguin data set as in module 1. In module 3, having identified the cause of the illness as aquaculture fish, the team attempts to find new food sources in Antarctica. Students learn about inferential statistics, and perform t-tests and ANOVAs to determine the optimal fishing location. Finally, in module 4, students learn regression analysis to choose how to build a road to the optimal fishing location.\nWe completed the course with group independent projects based on real Antarctica data, culminating in 1. data visualization(s) and abstract, and 2. oral presentation of the visualizations. Information on independent projects is located within the independent project folder.\n\n\n\nThe lessons are organized by module and week. Our course schedule is located in the extras folder.\nWe generally structured each module as follows:\nDay 1: Lecture or discussion-based introduction to the quantitative and narrative content\nDay 2: In-class code along session, homework to follow\nDay 3: Small group work on practice and challenge problems using the Palmer Penguin data set\nRepeat in-class code along and practice until all module topics addressed. Written reflection prompts were also used ~ once per module as homework. Written exam given at the end of the module, focusing more on core concepts of quantitative reasoning. We also interspersed in-class work days for the independent projects during the second half of the semester.\n\n\n\nIn each module, there is a readme file explaining the broad goals. Each week also has a read me file explaining the sequence of activities.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "welcome to data in the wild\n\n\n\n\n\n\n\n\nModule\nTopics\nCode-a-long\nHomework\nGroup Practice Problems\n\n\n\n\n1.1\nIntro to RStudio / posit.cloud\ncode-a-long-1.1.qmd\n\n\n\n\n1.2\nVariables, functions, loading data\ncode-a-long-1.2.qmd\nhomework-1.2.qmd\npractice-problems-1.2.qmd\n\n\n1.3\nAnalyzing class data set\ncode-a-long-1.3.qmd\nhomework-1.3.qmd\npractice-problems-1.3.qmd\n\n\n1.4\nAnalyzing external data set\ncode-a-long-1.4.qmd\nhomework-1.4.qmd",
    "crumbs": [
      "Schedule"
    ]
  },
  {
    "objectID": "using.html",
    "href": "using.html",
    "title": "Using this content",
    "section": "",
    "text": "##",
    "crumbs": [
      "Using this content"
    ]
  },
  {
    "objectID": "modules/module_1/module_1.2/code-a-long-1.2.html",
    "href": "modules/module_1/module_1.2/code-a-long-1.2.html",
    "title": "Module 1.2 Code-a-long",
    "section": "",
    "text": "Gain some familiarity and comfort with rstudio\nReview how to assign variables\nLearn about and use functions\nLearn about and use vectors\nWrite code to work with a data set, and calculate some descriptive statistics\n\n\n\n\nThe grey rectangle below is a “code chunk”. Everything withing the grey area is interpreted as R code. To run the code, click the green triangle in the upper-right corner.\nIn this example, R can perform basic math:\n\n2+2\n\n[1] 4\n\n\nNow it’s your turn. Enter code below to subtract ten from twenty-two:\n\n22-10\n\n[1] 12\n\n\n\n\nWe’ll be working a lot with variables throughout this semester. A variable is a name you give to some value. The value could be a single number, a word, a bunch of words, an entire data set, etc.\nMost scripting languages use the “=” sign to assign a value to a variable, but R uses “&lt;-”.\n\n# assigns 10 to x\nx&lt;-10\n\nIt’s important to note that creating a new variable using code above doesn’t give you any output. Often it’s a good idea to print your variable to the screen, just to confirm it worked the way you intended:\n\n# prints x\nx\n\n[1] 10\n\n#Anything preceded by a \"#\" is a \"comment\". It does not get executed as code.\n#Comments can be super helpful to provide info on your code.\n\nNow it’s your turn. Create a variable “y”, set it equal to 7+9, and then print it out:\n\ny&lt;-7+9\ny\n\n[1] 16\n\n\n\n\n\nCoding languages, including R, have functions that help you quickly execute common tasks. Functions typically take the form of:\nfunctionName(argument1, argument2, etc….)\nArguments are the inputs you send to a function, so it has all the information it needs to perform its operation.\nFor example, the function sqrt(number) takes the square root of a number. This lets us quickly compute the answer, rather than having to write the formula for a square root.\n\nsqrt(9)\n\n[1] 3\n\n\nYOUR TURN: In the chunk below, create a variable z, set it equal to the square root of 90, and print it out:\n\nz&lt;-sqrt(90)\nz\n\n[1] 9.486833\n\n\nOne nice thing about rstudio is that you can readily access documentation for functions by using the “help” command:\n\nhelp(sqrt)\n\nThe documentation appears in the lower right window in the “help” tab.\nOne key question: how do you know what functions exist, and what they do?\nAnswer: you Google what you’re trying to do! In the case of R, you might search “How do I do ‘x’ in R?”\nLet’s say you are interested in calculating the absolute value (positive distance from zero) of -35 in R. Take a moment with your group/neighbors, and try to find the answer by searching the internet. In the code chunk below, use the function you found to compute this calculation:\n\n# compute the absolute value of -35\n\n\n\n\nSo far we’ve created variables that have single values (e.g. x&lt;-7), but there are often cases where we need to assign multiple values to a variable. These types of variables are called vectors.\nIn order to create a vector, you can use the “c” function (c stands for “combine”). Here’s an example:\n\nmyFirstVector&lt;-c(3,7,1,10)\n\nmyFirstVector\n\n[1]  3  7  1 10\n\n\nNow it’s your turn. Create a vector called mySecondVector, assign the values 8, -11, 100, 35 to it, and print it to the screen:\n\n# use the \"c\" function to create mySecondVector:\n\nBefore moving on, let’s talk a little about variable naming conventions. We started out using x, y, and z when learning about variables. That technically works, but it’s better practice to be more descriptive in your variable names. The examples above and below use a syntax called “camel case”. This allows you to string words together without spaces, but preserves quick readability. From this point on, we’re going to create variables with camel case - you should too!\n\nIt may not be immediately clear what the utility of vectors is, so let’s take a look at a practical use case. Below is a vector containing the responses from you and your classmates (and U of Arizona students) on self-reported fishing skill (1 being low, 5 being high):\n\nfishingSkill&lt;-c(1,2,2,1,1,1,1,2,2,5,1,2,2,1,5,3,4,4,4,2,1,2,2,3,2,1,2,2,2,1,5,2,3,1,4,5,2,2,2,1,1,1,1,2,3,1,1,2,1,3,1,1,1,1,2,2,5,3,1,1,1,1,2,1,3,2,5,1,2,3,3,2,3,5,2)\n\nfishingSkill\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nLet’s say we’re interested in finding the average of all the responses. We can do this by use the mean function in R: (we’ll dive more into descriptive statistics next week, and how they differ from inferential)\n\navgFishingSkill&lt;-mean(fishingSkill)\n\navgFishingSkill\n\n[1] 2.146667\n\n\nWe can also calculate the median (the “middle” value, when data is in numerical order) with the median function:\n\nmedianFishingSkill&lt;-median(fishingSkill)\n\nmedianFishingSkill\n\n[1] 2\n\n\nWe can also calculate the standard deviation (a measurement of how spread apart the data is):\n\nsdFishingSkill&lt;-sd(fishingSkill)\n\nsdFishingSkill\n\n[1] 1.248711\n\n\nNow it’s your turn. Given the vector below of self-reported cooking skill ranking, calculate its mean, median, and standard deviation:\n\ncookingSkill&lt;-c(4,5,4,1,2,5,4,4,4,4,3,2,2,2,4,4,4,3,3,5,3,3,4,4,5,5,3,4,3,3,4,4,3,4,1,4,3,4,1,4,2,3,2,4,2,2,2,4,4,1,5,3,3,4,2,4,2,3,3,2,1,3,4,2,5,5,3,5,4,2,4,4,3,3,4,4)\n\n# calculate the mean\n\n#calculate median\n\n# calculate the standard deviation\n\n\n\n\n\nOne of the most common uses of R is to load a data set into R as a variable, and then use that data to ask and answer questions with code. Let’s start off by loading a package called the Tidyverse. The Tidyverse is a series of functions written by data scientists to make working with data a little easier. We can load it by running the following command:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNotice in the Files tab in the lower-right window, there is a file titled teamAntarcticaData.csv. This is a copy of the spreadsheet data from the Google form. Below, we can assign the entire data set to a variable using the read_csv function:\n\n#load the data\nteamAntarcticaData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#print to screen\nteamAntarcticaData\n\n# A tibble: 75 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 65 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nEarlier in this exercise we looked at the array of responses for both fishing and cooking aptitude, though in both cases the vectors were hand-typed (by me). A much more common way to acquire, and then use, a vector of data is to directly query the data set. You can get a vector (a.k.a. column) of data by using the following syntax:\ndataSet$columnName\nLet’s get all responses for fishing aptitude directly from the data set:\n\nfishing&lt;-teamAntarcticaData$fishing\n\nfishing\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nAnd just like before, we can calculate the mean, median, and standard deviation:\n\nmean(fishing)\n\n[1] 2.146667\n\nmedian(fishing)\n\n[1] 2\n\nsd(fishing)\n\n[1] 1.248711\n\n\nNow it’s your turn:\nUse the data set to get the column values for tolerance of cold (hint: after typing the $, use auto-complete to select the column name). Calculate its mean, median, and standard deviation.\n\n# create a vector that contains the column values for cold tolerance\n\n\n\n#calculate the mean\n\n\n#calculate the median\n\n\n# calculate the standard deviation\n\nNow do the same for comfort level with being in a remote location:\n\n# create a vector that contains the column values for comfort level with remote location\n\n\n\n#calculate the mean\n\n\n#calculate the median\n\n\n# calculate the standard deviation\n\nNow create a vector to get the responses for parka color. How is this data different from the other examples we’ve seen? What can we learn from the data?\nWhen you’re finished, click on problem-set.Rmd. problem-set.Rmd is a homework assignment, and is due at midnight on Thursday, September 8th via Moodle."
  },
  {
    "objectID": "modules/module_1/module_1.2/code-a-long-1.2.html#september-7th-2022",
    "href": "modules/module_1/module_1.2/code-a-long-1.2.html#september-7th-2022",
    "title": "Module 1.2 Code-a-long",
    "section": "",
    "text": "Gain some familiarity and comfort with rstudio\nReview how to assign variables\nLearn about and use functions\nLearn about and use vectors\nWrite code to work with a data set, and calculate some descriptive statistics\n\n\n\n\nThe grey rectangle below is a “code chunk”. Everything withing the grey area is interpreted as R code. To run the code, click the green triangle in the upper-right corner.\nIn this example, R can perform basic math:\n\n2+2\n\n[1] 4\n\n\nNow it’s your turn. Enter code below to subtract ten from twenty-two:\n\n22-10\n\n[1] 12\n\n\n\n\nWe’ll be working a lot with variables throughout this semester. A variable is a name you give to some value. The value could be a single number, a word, a bunch of words, an entire data set, etc.\nMost scripting languages use the “=” sign to assign a value to a variable, but R uses “&lt;-”.\n\n# assigns 10 to x\nx&lt;-10\n\nIt’s important to note that creating a new variable using code above doesn’t give you any output. Often it’s a good idea to print your variable to the screen, just to confirm it worked the way you intended:\n\n# prints x\nx\n\n[1] 10\n\n#Anything preceded by a \"#\" is a \"comment\". It does not get executed as code.\n#Comments can be super helpful to provide info on your code.\n\nNow it’s your turn. Create a variable “y”, set it equal to 7+9, and then print it out:\n\ny&lt;-7+9\ny\n\n[1] 16\n\n\n\n\n\nCoding languages, including R, have functions that help you quickly execute common tasks. Functions typically take the form of:\nfunctionName(argument1, argument2, etc….)\nArguments are the inputs you send to a function, so it has all the information it needs to perform its operation.\nFor example, the function sqrt(number) takes the square root of a number. This lets us quickly compute the answer, rather than having to write the formula for a square root.\n\nsqrt(9)\n\n[1] 3\n\n\nYOUR TURN: In the chunk below, create a variable z, set it equal to the square root of 90, and print it out:\n\nz&lt;-sqrt(90)\nz\n\n[1] 9.486833\n\n\nOne nice thing about rstudio is that you can readily access documentation for functions by using the “help” command:\n\nhelp(sqrt)\n\nThe documentation appears in the lower right window in the “help” tab.\nOne key question: how do you know what functions exist, and what they do?\nAnswer: you Google what you’re trying to do! In the case of R, you might search “How do I do ‘x’ in R?”\nLet’s say you are interested in calculating the absolute value (positive distance from zero) of -35 in R. Take a moment with your group/neighbors, and try to find the answer by searching the internet. In the code chunk below, use the function you found to compute this calculation:\n\n# compute the absolute value of -35\n\n\n\n\nSo far we’ve created variables that have single values (e.g. x&lt;-7), but there are often cases where we need to assign multiple values to a variable. These types of variables are called vectors.\nIn order to create a vector, you can use the “c” function (c stands for “combine”). Here’s an example:\n\nmyFirstVector&lt;-c(3,7,1,10)\n\nmyFirstVector\n\n[1]  3  7  1 10\n\n\nNow it’s your turn. Create a vector called mySecondVector, assign the values 8, -11, 100, 35 to it, and print it to the screen:\n\n# use the \"c\" function to create mySecondVector:\n\nBefore moving on, let’s talk a little about variable naming conventions. We started out using x, y, and z when learning about variables. That technically works, but it’s better practice to be more descriptive in your variable names. The examples above and below use a syntax called “camel case”. This allows you to string words together without spaces, but preserves quick readability. From this point on, we’re going to create variables with camel case - you should too!\n\nIt may not be immediately clear what the utility of vectors is, so let’s take a look at a practical use case. Below is a vector containing the responses from you and your classmates (and U of Arizona students) on self-reported fishing skill (1 being low, 5 being high):\n\nfishingSkill&lt;-c(1,2,2,1,1,1,1,2,2,5,1,2,2,1,5,3,4,4,4,2,1,2,2,3,2,1,2,2,2,1,5,2,3,1,4,5,2,2,2,1,1,1,1,2,3,1,1,2,1,3,1,1,1,1,2,2,5,3,1,1,1,1,2,1,3,2,5,1,2,3,3,2,3,5,2)\n\nfishingSkill\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nLet’s say we’re interested in finding the average of all the responses. We can do this by use the mean function in R: (we’ll dive more into descriptive statistics next week, and how they differ from inferential)\n\navgFishingSkill&lt;-mean(fishingSkill)\n\navgFishingSkill\n\n[1] 2.146667\n\n\nWe can also calculate the median (the “middle” value, when data is in numerical order) with the median function:\n\nmedianFishingSkill&lt;-median(fishingSkill)\n\nmedianFishingSkill\n\n[1] 2\n\n\nWe can also calculate the standard deviation (a measurement of how spread apart the data is):\n\nsdFishingSkill&lt;-sd(fishingSkill)\n\nsdFishingSkill\n\n[1] 1.248711\n\n\nNow it’s your turn. Given the vector below of self-reported cooking skill ranking, calculate its mean, median, and standard deviation:\n\ncookingSkill&lt;-c(4,5,4,1,2,5,4,4,4,4,3,2,2,2,4,4,4,3,3,5,3,3,4,4,5,5,3,4,3,3,4,4,3,4,1,4,3,4,1,4,2,3,2,4,2,2,2,4,4,1,5,3,3,4,2,4,2,3,3,2,1,3,4,2,5,5,3,5,4,2,4,4,3,3,4,4)\n\n# calculate the mean\n\n#calculate median\n\n# calculate the standard deviation\n\n\n\n\n\nOne of the most common uses of R is to load a data set into R as a variable, and then use that data to ask and answer questions with code. Let’s start off by loading a package called the Tidyverse. The Tidyverse is a series of functions written by data scientists to make working with data a little easier. We can load it by running the following command:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nNotice in the Files tab in the lower-right window, there is a file titled teamAntarcticaData.csv. This is a copy of the spreadsheet data from the Google form. Below, we can assign the entire data set to a variable using the read_csv function:\n\n#load the data\nteamAntarcticaData&lt;-read_csv(\"teamAntarcticaData.csv\")\n\nRows: 75 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): Timestamp, school, swim, animals, parkaColor, teamFlag, distance\ndbl (5): fishing, cold, remote, bedsideManner, cooking\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#print to screen\nteamAntarcticaData\n\n# A tibble: 75 × 12\n   Timestamp       school fishing swim   cold animals remote parkaColor teamFlag\n   &lt;chr&gt;           &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   \n 1 8/30/2022 16:0… Unive…       1 Yes       4 Yes          4 Gold       Penguin \n 2 8/30/2022 16:0… Unive…       2 Yes       4 Yes          5 Blue       Bear    \n 3 8/30/2022 16:0… Unive…       2 Yes       4 Yes          3 Green      Penguin \n 4 8/30/2022 16:0… Unive…       1 Yes       1 Yes          1 Blue       Seal    \n 5 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 White      Sea Spi…\n 6 8/30/2022 16:0… Unive…       1 Yes       3 Yes          3 hot pink   Penguin \n 7 8/30/2022 16:0… Unive…       1 Yes       2 Yes          3 Blue       Sea Spi…\n 8 8/30/2022 16:0… Unive…       2 Yes       2 Yes          4 Blue       Penguin \n 9 8/30/2022 16:0… Unive…       2 Yes       2 Yes          5 White      Bear    \n10 8/30/2022 16:0… Unive…       5 Yes       5 Yes          5 Blue       Penguin \n# ℹ 65 more rows\n# ℹ 3 more variables: distance &lt;chr&gt;, bedsideManner &lt;dbl&gt;, cooking &lt;dbl&gt;\n\n\nEarlier in this exercise we looked at the array of responses for both fishing and cooking aptitude, though in both cases the vectors were hand-typed (by me). A much more common way to acquire, and then use, a vector of data is to directly query the data set. You can get a vector (a.k.a. column) of data by using the following syntax:\ndataSet$columnName\nLet’s get all responses for fishing aptitude directly from the data set:\n\nfishing&lt;-teamAntarcticaData$fishing\n\nfishing\n\n [1] 1 2 2 1 1 1 1 2 2 5 1 2 2 1 5 3 4 4 4 2 1 2 2 3 2 1 2 2 2 1 5 2 3 1 4 5 2 2\n[39] 2 1 1 1 1 2 3 1 1 2 1 3 1 1 1 1 2 2 5 3 1 1 1 1 2 1 3 2 5 1 2 3 3 2 3 5 2\n\n\nAnd just like before, we can calculate the mean, median, and standard deviation:\n\nmean(fishing)\n\n[1] 2.146667\n\nmedian(fishing)\n\n[1] 2\n\nsd(fishing)\n\n[1] 1.248711\n\n\nNow it’s your turn:\nUse the data set to get the column values for tolerance of cold (hint: after typing the $, use auto-complete to select the column name). Calculate its mean, median, and standard deviation.\n\n# create a vector that contains the column values for cold tolerance\n\n\n\n#calculate the mean\n\n\n#calculate the median\n\n\n# calculate the standard deviation\n\nNow do the same for comfort level with being in a remote location:\n\n# create a vector that contains the column values for comfort level with remote location\n\n\n\n#calculate the mean\n\n\n#calculate the median\n\n\n# calculate the standard deviation\n\nNow create a vector to get the responses for parka color. How is this data different from the other examples we’ve seen? What can we learn from the data?\nWhen you’re finished, click on problem-set.Rmd. problem-set.Rmd is a homework assignment, and is due at midnight on Thursday, September 8th via Moodle."
  },
  {
    "objectID": "index.html#a-numbers-general-education-course-lewis-clark-college",
    "href": "index.html#a-numbers-general-education-course-lewis-clark-college",
    "title": "Home",
    "section": "",
    "text": "An emperor penguin jumping out of the water onto ice in Antarctica, photo by Christopher Michel.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#course-overview",
    "href": "index.html#course-overview",
    "title": "Home",
    "section": "",
    "text": "Data in the Wild is a semester-long introductory course to quantitative reasoning, primarily using R to apply concepts to “real world” scenarios. This course is designed for first-year college students with no experience coding. Throughout this course, there are three interwoven narratives broken into four modules: a mission to Antarctica as the real world scenario, coding in R, and quantitative reasoning. We rely heavily on tidyverse for many functions, including plotting in ggplot.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#intended-audience",
    "href": "index.html#intended-audience",
    "title": "Home",
    "section": "",
    "text": "This course is intended for a general education, first-year student audience. This course is designed to equip students with basic quantitative skills for understanding our world.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#narrative-structure",
    "href": "index.html#narrative-structure",
    "title": "Home",
    "section": "",
    "text": "The Antarctica Narrative: We begin module 1 with getting to know the team of students and their relevant skills to the mission. We learn about penguins and Antartic weather. We learn the basics of Rstudio and descriptive statistics. We then transition to module 2, with a sickness outbreak in the team. Students use their descriptive statistics knowledge from module 1 and learn how to create data visualizations to figure out the cause of the sickness. Students practice creating data visualizations using the same penguin data set as in module 1. In module 3, having identified the cause of the illness as aquaculture fish, the team attempts to find new food sources in Antarctica. Students learn about inferential statistics, and perform t-tests and ANOVAs to determine the optimal fishing location. Finally, in module 4, students learn regression analysis to choose how to build a road to the optimal fishing location.\nWe completed the course with group independent projects based on real Antarctica data, culminating in 1. data visualization(s) and abstract, and 2. oral presentation of the visualizations. Information on independent projects is located within the independent project folder.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#course-material-organization",
    "href": "index.html#course-material-organization",
    "title": "Home",
    "section": "",
    "text": "The lessons are organized by module and week. Our course schedule is located in the extras folder.\nWe generally structured each module as follows:\nDay 1: Lecture or discussion-based introduction to the quantitative and narrative content\nDay 2: In-class code along session, homework to follow\nDay 3: Small group work on practice and challenge problems using the Palmer Penguin data set\nRepeat in-class code along and practice until all module topics addressed. Written reflection prompts were also used ~ once per module as homework. Written exam given at the end of the module, focusing more on core concepts of quantitative reasoning. We also interspersed in-class work days for the independent projects during the second half of the semester.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#github-material-organization",
    "href": "index.html#github-material-organization",
    "title": "Home",
    "section": "",
    "text": "In each module, there is a readme file explaining the broad goals. Each week also has a read me file explaining the sequence of activities.",
    "crumbs": [
      "Home"
    ]
  }
]